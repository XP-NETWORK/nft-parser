import * as _m0 from "protobufjs/minimal";
import { PartSetHeader, Proposal as Proposal1, Part, Vote as Vote2, SignedMsgType, BlockID } from "../../tendermint/types/types";
import { BitArray } from "../../tendermint/libs/bits/types";
export declare const protobufPackage = "tendermint.consensus";
/**
 * NewRoundStep is sent for every step taken in the ConsensusState.
 * For every height/round/step transition
 */
export interface NewRoundStep {
    height: string;
    round: number;
    step: number;
    secondsSinceStartTime: string;
    lastCommitRound: number;
}
/**
 * NewValidBlock is sent when a validator observes a valid block B in some round r,
 * i.e., there is a Proposal for block B and 2/3+ prevotes for the block B in the round r.
 * In case the block is also committed, then IsCommit flag is set to true.
 */
export interface NewValidBlock {
    height: string;
    round: number;
    blockPartSetHeader?: PartSetHeader;
    blockParts?: BitArray;
    isCommit: boolean;
}
/** Proposal is sent when a new block is proposed. */
export interface Proposal {
    proposal?: Proposal1;
}
/** ProposalPOL is sent when a previous proposal is re-proposed. */
export interface ProposalPOL {
    height: string;
    proposalPolRound: number;
    proposalPol?: BitArray;
}
/** BlockPart is sent when gossipping a piece of the proposed block. */
export interface BlockPart {
    height: string;
    round: number;
    part?: Part;
}
/** Vote is sent when voting for a proposal (or lack thereof). */
export interface Vote {
    vote?: Vote2;
}
/** HasVote is sent to indicate that a particular vote has been received. */
export interface HasVote {
    height: string;
    round: number;
    type: SignedMsgType;
    index: number;
}
/** VoteSetMaj23 is sent to indicate that a given BlockID has seen +2/3 votes. */
export interface VoteSetMaj23 {
    height: string;
    round: number;
    type: SignedMsgType;
    blockId?: BlockID;
}
/** VoteSetBits is sent to communicate the bit-array of votes seen for the BlockID. */
export interface VoteSetBits {
    height: string;
    round: number;
    type: SignedMsgType;
    blockId?: BlockID;
    votes?: BitArray;
}
export interface Message {
    newRoundStep?: NewRoundStep | undefined;
    newValidBlock?: NewValidBlock | undefined;
    proposal?: Proposal | undefined;
    proposalPol?: ProposalPOL | undefined;
    blockPart?: BlockPart | undefined;
    vote?: Vote | undefined;
    hasVote?: HasVote | undefined;
    voteSetMaj23?: VoteSetMaj23 | undefined;
    voteSetBits?: VoteSetBits | undefined;
}
export declare const NewRoundStep: {
    encode(message: NewRoundStep, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): NewRoundStep;
    fromJSON(object: any): NewRoundStep;
    toJSON(message: NewRoundStep): unknown;
    fromPartial<I extends {
        height?: string | undefined;
        round?: number | undefined;
        step?: number | undefined;
        secondsSinceStartTime?: string | undefined;
        lastCommitRound?: number | undefined;
    } & {
        height?: string | undefined;
        round?: number | undefined;
        step?: number | undefined;
        secondsSinceStartTime?: string | undefined;
        lastCommitRound?: number | undefined;
    } & Record<Exclude<keyof I, keyof NewRoundStep>, never>>(object: I): NewRoundStep;
};
export declare const NewValidBlock: {
    encode(message: NewValidBlock, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): NewValidBlock;
    fromJSON(object: any): NewValidBlock;
    toJSON(message: NewValidBlock): unknown;
    fromPartial<I extends {
        height?: string | undefined;
        round?: number | undefined;
        blockPartSetHeader?: {
            total?: number | undefined;
            hash?: Uint8Array | undefined;
        } | undefined;
        blockParts?: {
            bits?: string | undefined;
            elems?: string[] | undefined;
        } | undefined;
        isCommit?: boolean | undefined;
    } & {
        height?: string | undefined;
        round?: number | undefined;
        blockPartSetHeader?: ({
            total?: number | undefined;
            hash?: Uint8Array | undefined;
        } & {
            total?: number | undefined;
            hash?: Uint8Array | undefined;
        } & Record<Exclude<keyof I["blockPartSetHeader"], keyof PartSetHeader>, never>) | undefined;
        blockParts?: ({
            bits?: string | undefined;
            elems?: string[] | undefined;
        } & {
            bits?: string | undefined;
            elems?: (string[] & string[] & Record<Exclude<keyof I["blockParts"]["elems"], keyof string[]>, never>) | undefined;
        } & Record<Exclude<keyof I["blockParts"], keyof BitArray>, never>) | undefined;
        isCommit?: boolean | undefined;
    } & Record<Exclude<keyof I, keyof NewValidBlock>, never>>(object: I): NewValidBlock;
};
export declare const Proposal: {
    encode(message: Proposal, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Proposal;
    fromJSON(object: any): Proposal;
    toJSON(message: Proposal): unknown;
    fromPartial<I extends {
        proposal?: {
            type?: SignedMsgType | undefined;
            height?: string | undefined;
            round?: number | undefined;
            polRound?: number | undefined;
            blockId?: {
                hash?: Uint8Array | undefined;
                partSetHeader?: {
                    total?: number | undefined;
                    hash?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
            timestamp?: {
                seconds?: string | undefined;
                nanos?: number | undefined;
            } | undefined;
            signature?: Uint8Array | undefined;
        } | undefined;
    } & {
        proposal?: ({
            type?: SignedMsgType | undefined;
            height?: string | undefined;
            round?: number | undefined;
            polRound?: number | undefined;
            blockId?: {
                hash?: Uint8Array | undefined;
                partSetHeader?: {
                    total?: number | undefined;
                    hash?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
            timestamp?: {
                seconds?: string | undefined;
                nanos?: number | undefined;
            } | undefined;
            signature?: Uint8Array | undefined;
        } & {
            type?: SignedMsgType | undefined;
            height?: string | undefined;
            round?: number | undefined;
            polRound?: number | undefined;
            blockId?: ({
                hash?: Uint8Array | undefined;
                partSetHeader?: {
                    total?: number | undefined;
                    hash?: Uint8Array | undefined;
                } | undefined;
            } & {
                hash?: Uint8Array | undefined;
                partSetHeader?: ({
                    total?: number | undefined;
                    hash?: Uint8Array | undefined;
                } & {
                    total?: number | undefined;
                    hash?: Uint8Array | undefined;
                } & Record<Exclude<keyof I["proposal"]["blockId"]["partSetHeader"], keyof PartSetHeader>, never>) | undefined;
            } & Record<Exclude<keyof I["proposal"]["blockId"], keyof BlockID>, never>) | undefined;
            timestamp?: ({
                seconds?: string | undefined;
                nanos?: number | undefined;
            } & {
                seconds?: string | undefined;
                nanos?: number | undefined;
            } & Record<Exclude<keyof I["proposal"]["timestamp"], keyof import("../../google/protobuf/timestamp").Timestamp>, never>) | undefined;
            signature?: Uint8Array | undefined;
        } & Record<Exclude<keyof I["proposal"], keyof Proposal1>, never>) | undefined;
    } & Record<Exclude<keyof I, "proposal">, never>>(object: I): Proposal;
};
export declare const ProposalPOL: {
    encode(message: ProposalPOL, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ProposalPOL;
    fromJSON(object: any): ProposalPOL;
    toJSON(message: ProposalPOL): unknown;
    fromPartial<I extends {
        height?: string | undefined;
        proposalPolRound?: number | undefined;
        proposalPol?: {
            bits?: string | undefined;
            elems?: string[] | undefined;
        } | undefined;
    } & {
        height?: string | undefined;
        proposalPolRound?: number | undefined;
        proposalPol?: ({
            bits?: string | undefined;
            elems?: string[] | undefined;
        } & {
            bits?: string | undefined;
            elems?: (string[] & string[] & Record<Exclude<keyof I["proposalPol"]["elems"], keyof string[]>, never>) | undefined;
        } & Record<Exclude<keyof I["proposalPol"], keyof BitArray>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof ProposalPOL>, never>>(object: I): ProposalPOL;
};
export declare const BlockPart: {
    encode(message: BlockPart, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): BlockPart;
    fromJSON(object: any): BlockPart;
    toJSON(message: BlockPart): unknown;
    fromPartial<I extends {
        height?: string | undefined;
        round?: number | undefined;
        part?: {
            index?: number | undefined;
            bytes?: Uint8Array | undefined;
            proof?: {
                total?: string | undefined;
                index?: string | undefined;
                leafHash?: Uint8Array | undefined;
                aunts?: Uint8Array[] | undefined;
            } | undefined;
        } | undefined;
    } & {
        height?: string | undefined;
        round?: number | undefined;
        part?: ({
            index?: number | undefined;
            bytes?: Uint8Array | undefined;
            proof?: {
                total?: string | undefined;
                index?: string | undefined;
                leafHash?: Uint8Array | undefined;
                aunts?: Uint8Array[] | undefined;
            } | undefined;
        } & {
            index?: number | undefined;
            bytes?: Uint8Array | undefined;
            proof?: ({
                total?: string | undefined;
                index?: string | undefined;
                leafHash?: Uint8Array | undefined;
                aunts?: Uint8Array[] | undefined;
            } & {
                total?: string | undefined;
                index?: string | undefined;
                leafHash?: Uint8Array | undefined;
                aunts?: (Uint8Array[] & Uint8Array[] & Record<Exclude<keyof I["part"]["proof"]["aunts"], keyof Uint8Array[]>, never>) | undefined;
            } & Record<Exclude<keyof I["part"]["proof"], keyof import("../crypto/proof").Proof>, never>) | undefined;
        } & Record<Exclude<keyof I["part"], keyof Part>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof BlockPart>, never>>(object: I): BlockPart;
};
export declare const Vote: {
    encode(message: Vote, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Vote;
    fromJSON(object: any): Vote;
    toJSON(message: Vote): unknown;
    fromPartial<I extends {
        vote?: {
            type?: SignedMsgType | undefined;
            height?: string | undefined;
            round?: number | undefined;
            blockId?: {
                hash?: Uint8Array | undefined;
                partSetHeader?: {
                    total?: number | undefined;
                    hash?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
            timestamp?: {
                seconds?: string | undefined;
                nanos?: number | undefined;
            } | undefined;
            validatorAddress?: Uint8Array | undefined;
            validatorIndex?: number | undefined;
            signature?: Uint8Array | undefined;
        } | undefined;
    } & {
        vote?: ({
            type?: SignedMsgType | undefined;
            height?: string | undefined;
            round?: number | undefined;
            blockId?: {
                hash?: Uint8Array | undefined;
                partSetHeader?: {
                    total?: number | undefined;
                    hash?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
            timestamp?: {
                seconds?: string | undefined;
                nanos?: number | undefined;
            } | undefined;
            validatorAddress?: Uint8Array | undefined;
            validatorIndex?: number | undefined;
            signature?: Uint8Array | undefined;
        } & {
            type?: SignedMsgType | undefined;
            height?: string | undefined;
            round?: number | undefined;
            blockId?: ({
                hash?: Uint8Array | undefined;
                partSetHeader?: {
                    total?: number | undefined;
                    hash?: Uint8Array | undefined;
                } | undefined;
            } & {
                hash?: Uint8Array | undefined;
                partSetHeader?: ({
                    total?: number | undefined;
                    hash?: Uint8Array | undefined;
                } & {
                    total?: number | undefined;
                    hash?: Uint8Array | undefined;
                } & Record<Exclude<keyof I["vote"]["blockId"]["partSetHeader"], keyof PartSetHeader>, never>) | undefined;
            } & Record<Exclude<keyof I["vote"]["blockId"], keyof BlockID>, never>) | undefined;
            timestamp?: ({
                seconds?: string | undefined;
                nanos?: number | undefined;
            } & {
                seconds?: string | undefined;
                nanos?: number | undefined;
            } & Record<Exclude<keyof I["vote"]["timestamp"], keyof import("../../google/protobuf/timestamp").Timestamp>, never>) | undefined;
            validatorAddress?: Uint8Array | undefined;
            validatorIndex?: number | undefined;
            signature?: Uint8Array | undefined;
        } & Record<Exclude<keyof I["vote"], keyof Vote2>, never>) | undefined;
    } & Record<Exclude<keyof I, "vote">, never>>(object: I): Vote;
};
export declare const HasVote: {
    encode(message: HasVote, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): HasVote;
    fromJSON(object: any): HasVote;
    toJSON(message: HasVote): unknown;
    fromPartial<I extends {
        height?: string | undefined;
        round?: number | undefined;
        type?: SignedMsgType | undefined;
        index?: number | undefined;
    } & {
        height?: string | undefined;
        round?: number | undefined;
        type?: SignedMsgType | undefined;
        index?: number | undefined;
    } & Record<Exclude<keyof I, keyof HasVote>, never>>(object: I): HasVote;
};
export declare const VoteSetMaj23: {
    encode(message: VoteSetMaj23, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): VoteSetMaj23;
    fromJSON(object: any): VoteSetMaj23;
    toJSON(message: VoteSetMaj23): unknown;
    fromPartial<I extends {
        height?: string | undefined;
        round?: number | undefined;
        type?: SignedMsgType | undefined;
        blockId?: {
            hash?: Uint8Array | undefined;
            partSetHeader?: {
                total?: number | undefined;
                hash?: Uint8Array | undefined;
            } | undefined;
        } | undefined;
    } & {
        height?: string | undefined;
        round?: number | undefined;
        type?: SignedMsgType | undefined;
        blockId?: ({
            hash?: Uint8Array | undefined;
            partSetHeader?: {
                total?: number | undefined;
                hash?: Uint8Array | undefined;
            } | undefined;
        } & {
            hash?: Uint8Array | undefined;
            partSetHeader?: ({
                total?: number | undefined;
                hash?: Uint8Array | undefined;
            } & {
                total?: number | undefined;
                hash?: Uint8Array | undefined;
            } & Record<Exclude<keyof I["blockId"]["partSetHeader"], keyof PartSetHeader>, never>) | undefined;
        } & Record<Exclude<keyof I["blockId"], keyof BlockID>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof VoteSetMaj23>, never>>(object: I): VoteSetMaj23;
};
export declare const VoteSetBits: {
    encode(message: VoteSetBits, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): VoteSetBits;
    fromJSON(object: any): VoteSetBits;
    toJSON(message: VoteSetBits): unknown;
    fromPartial<I extends {
        height?: string | undefined;
        round?: number | undefined;
        type?: SignedMsgType | undefined;
        blockId?: {
            hash?: Uint8Array | undefined;
            partSetHeader?: {
                total?: number | undefined;
                hash?: Uint8Array | undefined;
            } | undefined;
        } | undefined;
        votes?: {
            bits?: string | undefined;
            elems?: string[] | undefined;
        } | undefined;
    } & {
        height?: string | undefined;
        round?: number | undefined;
        type?: SignedMsgType | undefined;
        blockId?: ({
            hash?: Uint8Array | undefined;
            partSetHeader?: {
                total?: number | undefined;
                hash?: Uint8Array | undefined;
            } | undefined;
        } & {
            hash?: Uint8Array | undefined;
            partSetHeader?: ({
                total?: number | undefined;
                hash?: Uint8Array | undefined;
            } & {
                total?: number | undefined;
                hash?: Uint8Array | undefined;
            } & Record<Exclude<keyof I["blockId"]["partSetHeader"], keyof PartSetHeader>, never>) | undefined;
        } & Record<Exclude<keyof I["blockId"], keyof BlockID>, never>) | undefined;
        votes?: ({
            bits?: string | undefined;
            elems?: string[] | undefined;
        } & {
            bits?: string | undefined;
            elems?: (string[] & string[] & Record<Exclude<keyof I["votes"]["elems"], keyof string[]>, never>) | undefined;
        } & Record<Exclude<keyof I["votes"], keyof BitArray>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof VoteSetBits>, never>>(object: I): VoteSetBits;
};
export declare const Message: {
    encode(message: Message, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Message;
    fromJSON(object: any): Message;
    toJSON(message: Message): unknown;
    fromPartial<I extends {
        newRoundStep?: {
            height?: string | undefined;
            round?: number | undefined;
            step?: number | undefined;
            secondsSinceStartTime?: string | undefined;
            lastCommitRound?: number | undefined;
        } | undefined;
        newValidBlock?: {
            height?: string | undefined;
            round?: number | undefined;
            blockPartSetHeader?: {
                total?: number | undefined;
                hash?: Uint8Array | undefined;
            } | undefined;
            blockParts?: {
                bits?: string | undefined;
                elems?: string[] | undefined;
            } | undefined;
            isCommit?: boolean | undefined;
        } | undefined;
        proposal?: {
            proposal?: {
                type?: SignedMsgType | undefined;
                height?: string | undefined;
                round?: number | undefined;
                polRound?: number | undefined;
                blockId?: {
                    hash?: Uint8Array | undefined;
                    partSetHeader?: {
                        total?: number | undefined;
                        hash?: Uint8Array | undefined;
                    } | undefined;
                } | undefined;
                timestamp?: {
                    seconds?: string | undefined;
                    nanos?: number | undefined;
                } | undefined;
                signature?: Uint8Array | undefined;
            } | undefined;
        } | undefined;
        proposalPol?: {
            height?: string | undefined;
            proposalPolRound?: number | undefined;
            proposalPol?: {
                bits?: string | undefined;
                elems?: string[] | undefined;
            } | undefined;
        } | undefined;
        blockPart?: {
            height?: string | undefined;
            round?: number | undefined;
            part?: {
                index?: number | undefined;
                bytes?: Uint8Array | undefined;
                proof?: {
                    total?: string | undefined;
                    index?: string | undefined;
                    leafHash?: Uint8Array | undefined;
                    aunts?: Uint8Array[] | undefined;
                } | undefined;
            } | undefined;
        } | undefined;
        vote?: {
            vote?: {
                type?: SignedMsgType | undefined;
                height?: string | undefined;
                round?: number | undefined;
                blockId?: {
                    hash?: Uint8Array | undefined;
                    partSetHeader?: {
                        total?: number | undefined;
                        hash?: Uint8Array | undefined;
                    } | undefined;
                } | undefined;
                timestamp?: {
                    seconds?: string | undefined;
                    nanos?: number | undefined;
                } | undefined;
                validatorAddress?: Uint8Array | undefined;
                validatorIndex?: number | undefined;
                signature?: Uint8Array | undefined;
            } | undefined;
        } | undefined;
        hasVote?: {
            height?: string | undefined;
            round?: number | undefined;
            type?: SignedMsgType | undefined;
            index?: number | undefined;
        } | undefined;
        voteSetMaj23?: {
            height?: string | undefined;
            round?: number | undefined;
            type?: SignedMsgType | undefined;
            blockId?: {
                hash?: Uint8Array | undefined;
                partSetHeader?: {
                    total?: number | undefined;
                    hash?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
        } | undefined;
        voteSetBits?: {
            height?: string | undefined;
            round?: number | undefined;
            type?: SignedMsgType | undefined;
            blockId?: {
                hash?: Uint8Array | undefined;
                partSetHeader?: {
                    total?: number | undefined;
                    hash?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
            votes?: {
                bits?: string | undefined;
                elems?: string[] | undefined;
            } | undefined;
        } | undefined;
    } & {
        newRoundStep?: ({
            height?: string | undefined;
            round?: number | undefined;
            step?: number | undefined;
            secondsSinceStartTime?: string | undefined;
            lastCommitRound?: number | undefined;
        } & {
            height?: string | undefined;
            round?: number | undefined;
            step?: number | undefined;
            secondsSinceStartTime?: string | undefined;
            lastCommitRound?: number | undefined;
        } & Record<Exclude<keyof I["newRoundStep"], keyof NewRoundStep>, never>) | undefined;
        newValidBlock?: ({
            height?: string | undefined;
            round?: number | undefined;
            blockPartSetHeader?: {
                total?: number | undefined;
                hash?: Uint8Array | undefined;
            } | undefined;
            blockParts?: {
                bits?: string | undefined;
                elems?: string[] | undefined;
            } | undefined;
            isCommit?: boolean | undefined;
        } & {
            height?: string | undefined;
            round?: number | undefined;
            blockPartSetHeader?: ({
                total?: number | undefined;
                hash?: Uint8Array | undefined;
            } & {
                total?: number | undefined;
                hash?: Uint8Array | undefined;
            } & Record<Exclude<keyof I["newValidBlock"]["blockPartSetHeader"], keyof PartSetHeader>, never>) | undefined;
            blockParts?: ({
                bits?: string | undefined;
                elems?: string[] | undefined;
            } & {
                bits?: string | undefined;
                elems?: (string[] & string[] & Record<Exclude<keyof I["newValidBlock"]["blockParts"]["elems"], keyof string[]>, never>) | undefined;
            } & Record<Exclude<keyof I["newValidBlock"]["blockParts"], keyof BitArray>, never>) | undefined;
            isCommit?: boolean | undefined;
        } & Record<Exclude<keyof I["newValidBlock"], keyof NewValidBlock>, never>) | undefined;
        proposal?: ({
            proposal?: {
                type?: SignedMsgType | undefined;
                height?: string | undefined;
                round?: number | undefined;
                polRound?: number | undefined;
                blockId?: {
                    hash?: Uint8Array | undefined;
                    partSetHeader?: {
                        total?: number | undefined;
                        hash?: Uint8Array | undefined;
                    } | undefined;
                } | undefined;
                timestamp?: {
                    seconds?: string | undefined;
                    nanos?: number | undefined;
                } | undefined;
                signature?: Uint8Array | undefined;
            } | undefined;
        } & {
            proposal?: ({
                type?: SignedMsgType | undefined;
                height?: string | undefined;
                round?: number | undefined;
                polRound?: number | undefined;
                blockId?: {
                    hash?: Uint8Array | undefined;
                    partSetHeader?: {
                        total?: number | undefined;
                        hash?: Uint8Array | undefined;
                    } | undefined;
                } | undefined;
                timestamp?: {
                    seconds?: string | undefined;
                    nanos?: number | undefined;
                } | undefined;
                signature?: Uint8Array | undefined;
            } & {
                type?: SignedMsgType | undefined;
                height?: string | undefined;
                round?: number | undefined;
                polRound?: number | undefined;
                blockId?: ({
                    hash?: Uint8Array | undefined;
                    partSetHeader?: {
                        total?: number | undefined;
                        hash?: Uint8Array | undefined;
                    } | undefined;
                } & {
                    hash?: Uint8Array | undefined;
                    partSetHeader?: ({
                        total?: number | undefined;
                        hash?: Uint8Array | undefined;
                    } & {
                        total?: number | undefined;
                        hash?: Uint8Array | undefined;
                    } & Record<Exclude<keyof I["proposal"]["proposal"]["blockId"]["partSetHeader"], keyof PartSetHeader>, never>) | undefined;
                } & Record<Exclude<keyof I["proposal"]["proposal"]["blockId"], keyof BlockID>, never>) | undefined;
                timestamp?: ({
                    seconds?: string | undefined;
                    nanos?: number | undefined;
                } & {
                    seconds?: string | undefined;
                    nanos?: number | undefined;
                } & Record<Exclude<keyof I["proposal"]["proposal"]["timestamp"], keyof import("../../google/protobuf/timestamp").Timestamp>, never>) | undefined;
                signature?: Uint8Array | undefined;
            } & Record<Exclude<keyof I["proposal"]["proposal"], keyof Proposal1>, never>) | undefined;
        } & Record<Exclude<keyof I["proposal"], "proposal">, never>) | undefined;
        proposalPol?: ({
            height?: string | undefined;
            proposalPolRound?: number | undefined;
            proposalPol?: {
                bits?: string | undefined;
                elems?: string[] | undefined;
            } | undefined;
        } & {
            height?: string | undefined;
            proposalPolRound?: number | undefined;
            proposalPol?: ({
                bits?: string | undefined;
                elems?: string[] | undefined;
            } & {
                bits?: string | undefined;
                elems?: (string[] & string[] & Record<Exclude<keyof I["proposalPol"]["proposalPol"]["elems"], keyof string[]>, never>) | undefined;
            } & Record<Exclude<keyof I["proposalPol"]["proposalPol"], keyof BitArray>, never>) | undefined;
        } & Record<Exclude<keyof I["proposalPol"], keyof ProposalPOL>, never>) | undefined;
        blockPart?: ({
            height?: string | undefined;
            round?: number | undefined;
            part?: {
                index?: number | undefined;
                bytes?: Uint8Array | undefined;
                proof?: {
                    total?: string | undefined;
                    index?: string | undefined;
                    leafHash?: Uint8Array | undefined;
                    aunts?: Uint8Array[] | undefined;
                } | undefined;
            } | undefined;
        } & {
            height?: string | undefined;
            round?: number | undefined;
            part?: ({
                index?: number | undefined;
                bytes?: Uint8Array | undefined;
                proof?: {
                    total?: string | undefined;
                    index?: string | undefined;
                    leafHash?: Uint8Array | undefined;
                    aunts?: Uint8Array[] | undefined;
                } | undefined;
            } & {
                index?: number | undefined;
                bytes?: Uint8Array | undefined;
                proof?: ({
                    total?: string | undefined;
                    index?: string | undefined;
                    leafHash?: Uint8Array | undefined;
                    aunts?: Uint8Array[] | undefined;
                } & {
                    total?: string | undefined;
                    index?: string | undefined;
                    leafHash?: Uint8Array | undefined;
                    aunts?: (Uint8Array[] & Uint8Array[] & Record<Exclude<keyof I["blockPart"]["part"]["proof"]["aunts"], keyof Uint8Array[]>, never>) | undefined;
                } & Record<Exclude<keyof I["blockPart"]["part"]["proof"], keyof import("../crypto/proof").Proof>, never>) | undefined;
            } & Record<Exclude<keyof I["blockPart"]["part"], keyof Part>, never>) | undefined;
        } & Record<Exclude<keyof I["blockPart"], keyof BlockPart>, never>) | undefined;
        vote?: ({
            vote?: {
                type?: SignedMsgType | undefined;
                height?: string | undefined;
                round?: number | undefined;
                blockId?: {
                    hash?: Uint8Array | undefined;
                    partSetHeader?: {
                        total?: number | undefined;
                        hash?: Uint8Array | undefined;
                    } | undefined;
                } | undefined;
                timestamp?: {
                    seconds?: string | undefined;
                    nanos?: number | undefined;
                } | undefined;
                validatorAddress?: Uint8Array | undefined;
                validatorIndex?: number | undefined;
                signature?: Uint8Array | undefined;
            } | undefined;
        } & {
            vote?: ({
                type?: SignedMsgType | undefined;
                height?: string | undefined;
                round?: number | undefined;
                blockId?: {
                    hash?: Uint8Array | undefined;
                    partSetHeader?: {
                        total?: number | undefined;
                        hash?: Uint8Array | undefined;
                    } | undefined;
                } | undefined;
                timestamp?: {
                    seconds?: string | undefined;
                    nanos?: number | undefined;
                } | undefined;
                validatorAddress?: Uint8Array | undefined;
                validatorIndex?: number | undefined;
                signature?: Uint8Array | undefined;
            } & {
                type?: SignedMsgType | undefined;
                height?: string | undefined;
                round?: number | undefined;
                blockId?: ({
                    hash?: Uint8Array | undefined;
                    partSetHeader?: {
                        total?: number | undefined;
                        hash?: Uint8Array | undefined;
                    } | undefined;
                } & {
                    hash?: Uint8Array | undefined;
                    partSetHeader?: ({
                        total?: number | undefined;
                        hash?: Uint8Array | undefined;
                    } & {
                        total?: number | undefined;
                        hash?: Uint8Array | undefined;
                    } & Record<Exclude<keyof I["vote"]["vote"]["blockId"]["partSetHeader"], keyof PartSetHeader>, never>) | undefined;
                } & Record<Exclude<keyof I["vote"]["vote"]["blockId"], keyof BlockID>, never>) | undefined;
                timestamp?: ({
                    seconds?: string | undefined;
                    nanos?: number | undefined;
                } & {
                    seconds?: string | undefined;
                    nanos?: number | undefined;
                } & Record<Exclude<keyof I["vote"]["vote"]["timestamp"], keyof import("../../google/protobuf/timestamp").Timestamp>, never>) | undefined;
                validatorAddress?: Uint8Array | undefined;
                validatorIndex?: number | undefined;
                signature?: Uint8Array | undefined;
            } & Record<Exclude<keyof I["vote"]["vote"], keyof Vote2>, never>) | undefined;
        } & Record<Exclude<keyof I["vote"], "vote">, never>) | undefined;
        hasVote?: ({
            height?: string | undefined;
            round?: number | undefined;
            type?: SignedMsgType | undefined;
            index?: number | undefined;
        } & {
            height?: string | undefined;
            round?: number | undefined;
            type?: SignedMsgType | undefined;
            index?: number | undefined;
        } & Record<Exclude<keyof I["hasVote"], keyof HasVote>, never>) | undefined;
        voteSetMaj23?: ({
            height?: string | undefined;
            round?: number | undefined;
            type?: SignedMsgType | undefined;
            blockId?: {
                hash?: Uint8Array | undefined;
                partSetHeader?: {
                    total?: number | undefined;
                    hash?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
        } & {
            height?: string | undefined;
            round?: number | undefined;
            type?: SignedMsgType | undefined;
            blockId?: ({
                hash?: Uint8Array | undefined;
                partSetHeader?: {
                    total?: number | undefined;
                    hash?: Uint8Array | undefined;
                } | undefined;
            } & {
                hash?: Uint8Array | undefined;
                partSetHeader?: ({
                    total?: number | undefined;
                    hash?: Uint8Array | undefined;
                } & {
                    total?: number | undefined;
                    hash?: Uint8Array | undefined;
                } & Record<Exclude<keyof I["voteSetMaj23"]["blockId"]["partSetHeader"], keyof PartSetHeader>, never>) | undefined;
            } & Record<Exclude<keyof I["voteSetMaj23"]["blockId"], keyof BlockID>, never>) | undefined;
        } & Record<Exclude<keyof I["voteSetMaj23"], keyof VoteSetMaj23>, never>) | undefined;
        voteSetBits?: ({
            height?: string | undefined;
            round?: number | undefined;
            type?: SignedMsgType | undefined;
            blockId?: {
                hash?: Uint8Array | undefined;
                partSetHeader?: {
                    total?: number | undefined;
                    hash?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
            votes?: {
                bits?: string | undefined;
                elems?: string[] | undefined;
            } | undefined;
        } & {
            height?: string | undefined;
            round?: number | undefined;
            type?: SignedMsgType | undefined;
            blockId?: ({
                hash?: Uint8Array | undefined;
                partSetHeader?: {
                    total?: number | undefined;
                    hash?: Uint8Array | undefined;
                } | undefined;
            } & {
                hash?: Uint8Array | undefined;
                partSetHeader?: ({
                    total?: number | undefined;
                    hash?: Uint8Array | undefined;
                } & {
                    total?: number | undefined;
                    hash?: Uint8Array | undefined;
                } & Record<Exclude<keyof I["voteSetBits"]["blockId"]["partSetHeader"], keyof PartSetHeader>, never>) | undefined;
            } & Record<Exclude<keyof I["voteSetBits"]["blockId"], keyof BlockID>, never>) | undefined;
            votes?: ({
                bits?: string | undefined;
                elems?: string[] | undefined;
            } & {
                bits?: string | undefined;
                elems?: (string[] & string[] & Record<Exclude<keyof I["voteSetBits"]["votes"]["elems"], keyof string[]>, never>) | undefined;
            } & Record<Exclude<keyof I["voteSetBits"]["votes"], keyof BitArray>, never>) | undefined;
        } & Record<Exclude<keyof I["voteSetBits"], keyof VoteSetBits>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof Message>, never>>(object: I): Message;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
//# sourceMappingURL=types.d.ts.map