/**
 * Rule function type
 * non empty return value indicates error message
 */
export declare type Rule<T> = (value: T, context?: string) => string;
/** Scheme type */
export declare type Scheme<T> = (T extends object ? {
    [P in keyof T]-?: Scheme<T[P]>;
} : never) | Rule<T>;
/**
 * convert the given Scheme into a Rule that allows undefined value
 * @param scheme the scheme
 */
export declare function optional<T>(scheme: Scheme<T>): Rule<T>;
/**
 * convert the given Scheme into a Rule that allows null value
 * @param scheme the scheme
 */
export declare function nullable<T>(scheme: Scheme<T>): Rule<T>;
/** Validator class */
export declare class Validator<T> {
    readonly scheme: Scheme<T>;
    constructor(scheme: Scheme<T>);
    test(value: T, context?: string): T;
}
/** Error class describes validation error */
export declare class ValidationError extends Error {
    readonly rawMessage: string;
    readonly context: string;
    constructor(rawMessage: string, context: string);
}
/**
 * direct function to validate value without construct Validator object
 * @param value value to be validated
 * @param scheme scheme
 * @param context context string appears in error object
 */
export declare function validate<T>(value: T, scheme: Scheme<T>, context?: string): T;
