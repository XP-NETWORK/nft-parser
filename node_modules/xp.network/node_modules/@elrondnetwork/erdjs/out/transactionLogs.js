"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionEventTopic = exports.TransactionEvent = exports.TransactionLogs = void 0;
const address_1 = require("./address");
const errors_1 = require("./errors");
class TransactionLogs {
    constructor(address, events) {
        this.address = address;
        this.events = events;
    }
    static empty() {
        return new TransactionLogs(new address_1.Address(), []);
    }
    static fromHttpResponse(logs) {
        let address = new address_1.Address(logs.address);
        let events = (logs.events || []).map((event) => TransactionEvent.fromHttpResponse(event));
        return new TransactionLogs(address, events);
    }
    findEventByIdentifier(identifier) {
        let event = this.events.filter(event => event.identifier == identifier)[0];
        if (event) {
            return event;
        }
        throw new errors_1.ErrTransactionEventNotFound(identifier);
    }
}
exports.TransactionLogs = TransactionLogs;
class TransactionEvent {
    constructor(address, identifier, topics) {
        this.address = address;
        this.identifier = identifier;
        this.topics = topics;
    }
    static fromHttpResponse(responsePart) {
        let topics = (responsePart.topics || []).map(topic => new TransactionEventTopic(topic));
        let address = new address_1.Address(responsePart.address);
        let identifier = responsePart.identifier || "";
        let event = new TransactionEvent(address, identifier, topics);
        return event;
    }
}
exports.TransactionEvent = TransactionEvent;
class TransactionEventTopic {
    constructor(topic) {
        this.raw = Buffer.from(topic || "", "base64");
    }
    toString() {
        return this.raw.toString("utf8");
    }
    valueOf() {
        return this.raw;
    }
}
exports.TransactionEventTopic = TransactionEventTopic;
//# sourceMappingURL=transactionLogs.js.map