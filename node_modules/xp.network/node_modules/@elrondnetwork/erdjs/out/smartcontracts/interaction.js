"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Interaction = void 0;
const balance_1 = require("../balance");
const networkParams_1 = require("../networkParams");
const query_1 = require("./query");
const function_1 = require("./function");
const address_1 = require("../address");
const typesystem_1 = require("./typesystem");
const nonce_1 = require("../nonce");
const networkConfig_1 = require("../networkConfig");
const constants_1 = require("../constants");
/**
 * Interactions can be seen as mutable transaction & query builders.
 *
 * Aside from building transactions and queries, the interactors are also responsible for interpreting
 * the execution outcome for the objects they've built.
 */
class Interaction {
    constructor(contract, executingFunction, interpretingFunction, args, receiver) {
        this.nonce = new nonce_1.Nonce(0);
        this.value = balance_1.Balance.Zero();
        this.gasLimit = networkParams_1.GasLimit.min();
        this.isWithSingleESDTTransfer = false;
        this.isWithSingleESDTNFTTransfer = false;
        this.isWithMultiESDTNFTTransfer = false;
        this.tokenTransfersSender = new address_1.Address();
        this.contract = contract;
        this.executingFunction = executingFunction;
        this.interpretingFunction = interpretingFunction;
        this.args = args;
        this.receiver = receiver;
        this.tokenTransfers = new TokenTransfersWithinInteraction([], this);
    }
    getContract() {
        return this.contract;
    }
    getInterpretingFunction() {
        return this.interpretingFunction;
    }
    getExecutingFunction() {
        return this.executingFunction;
    }
    getArguments() {
        return this.args;
    }
    getValue() {
        return this.value;
    }
    getTokenTransfers() {
        return this.tokenTransfers.getTransfers();
    }
    getGasLimit() {
        return this.gasLimit;
    }
    buildTransaction() {
        let receiver = this.receiver;
        let func = this.executingFunction;
        let args = this.args;
        if (this.isWithSingleESDTTransfer) {
            func = new function_1.ContractFunction(constants_1.ESDT_TRANSFER_FUNCTION_NAME);
            args = this.tokenTransfers.buildArgsForSingleESDTTransfer();
        }
        else if (this.isWithSingleESDTNFTTransfer) {
            // For NFT, SFT and MetaESDT, transaction.sender == transaction.receiver.
            receiver = this.tokenTransfersSender;
            func = new function_1.ContractFunction(constants_1.ESDTNFT_TRANSFER_FUNCTION_NAME);
            args = this.tokenTransfers.buildArgsForSingleESDTNFTTransfer();
        }
        else if (this.isWithMultiESDTNFTTransfer) {
            // For NFT, SFT and MetaESDT, transaction.sender == transaction.receiver.
            receiver = this.tokenTransfersSender;
            func = new function_1.ContractFunction(constants_1.MULTI_ESDTNFT_TRANSFER_FUNCTION_NAME);
            args = this.tokenTransfers.buildArgsForMultiESDTNFTTransfer();
        }
        // TODO: create as "deploy" transaction if the function is "init" (or find a better pattern for deployments).
        let transaction = this.contract.call({
            func: func,
            // GasLimit will be set using "withGasLimit()".
            gasLimit: this.gasLimit,
            args: args,
            // Value will be set using "withValue()".
            value: this.value,
            receiver: receiver,
        });
        transaction.setNonce(this.nonce);
        return transaction;
    }
    buildQuery() {
        return new query_1.Query({
            address: this.contract.getAddress(),
            func: this.executingFunction,
            args: this.args,
            // Value will be set using "withValue()".
            value: this.value,
            // Caller will be set by the InteractionRunner.
            caller: new address_1.Address()
        });
    }
    /**
     * Interprets the results of a previously broadcasted (and fully executed) smart contract transaction.
     * The outcome is structured such that it allows quick access to each level of detail.
     */
    interpretExecutionResults(transactionOnNetwork) {
        return interpretExecutionResults(this.getEndpoint(), transactionOnNetwork);
    }
    /**
     * Interprets the raw outcome of a Smart Contract query.
     * The outcome is structured such that it allows quick access to each level of detail.
     */
    interpretQueryResponse(queryResponse) {
        let endpoint = this.getEndpoint();
        queryResponse.setEndpointDefinition(endpoint);
        let values = queryResponse.outputTyped();
        let returnCode = queryResponse.returnCode;
        return {
            queryResponse: queryResponse,
            values: values,
            firstValue: values[0],
            returnCode: returnCode
        };
    }
    withValue(value) {
        this.value = value;
        return this;
    }
    withSingleESDTTransfer(transfer) {
        this.isWithSingleESDTTransfer = true;
        this.tokenTransfers = new TokenTransfersWithinInteraction([transfer], this);
        return this;
    }
    withSingleESDTNFTTransfer(transfer, sender) {
        this.isWithSingleESDTNFTTransfer = true;
        this.tokenTransfers = new TokenTransfersWithinInteraction([transfer], this);
        this.tokenTransfersSender = sender;
        return this;
    }
    withMultiESDTNFTTransfer(transfers, sender) {
        this.isWithMultiESDTNFTTransfer = true;
        this.tokenTransfers = new TokenTransfersWithinInteraction(transfers, this);
        this.tokenTransfersSender = sender;
        return this;
    }
    withGasLimit(gasLimit) {
        this.gasLimit = gasLimit;
        return this;
    }
    withGasLimitComponents(args) {
        let minGasLimit = args.minGasLimit || networkConfig_1.NetworkConfig.getDefault().MinGasLimit.valueOf();
        let gasPerDataByte = args.gasPerDataByte || networkConfig_1.NetworkConfig.getDefault().GasPerDataByte;
        let transaction = this.buildTransaction();
        let dataLength = transaction.getData().length();
        let movementComponent = new networkParams_1.GasLimit(minGasLimit + gasPerDataByte * dataLength);
        let executionComponent = new networkParams_1.GasLimit(args.estimatedExecutionComponent);
        let gasLimit = movementComponent.add(executionComponent);
        return this.withGasLimit(gasLimit);
    }
    withNonce(nonce) {
        this.nonce = nonce;
        return this;
    }
    getEndpoint() {
        return this.getContract().getAbi().getEndpoint(this.getInterpretingFunction());
    }
}
exports.Interaction = Interaction;
function interpretExecutionResults(endpoint, transactionOnNetwork) {
    let smartContractResults = transactionOnNetwork.getSmartContractResults();
    let immediateResult = smartContractResults.getImmediate();
    let resultingCalls = smartContractResults.getResultingCalls();
    immediateResult.setEndpointDefinition(endpoint);
    let values = immediateResult.outputTyped();
    let returnCode = immediateResult.getReturnCode();
    return {
        transactionOnNetwork: transactionOnNetwork,
        smartContractResults: smartContractResults,
        immediateResult,
        resultingCalls,
        values,
        firstValue: values[0],
        returnCode: returnCode
    };
}
class TokenTransfersWithinInteraction {
    constructor(transfers, interaction) {
        this.transfers = transfers;
        this.interaction = interaction;
    }
    getTransfers() {
        return this.transfers;
    }
    buildArgsForSingleESDTTransfer() {
        let singleTransfer = this.transfers[0];
        return [
            this.getTypedTokenIdentifier(singleTransfer),
            this.getTypedTokenQuantity(singleTransfer),
            this.getTypedInteractionFunction(),
            ...this.getInteractionArguments()
        ];
    }
    buildArgsForSingleESDTNFTTransfer() {
        let singleTransfer = this.transfers[0];
        return [
            this.getTypedTokenIdentifier(singleTransfer),
            this.getTypedTokenNonce(singleTransfer),
            this.getTypedTokenQuantity(singleTransfer),
            this.getTypedTokensReceiver(),
            this.getTypedInteractionFunction(),
            ...this.getInteractionArguments()
        ];
    }
    buildArgsForMultiESDTNFTTransfer() {
        let result = [];
        result.push(this.getTypedTokensReceiver());
        result.push(this.getTypedNumberOfTransfers());
        for (const transfer of this.transfers) {
            result.push(this.getTypedTokenIdentifier(transfer));
            result.push(this.getTypedTokenNonce(transfer));
            result.push(this.getTypedTokenQuantity(transfer));
        }
        result.push(this.getTypedInteractionFunction());
        result.push(...this.getInteractionArguments());
        return result;
    }
    getTypedNumberOfTransfers() {
        return new typesystem_1.U8Value(this.transfers.length);
    }
    getTypedTokenIdentifier(transfer) {
        // Important: for NFTs, this has to be the "collection" name, actually.
        // We will reconsider adding the field "collection" on "Token" upon merging "ApiProvider" and "ProxyProvider".
        return typesystem_1.BytesValue.fromUTF8(transfer.token.identifier);
    }
    getTypedTokenNonce(transfer) {
        // The token nonce (creation nonce)
        return new typesystem_1.U64Value(transfer.getNonce());
    }
    getTypedTokenQuantity(transfer) {
        // For NFTs, this will be 1.
        return new typesystem_1.BigUIntValue(transfer.valueOf());
    }
    getTypedTokensReceiver() {
        // The actual receiver of the token(s): the contract
        return new typesystem_1.AddressValue(this.interaction.getContract().getAddress());
    }
    getTypedInteractionFunction() {
        return typesystem_1.BytesValue.fromUTF8(this.interaction.getExecutingFunction().valueOf());
    }
    getInteractionArguments() {
        return this.interaction.getArguments();
    }
}
//# sourceMappingURL=interaction.js.map