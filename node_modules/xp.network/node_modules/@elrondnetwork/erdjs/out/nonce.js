"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Nonce = void 0;
const errors = __importStar(require("./errors"));
const utils_codec_1 = require("./utils.codec");
/**
 * The nonce, as an immutable object.
 */
class Nonce {
    /**
     * Creates a Nonce object given a value.
     */
    constructor(value) {
        value = Number(value);
        if (Number.isNaN(value) || value < 0) {
            throw new errors.ErrNonceInvalid(value);
        }
        this.value = value;
    }
    /**
     * Creates a new Nonce object by incrementing the current one.
     */
    increment() {
        return new Nonce(this.value + 1);
    }
    hex() {
        return utils_codec_1.numberToPaddedHex(this.value);
    }
    valueOf() {
        return this.value;
    }
    equals(other) {
        if (!other) {
            return false;
        }
        return this.value === other.value;
    }
}
exports.Nonce = Nonce;
//# sourceMappingURL=nonce.js.map