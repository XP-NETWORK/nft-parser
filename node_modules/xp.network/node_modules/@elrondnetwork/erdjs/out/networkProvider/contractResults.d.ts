/// <reference types="node" />
import { Address } from "../address";
import { Balance } from "../balance";
import { Hash } from "../hash";
import { IContractQueryResponse, IContractResultItem, IContractResults } from "./interface";
import { GasLimit, GasPrice } from "../networkParams";
import { Nonce } from "../nonce";
import { EndpointDefinition, ReturnCode, TypedValue } from "../smartcontracts";
export declare class ContractResults implements IContractResults {
    readonly items: IContractResultItem[];
    constructor(items: IContractResultItem[]);
    static empty(): ContractResults;
    static fromProxyHttpResponse(results: any[]): ContractResults;
    static fromApiHttpResponse(results: any[]): ContractResults;
}
export declare class ContractResultItem implements IContractResultItem {
    hash: Hash;
    nonce: Nonce;
    value: Balance;
    receiver: Address;
    sender: Address;
    data: string;
    previousHash: Hash;
    originalHash: Hash;
    gasLimit: GasLimit;
    gasPrice: GasPrice;
    callType: number;
    returnMessage: string;
    static fromProxyHttpResponse(response: any): ContractResultItem;
    static fromApiHttpResponse(response: any): ContractResultItem;
    private static fromHttpResponse;
    getOutputUntyped(): Buffer[];
    getOutputTyped(_endpointDefinition: EndpointDefinition): TypedValue[];
}
export declare class ContractQueryResponse implements IContractQueryResponse {
    returnData: string[];
    returnCode: ReturnCode;
    returnMessage: string;
    gasUsed: GasLimit;
    static fromHttpResponse(payload: any): ContractQueryResponse;
    getOutputUntyped(): Buffer[];
    getOutputTyped(endpointDefinition: EndpointDefinition): TypedValue[];
}
