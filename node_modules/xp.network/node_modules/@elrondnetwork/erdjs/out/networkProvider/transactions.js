"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionOnNetwork = void 0;
const address_1 = require("../address");
const balance_1 = require("../balance");
const hash_1 = require("../hash");
const networkParams_1 = require("../networkParams");
const nonce_1 = require("../nonce");
const signature_1 = require("../signature");
const transaction_1 = require("../transaction");
const transactionLogs_1 = require("../transactionLogs");
const transactionPayload_1 = require("../transactionPayload");
const contractResults_1 = require("./contractResults");
class TransactionOnNetwork {
    constructor() {
        this.hash = new transaction_1.TransactionHash("");
        this.nonce = new nonce_1.Nonce(0);
        this.round = 0;
        this.epoch = 0;
        this.value = balance_1.Balance.Zero();
        this.receiver = new address_1.Address();
        this.sender = new address_1.Address();
        this.gasPrice = new networkParams_1.GasPrice(0);
        this.gasLimit = new networkParams_1.GasLimit(0);
        this.data = new transactionPayload_1.TransactionPayload();
        this.signature = signature_1.Signature.empty();
        this.status = transaction_1.TransactionStatus.createUnknown();
        this.timestamp = 0;
        this.blockNonce = new nonce_1.Nonce(0);
        this.hyperblockNonce = new nonce_1.Nonce(0);
        this.hyperblockHash = hash_1.Hash.empty();
        this.logs = transactionLogs_1.TransactionLogs.empty();
        this.contractResults = contractResults_1.ContractResults.empty();
    }
    static fromProxyHttpResponse(txHash, response) {
        let result = TransactionOnNetwork.fromHttpResponse(txHash, response);
        result.contractResults = contractResults_1.ContractResults.fromProxyHttpResponse(response.smartContractResults || []);
        // TODO: uniformize transaction status
        return result;
    }
    static fromApiHttpResponse(txHash, response) {
        let result = TransactionOnNetwork.fromHttpResponse(txHash, response);
        result.contractResults = contractResults_1.ContractResults.fromApiHttpResponse(response.results || []);
        // TODO: uniformize transaction status
        return result;
    }
    static fromHttpResponse(txHash, response) {
        let result = new TransactionOnNetwork();
        result.hash = txHash;
        result.nonce = new nonce_1.Nonce(response.nonce || 0);
        result.round = response.round;
        result.epoch = response.epoch || 0;
        result.value = balance_1.Balance.fromString(response.value);
        result.sender = address_1.Address.fromBech32(response.sender);
        result.receiver = address_1.Address.fromBech32(response.receiver);
        result.gasPrice = new networkParams_1.GasPrice(response.gasPrice);
        result.gasLimit = new networkParams_1.GasLimit(response.gasLimit);
        result.data = transactionPayload_1.TransactionPayload.fromEncoded(response.data);
        result.status = new transaction_1.TransactionStatus(response.status);
        result.timestamp = response.timestamp || 0;
        result.blockNonce = new nonce_1.Nonce(response.blockNonce || 0);
        result.hyperblockNonce = new nonce_1.Nonce(response.hyperblockNonce || 0);
        result.hyperblockHash = new hash_1.Hash(response.hyperblockHash);
        result.logs = transactionLogs_1.TransactionLogs.fromHttpResponse(response.logs || {});
        return result;
    }
    getDateTime() {
        return new Date(this.timestamp * 1000);
    }
}
exports.TransactionOnNetwork = TransactionOnNetwork;
//# sourceMappingURL=transactions.js.map