import { AxiosRequestConfig } from "axios";
import { AccountOnNetwork } from "../account";
import { Address } from "../address";
import { IContractQueryResponse, IDefinitionOfFungibleTokenOnNetwork, IDefinitionOfTokenCollectionOnNetwork, IFungibleTokenOfAccountOnNetwork, INetworkProvider, INonFungibleTokenOfAccountOnNetwork, ITransactionOnNetwork, Pagination } from "./interface";
import { NetworkConfig } from "../networkConfig";
import { NetworkStake } from "../networkStake";
import { NetworkStatus } from "../networkStatus";
import { Nonce } from "../nonce";
import { Query } from "../smartcontracts";
import { Stats } from "../stats";
import { Transaction, TransactionHash, TransactionStatus } from "../transaction";
export declare class ProxyNetworkProvider implements INetworkProvider {
    private url;
    private config;
    constructor(url: string, config?: AxiosRequestConfig);
    getNetworkConfig(): Promise<NetworkConfig>;
    getNetworkStatus(): Promise<NetworkStatus>;
    getNetworkStakeStatistics(): Promise<NetworkStake>;
    getNetworkGeneralStatistics(): Promise<Stats>;
    getAccount(address: Address): Promise<AccountOnNetwork>;
    getFungibleTokensOfAccount(address: Address, _pagination?: Pagination): Promise<IFungibleTokenOfAccountOnNetwork[]>;
    getNonFungibleTokensOfAccount(address: Address, _pagination?: Pagination): Promise<INonFungibleTokenOfAccountOnNetwork[]>;
    getFungibleTokenOfAccount(address: Address, tokenIdentifier: string): Promise<IFungibleTokenOfAccountOnNetwork>;
    getNonFungibleTokenOfAccount(address: Address, collection: string, nonce: Nonce): Promise<INonFungibleTokenOfAccountOnNetwork>;
    getTransaction(txHash: TransactionHash): Promise<ITransactionOnNetwork>;
    getTransactionStatus(txHash: TransactionHash): Promise<TransactionStatus>;
    sendTransaction(tx: Transaction): Promise<TransactionHash>;
    simulateTransaction(tx: Transaction): Promise<any>;
    queryContract(query: Query): Promise<IContractQueryResponse>;
    getDefinitionOfFungibleToken(_tokenIdentifier: string): Promise<IDefinitionOfFungibleTokenOnNetwork>;
    getDefinitionOfTokenCollection(_collection: string): Promise<IDefinitionOfTokenCollectionOnNetwork>;
    getNonFungibleToken(_collection: string, _nonce: Nonce): Promise<INonFungibleTokenOfAccountOnNetwork>;
    doGetGeneric(resourceUrl: string): Promise<any>;
    doPostGeneric(resourceUrl: string, payload: any): Promise<any>;
    private doGet;
    private doPost;
    private buildUrlWithQueryParameters;
    private handleApiError;
}
