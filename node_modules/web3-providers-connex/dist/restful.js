/// <reference types="@vechain/connex-types">
'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Restful = void 0;
const utils_1 = require("./utils");
class Restful {
    constructor(net, genesisId) {
        this.sendRawTransaction = (raw) => __awaiter(this, void 0, void 0, function* () {
            try {
                const resp = yield this._net.http("POST", "transactions", {
                    body: { raw: raw },
                    validateResponseHeader: this._headerValidator
                });
                return resp.id;
            }
            catch (err) {
                return Promise.reject(err);
            }
        });
        this.getCode = (addr, revision) => __awaiter(this, void 0, void 0, function* () {
            try {
                const httpParams = {
                    validateResponseHeader: this._headerValidator
                };
                if (revision) {
                    httpParams.query = { "revision": revision };
                }
                const code = yield this._net.http("GET", `accounts/${addr}/code`, httpParams);
                return code.code;
            }
            catch (err) {
                return Promise.reject(err);
            }
        });
        this.getBalance = (addr, revision) => __awaiter(this, void 0, void 0, function* () {
            try {
                const httpParams = {
                    validateResponseHeader: this._headerValidator
                };
                if (revision) {
                    httpParams.query = { "revision": revision };
                }
                const acc = yield this._net.http("GET", `accounts/${addr}`, httpParams);
                return acc.balance;
            }
            catch (err) {
                return Promise.reject(err);
            }
        });
        this.getStorageAt = (addr, key, revision) => __awaiter(this, void 0, void 0, function* () {
            try {
                const httpParams = {
                    validateResponseHeader: this._headerValidator
                };
                if (revision) {
                    httpParams.query = { "revision": revision };
                }
                const storage = yield this._net.http("GET", `accounts/${addr}/storage/${key}`, httpParams);
                return storage.value;
            }
            catch (err) {
                return Promise.reject(err);
            }
        });
        this.call = (callObj, revision) => __awaiter(this, void 0, void 0, function* () {
            try {
                const httpParams = {
                    body: callObj,
                    validateResponseHeader: this._headerValidator
                };
                if (revision) {
                    httpParams.query = { "revision": revision };
                }
                const outputs = yield this._net.http("POST", `accounts/*`, httpParams);
                const output = outputs[0];
                if (output.reverted) {
                    const err = {
                        data: (0, utils_1.getErrMsg)(output),
                        message: (output === null || output === void 0 ? void 0 : output.revertReason) || output.vmError
                    };
                    return Promise.reject(err);
                }
                return output.data;
            }
            catch (err) {
                return Promise.reject(err);
            }
        });
        this._net = net;
        this._genesisId = genesisId;
    }
    get _headerValidator() {
        return (headers) => {
            const xgid = headers['x-genesis-id'];
            if (xgid && xgid !== this._genesisId) {
                throw new Error(`responded 'x-genesis-id' not matched`);
            }
        };
    }
}
exports.Restful = Restful;
//# sourceMappingURL=restful.js.map