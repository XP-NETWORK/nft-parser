/// <reference types="@vechain/connex-types" />
import { Wallet } from '@vechain/connex-driver';
import { FilterOpts, Eip1193SubResp } from './types';
import { Web3TxObj } from './types';
import { ConnexProvider } from './provider';
export declare const toEip1193SubResp: (ret: any, id: string) => Eip1193SubResp;
/**
 * Convert the input into either block id or block number compatible with connex.thor.block()
 * @param {hex | 'earliest' | 'latest' } input
 * @returns {string | number | null | undefined} Return null not recognized and undefined if input === 'latest'
 */
export declare function parseBlockNumber(input: string): string | number | undefined | null;
export declare function toBytes32(hex: string): string;
export declare function hexToNumber(hex: string): number;
export declare function toHex(value: number | string): string;
export declare function randAddr(): string;
export declare function getErrMsg(output: Connex.VM.Output): string;
export declare function toFilterCriteria(args: FilterOpts): Connex.Thor.Filter.Criteria<"event">[];
export declare const wait: (ms: number) => Promise<unknown>;
export declare const signTransaction: (ethTx: Web3TxObj, wallet: Wallet, provider: ConnexProvider) => Promise<string>;
export declare function decodeRevertReason(data: string): string;
