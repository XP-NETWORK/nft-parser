export declare function isDecString(val: string): boolean;
export declare function isHexString(val: string): boolean;
export declare function isHexBytes(val: string, n?: number): boolean;
export declare function isUInt(val: number, bit: number): boolean;
export declare function isBigInt(v: number | string): boolean;
export declare class BadParameter extends Error {
    constructor(msg: string);
}
export declare function ensure(b: boolean, msg: string): void;
import * as V from 'validator-ts';
export declare function test<T>(value: T, scheme: V.Scheme<T>, context: string): T;
export declare function bytes(v: any): "" | "expected bytes in hex string";
export declare function bytes8(v: any): "" | "expected bytes8";
export declare function bytes32(v: any): "" | "expected bytes32";
export declare function uint8(v: any): "" | "expected 8-bit unsigned integer";
export declare function uint32(v: any): "" | "expected 32-bit unsigned integer";
export declare function uint64(v: any): "" | "expected 64-bit unsigned integer";
export declare function bool(v: any): "" | "expected boolean";
export declare function bigInt(v: any): "" | "expected unsigned integer in number or string";
export declare function hexString(v: any): "" | "expected integer in hex string";
export declare function address(v: any): "" | "expected address";
export declare function string(v: any): "" | "expected string";
