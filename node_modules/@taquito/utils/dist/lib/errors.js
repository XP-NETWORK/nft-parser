"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvalidOperationHashError = exports.InvalidProtocolHashError = exports.InvalidBlockHashError = exports.InvalidKeyHashError = exports.InvalidAddressError = exports.InvalidContractAddressError = exports.InvalidMessageError = exports.InvalidSignatureError = exports.InvalidPublicKeyError = void 0;
class InvalidPublicKeyError extends Error {
    constructor(message) {
        super(message);
        this.message = message;
        this.name = 'InvalidPublicKeyError';
    }
}
exports.InvalidPublicKeyError = InvalidPublicKeyError;
class InvalidSignatureError extends Error {
    constructor(message) {
        super(message);
        this.message = message;
        this.name = 'InvalidSignatureError';
    }
}
exports.InvalidSignatureError = InvalidSignatureError;
class InvalidMessageError extends Error {
    constructor(message) {
        super(message);
        this.message = message;
        this.name = 'InvalidMessageError';
    }
}
exports.InvalidMessageError = InvalidMessageError;
class InvalidContractAddressError extends Error {
    constructor(message) {
        super(message);
        this.message = message;
        this.name = 'InvalidContractAddressError';
    }
}
exports.InvalidContractAddressError = InvalidContractAddressError;
class InvalidAddressError extends Error {
    constructor(message) {
        super(message);
        this.message = message;
        this.name = 'InvalidAddressError';
    }
}
exports.InvalidAddressError = InvalidAddressError;
class InvalidKeyHashError extends Error {
    constructor(message) {
        super(message);
        this.message = message;
        this.name = 'InvalidKeyHashError';
    }
}
exports.InvalidKeyHashError = InvalidKeyHashError;
class InvalidBlockHashError extends Error {
    constructor(message) {
        super(message);
        this.message = message;
        this.name = 'InvalidBlockHashError';
    }
}
exports.InvalidBlockHashError = InvalidBlockHashError;
class InvalidProtocolHashError extends Error {
    constructor(message) {
        super(message);
        this.message = message;
        this.name = 'InvalidProtocolHashError';
    }
}
exports.InvalidProtocolHashError = InvalidProtocolHashError;
class InvalidOperationHashError extends Error {
    constructor(message) {
        super(message);
        this.message = message;
        this.name = 'InvalidOperationHashError';
    }
}
exports.InvalidOperationHashError = InvalidOperationHashError;
//# sourceMappingURL=errors.js.map