{"version":3,"file":"taquito-tzip16.es6.js","sources":["../src/handlers/http-handler.ts","../src/tzip16-errors.ts","../src/handlers/tezos-storage-handler.ts","../src/handlers/ipfs-handler.ts","../src/metadata-interface.ts","../src/viewKind/michelson-storage-view.ts","../src/viewKind/viewFactory.ts","../src/tzip16-contract-abstraction.ts","../src/composer.ts","../src/tzip16-utils.ts","../src/metadata-provider.ts","../src/tzip16-extension.ts","../src/version.ts"],"sourcesContent":["import { HttpBackend } from \"@taquito/http-utils\";\nimport { ContractAbstraction, ContractProvider, Wallet, Context } from \"@taquito/taquito\";\nimport { Handler, Tzip16Uri } from \"../metadata-provider\";\n\nexport class HttpHandler implements Handler {\n    httpBackend: HttpBackend;\n    constructor() {\n        this.httpBackend = new HttpBackend();\n    }\n    async getMetadata(_contractAbstraction: ContractAbstraction<ContractProvider | Wallet>, { protocol, location }: Tzip16Uri, _context: Context) {\n        return this.httpBackend.createRequest<string>({\n            url: `${protocol}:${decodeURIComponent(location)}`,\n            method: 'GET',\n            mimeType: \"text; charset=utf-8\",\n            json: false\n        })\n    }\n}","export class BigMapMetadataNotFound extends Error {\n  name = 'BigMapMetadataNotFound';\n\n  constructor() {\n    super(\n      'Non-compliance with the TZIP-016 standard. No big map named metadata was found in the contract storage.'\n    );\n  }\n}\n\nexport class MetadataNotFound extends Error {\n  name = 'MetadataNotFound';\n\n  constructor(public info: string) {\n    super(`No metadata was found in the contract storage. ${info}`);\n  }\n}\n\nexport class UriNotFound extends Error {\n  name = 'UriNotFound';\n  constructor() {\n    super('Non-compliance with the TZIP-016 standard. No URI found in the contract storage.');\n  }\n}\n\nexport class InvalidUri extends Error {\n  name = 'InvalidUri';\n\n  constructor(public uri: string) {\n    super(`Non-compliance with the TZIP-016 standard. The URI is invalid: ${uri}.`);\n  }\n}\n\nexport class InvalidMetadata extends Error {\n  name = 'InvalidMetadata';\n\n  constructor(public invalidMetadata: string) {\n    super(\n      `The metadata found at the pointed ressource are not compliant with tzip16 standard: ${invalidMetadata}.`\n    );\n  }\n}\n\nexport class ProtocolNotSupported extends Error {\n  name = 'ProtocolNotSupported';\n\n  constructor(public protocol: string) {\n    super(`The protocol found in the URI is not supported: ${protocol}.`);\n  }\n}\n\nexport class InvalidMetadataType extends Error {\n  name = 'InvalidMetadataType';\n\n  constructor() {\n    super(\n      'The contract does not comply with the tzip16 standard. The type of metadata should be bytes.'\n    );\n  }\n}\n\nexport class UnconfiguredMetadataProviderError extends Error {\n  name = 'UnconfiguredMetadataProviderError';\n\n  constructor() {\n    super(\n      'No metadata provider has been configured. The default one can be configured by calling addExtension(new Tzip16Module()) on your TezosToolkit instance.'\n    );\n  }\n}\n\nexport class ForbiddenInstructionInViewCode extends Error {\n  name = 'ForbiddenInstructionInViewCode';\n\n  constructor(public instruction: string) {\n    super(\n      `Error found in the code of the view. It contains a forbidden instruction: ${instruction}.`\n    );\n  }\n}\n\nexport class NoParameterExpectedError extends Error {\n  name = 'NoParameterExpectedError';\n\n  constructor(public viewName: string, public args: any[]) {\n    super(`${viewName} Received ${args.length} arguments while expecting no parameter or 'Unit'`);\n  }\n}\n\nexport class InvalidViewParameterError extends Error {\n  name = 'InvalidViewParameterError';\n\n  constructor(public viewName: string, public sigs: any[], public args: any[]) {\n    super(\n      `${viewName} Received ${\n        args.length\n      } arguments while expecting one of the following signatures (${JSON.stringify(sigs)})`\n    );\n  }\n}\n","import { Schema } from '@taquito/michelson-encoder';\nimport { Context, ContractAbstraction, ContractProvider, Wallet } from '@taquito/taquito';\nimport { Handler, Tzip16Uri } from '../metadata-provider';\nimport { bytes2Char } from '@taquito/utils';\nimport {\n  InvalidMetadataType,\n  BigMapMetadataNotFound,\n  InvalidUri,\n  MetadataNotFound,\n} from '../tzip16-errors';\n\nconst typeOfValueToFind = {\n  prim: 'big_map',\n  args: [{ prim: 'string' }, { prim: 'bytes' }],\n  annots: ['%metadata'],\n};\n\ntype BigMapId = { int: string };\n\nexport class TezosStorageHandler implements Handler {\n  private readonly TEZOS_STORAGE_REGEX = /^(?:\\/\\/(KT1\\w{33})(?:\\.(.+))?\\/)?([\\w|%]+)$/;\n\n  async getMetadata(\n    contractAbstraction: ContractAbstraction<ContractProvider | Wallet>,\n    { location }: Tzip16Uri,\n    context: Context\n  ) {\n    const parsedTezosStorageUri = this.parseTezosStorageUri(location);\n    if (!parsedTezosStorageUri) {\n      throw new InvalidUri(`tezos-storage:${location}`);\n    }\n    const storage: any = await context.rpc.getNormalizedScript(\n      parsedTezosStorageUri.contractAddress || contractAbstraction.address\n    );\n    const bigMapId = Schema.fromRPCResponse({ script: storage }).FindFirstInTopLevelPair<BigMapId>(\n      storage.storage,\n      typeOfValueToFind\n    );\n\n    if (!bigMapId) {\n      throw new BigMapMetadataNotFound();\n    }\n\n    const bytes = await context.contract.getBigMapKeyByID<string>(\n      bigMapId['int'].toString(),\n      parsedTezosStorageUri.path,\n      new Schema(typeOfValueToFind)\n    );\n\n    if (!bytes) {\n      throw new MetadataNotFound(\n        `No '${parsedTezosStorageUri.path}' key found in the big map %metadata of the contract ${\n          parsedTezosStorageUri.contractAddress || contractAbstraction.address\n        }`\n      );\n    }\n\n    if (!/^[0-9a-fA-F]*$/.test(bytes)) {\n      throw new InvalidMetadataType();\n    }\n    return bytes2Char(bytes);\n  }\n\n  /**\n   * @description Extract the smart contract address, the network and the path pointing to the metadata from the uri\n   * @returns an object which contains the properties allowing to find where the metadata are located or it returns undefined if the uri is not valid\n   * @param tezosStorageURI URI (without the tezos-storage prefix)\n   */\n  private parseTezosStorageUri(tezosStorageURI: string) {\n    const extractor = this.TEZOS_STORAGE_REGEX.exec(tezosStorageURI);\n    if (!extractor) return;\n    return {\n      contractAddress: extractor[1],\n      network: extractor[2],\n      path: decodeURIComponent(extractor[3]),\n    };\n  }\n}\n","import { HttpBackend } from \"@taquito/http-utils\";\nimport { ContractAbstraction, ContractProvider, Wallet, Context } from \"@taquito/taquito\";\nimport { Handler, Tzip16Uri } from \"../metadata-provider\";\n\nexport class IpfsHttpHandler implements Handler {\n    private _ipfsGateway: string;\n    public httpBackend = new HttpBackend();\n\n    constructor(ipfsGatheway?:string){\n        this._ipfsGateway = ipfsGatheway? ipfsGatheway: 'ipfs.io';\n    }\n\n    async getMetadata(_contractAbstraction: ContractAbstraction<ContractProvider | Wallet>, { location }: Tzip16Uri, _context: Context): Promise<string> {\n        return this.httpBackend.createRequest<string>({\n            url: `https://${this._ipfsGateway}/ipfs/${location.substring(2)}/`,\n            method: 'GET',\n            headers: {'Content-Type': 'text/plain'},\n            mimeType: \"text; charset=utf-8\",\n            json: false\n        })\n    }\n}\n","import { MichelsonV1Expression } from '@taquito/rpc';\nexport interface MetadataInterface {\n\tname?: string;\n\tdescription?: string;\n\tversion?: string;\n\tlicense?: { name: string; details?: string };\n\tauthors?: string[];\n\thomepage?: string;\n\tsource?: { tools?: string[]; location?: string };\n\tinterfaces?: string[];\n\terrors?: ErrorsTzip16;\n\tviews?: Views;\n}\n\nexport type ErrorsTzip16 = Array<\n\t| { error: MichelineTzip16Expression; expansion: MichelineTzip16Expression; languages?: string[] }\n\t| { view: string; languages?: string[] }\n>;\n\nexport enum ViewImplementationType {\n\tMICHELSON_STORAGE = 'michelsonStorageView',\n\tREST_API_QUERY = 'restApiQuery'\n}\n\nexport type ViewImplementation =\n\t| { [ViewImplementationType.MICHELSON_STORAGE]: MichelsonStorageViewType }\n\t| { [ViewImplementationType.REST_API_QUERY]: RestApiQueryType };\n\nexport interface ViewDefinition {\n\tname?: string;\n\tdescription?: string;\n\timplementations?: ViewImplementation[];\n\tpure?: boolean;\n}\n\nexport type Views = ViewDefinition[];\n\nexport type MichelsonStorageViewType = {\n\tparameter?: MichelineTzip16Expression;\n\treturnType: MichelineTzip16Expression;\n\tcode: MichelineTzip16Expression;\n\tannotations?: Array<{ name: string; description: string }>;\n\tversion?: string;\n};\n\nexport type RestApiQueryType = {\n\tspecificationUri: string;\n\tbaseUri?: string;\n\tpath: string;\n\tmethod?: 'GET' | 'POST' | 'PUT';\n};\n\nexport type MichelineTzip16Expression =\n\t| MichelsonV1Expression\n\t| MichelineTzip16Expression[]\n\t| { prim: Unistring; args?: MichelineTzip16Expression[]; annots?: string[] };\n\ntype Unistring = string | { invalid_utf8_string: number[] };\n","import { ParameterSchema } from '@taquito/michelson-encoder';\nimport {\n  RpcClientInterface,\n  MichelsonV1Expression,\n  MichelsonV1ExpressionExtended,\n} from '@taquito/rpc';\nimport {\n  ContractAbstraction,\n  ContractProvider,\n  Wallet,\n  ViewSimulationError,\n} from '@taquito/taquito';\nimport {\n  ForbiddenInstructionInViewCode,\n  InvalidViewParameterError,\n  NoParameterExpectedError,\n} from '../tzip16-errors';\nimport { validateAndExtractFailwith } from '@taquito/taquito';\nimport { View } from './interface';\n\nexport class MichelsonStorageView implements View {\n  constructor(\n    private viewName: string,\n    private contract: ContractAbstraction<ContractProvider | Wallet>,\n    private rpc: RpcClientInterface,\n    private returnType: MichelsonV1Expression,\n    private code: MichelsonV1ExpressionExtended[],\n    private viewParameterType?: MichelsonV1ExpressionExtended\n  ) {}\n\n  /**\n   * @description According to the tzip-16 standard, the following instructions must not be used in the code of the view:\n   * 'AMOUNT', 'CREATE_CONTRACT', 'SENDER', 'SET_DELEGATE', 'SOURCE', and 'TRANSFER_TOKENS'\n   * The method throw an error if an illegal instruction is found\n   */\n  private findForbiddenInstructionInViewCode(code: MichelsonV1ExpressionExtended[]) {\n    const illegalInstructions = [\n      'AMOUNT',\n      'CREATE_CONTRACT',\n      'SENDER',\n      'SET_DELEGATE',\n      'SOURCE',\n      'TRANSFER_TOKENS',\n    ];\n\n    for (const forbiddenInstruction of illegalInstructions) {\n      for (const instruction of code) {\n        if (instruction.prim === forbiddenInstruction) {\n          throw new ForbiddenInstructionInViewCode(forbiddenInstruction);\n        }\n        if (instruction.args && instruction.args.length !== 0) {\n          this.findForbiddenInstructionInViewCode(instruction.args as any);\n        }\n      }\n    }\n  }\n\n  /**\n   * @description According to the tzip-16 standard, in the first version of the specification, the instruction SELF should only be used before ADDRESS\n   * The method throws an error is the instruction SELF is present, but not followed by ADDRESS\n   */\n  private illegalUseOfSelfInstruction(code: MichelsonV1ExpressionExtended[]) {\n    for (const instruction of code) {\n      if (instruction.prim === 'SELF') {\n        const index = code.indexOf(instruction);\n        const nextInstruction = code[index + 1] ? code[index + 1].prim : undefined;\n        if (nextInstruction !== 'ADDRESS') {\n          throw new ForbiddenInstructionInViewCode(\n            'the instruction SELF should only be used before ADDRESS'\n          );\n        }\n      }\n      if (instruction.args && instruction.args.length !== 0) {\n        this.illegalUseOfSelfInstruction(instruction.args as any);\n      }\n    }\n  }\n\n  /**\n   * @description Loops through the view's code and replace SELF, BALANCE, NOW, and CHAIN_ID with Michelson expressions that match the current context, if applicable.\n   */\n  private adaptViewCodeToContext(\n    code: MichelsonV1ExpressionExtended[],\n    contractBalance: string,\n    blockTimeStamp: string,\n    chainId: string\n  ) {\n    const instructionsToReplace = {\n      SELF: [\n        { prim: 'PUSH', args: [{ prim: 'address' }, { string: this.contract.address }] },\n        { prim: 'CONTRACT', args: [{ prim: 'unit' }] },\n        { prim: 'IF_NONE', args: [[{ prim: 'UNIT' }, { prim: 'FAILWITH' }], []] },\n      ],\n      BALANCE: [{ prim: 'PUSH', args: [{ prim: 'mutez' }, { int: contractBalance }] }],\n      NOW: [{ prim: 'PUSH', args: [{ prim: 'timestamp' }, { string: blockTimeStamp }] }],\n      CHAIN_ID: [{ prim: 'PUSH', args: [{ prim: 'string' }, { string: chainId }] }],\n    };\n\n    code.forEach((x: any, i: any) => {\n      for (const instruction in instructionsToReplace) {\n        if (x.prim === instruction) {\n          code[i] = Object(instructionsToReplace)[instruction];\n        }\n        if (x.args && x.args.length !== 0) {\n          this.adaptViewCodeToContext(x.args, contractBalance, blockTimeStamp, chainId);\n        }\n      }\n    });\n    return code;\n  }\n\n  private validateArgs = (args: any[], schema: ParameterSchema, viewName: string) => {\n    const sigs = schema.ExtractSignatures();\n\n    if (!sigs.find((x: any[]) => x.length === args.length)) {\n      throw new InvalidViewParameterError(viewName, sigs, args);\n    }\n  };\n\n  private formatArgsAndParameter(argView: any[]) {\n    let args = argView;\n    let viewParameterType = this.viewParameterType;\n    if (!viewParameterType) {\n      viewParameterType = { args: [], prim: 'unit', annots: [] };\n    }\n\n    if (viewParameterType.prim === 'unit') {\n      if (args.length === 0) {\n        args = ['Unit'];\n      }\n      if (args.length !== 0 && args[0] !== 'Unit') {\n        throw new NoParameterExpectedError(this.viewName, argView);\n      }\n    }\n    const parameterViewSchema = new ParameterSchema(viewParameterType);\n    this.validateArgs(args, parameterViewSchema, this.viewName);\n    const arg = parameterViewSchema.Encode(...args);\n    return { arg, viewParameterType };\n  }\n\n  async executeView(...args: any[]) {\n    // validate view code against tzip-16 specifications\n    this.findForbiddenInstructionInViewCode(this.code);\n    this.illegalUseOfSelfInstruction(this.code);\n\n    const { arg, viewParameterType } = this.formatArgsAndParameter(args);\n\n    const storageType: any = this.contract.script.code.find((x: any) => x.prim === 'storage');\n    const storageArgs = storageType.args[0];\n    const storageValue: any = this.contract.script.storage;\n\n    // currentContext\n    const chainId = await this.rpc.getChainId();\n    const contractBalance = (await this.rpc.getBalance(this.contract.address)).toString();\n    const block = await this.rpc.getBlock();\n    const blockTimestamp = block.header.timestamp.toString();\n\n    const code = this.adaptViewCodeToContext(this.code, contractBalance, blockTimestamp, chainId);\n\n    if (!this.viewParameterType) {\n      code.unshift({ prim: 'CDR' });\n    }\n\n    const viewScript = {\n      script: [\n        { prim: 'parameter', args: [{ prim: 'pair', args: [viewParameterType, storageArgs] }] },\n        { prim: 'storage', args: [{ prim: 'option', args: [this.returnType] }] },\n        {\n          prim: 'code',\n          args: [\n            [\n              { prim: 'CAR' },\n              code,\n              { prim: 'SOME' },\n              { prim: 'NIL', args: [{ prim: 'operation' }] },\n              { prim: 'PAIR' },\n            ],\n          ],\n        },\n      ],\n      storage: { prim: 'None' },\n      input: { prim: 'Pair', args: [arg, storageValue] },\n      amount: '0',\n      chain_id: chainId,\n      balance: '0',\n    };\n\n    let result: any;\n    try {\n      result = await this.rpc.runCode(viewScript as any);\n    } catch (error: any) {\n      const failWith = validateAndExtractFailwith(error);\n      throw failWith\n        ? new ViewSimulationError(\n            `The simulation of the Michelson view failed with: ${JSON.stringify(failWith)}`,\n            this.viewName,\n            failWith,\n            error\n          )\n        : error;\n    }\n\n    const viewResultSchema = new ParameterSchema(this.returnType);\n    return viewResultSchema.Execute(result.storage.args[0]);\n  }\n}\n","import { RpcClientInterface } from '@taquito/rpc';\nimport { ContractAbstraction, ContractProvider, Wallet } from '@taquito/taquito';\nimport { ViewImplementation, ViewImplementationType } from '../metadata-interface';\nimport { MichelsonStorageView } from './michelson-storage-view';\n\nexport class ViewFactory {\n    getView(\n        viewName: string,\n        rpc: RpcClientInterface,\n        contract: ContractAbstraction<ContractProvider | Wallet>,\n        viewImplementation: ViewImplementation\n    ) {\n        if (this.isMichelsonStorageView(viewImplementation)) {\n            const viewValues = viewImplementation[ViewImplementationType.MICHELSON_STORAGE];\n            if (!viewValues.returnType || !viewValues.code) {\n                console.warn(\n                    `${viewName} is missing mandatory code or returnType property therefore it will be skipped.`\n                );\n                return;\n            }\n            return () => {\n                const view = new MichelsonStorageView(\n                    viewName,\n                    contract,\n                    rpc,\n                    viewValues.returnType as any,\n                    viewValues.code as any,\n                    viewValues.parameter as any\n                );\n                return view;\n            };\n        }\n    }\n\n    getImplementationType(viewImplementation: ViewImplementation) {\n        return Object.keys(viewImplementation)[0];\n    }\n\n    private isMichelsonStorageView(\n        viewImplementation: ViewImplementation\n    ): viewImplementation is { [ViewImplementationType.MICHELSON_STORAGE]: any } {\n        return this.getImplementationType(viewImplementation) === ViewImplementationType.MICHELSON_STORAGE;\n    }\n}\n","import {\n  BigMapAbstraction,\n  Context,\n  ContractAbstraction,\n  ContractProvider,\n  Wallet,\n} from '@taquito/taquito';\nimport { bytes2Char } from '@taquito/utils';\nimport { MetadataEnvelope, MetadataProviderInterface } from './metadata-provider';\nimport {\n  BigMapMetadataNotFound,\n  UnconfiguredMetadataProviderError,\n  UriNotFound,\n} from './tzip16-errors';\nimport BigNumber from 'bignumber.js';\nimport { Schema } from '@taquito/michelson-encoder';\nimport { ViewFactory } from './viewKind/viewFactory';\nimport { View } from './viewKind/interface';\nimport { ViewDefinition } from './metadata-interface';\n\nexport type MetadataContext = Context & {\n  metadataProvider: MetadataProviderInterface;\n};\n\ntype BigMapId = { int: string };\n\nconst metadataBigMapType = {\n  prim: 'big_map',\n  args: [{ prim: 'string' }, { prim: 'bytes' }],\n  annots: ['%metadata'],\n};\nexport class Tzip16ContractAbstraction {\n  private _metadataProvider: MetadataProviderInterface;\n  private _metadataEnvelope?: MetadataEnvelope;\n  private _viewFactory = new ViewFactory();\n  private _metadataViewsObject: { [key: string]: () => View } = {};\n\n  constructor(\n    private constractAbstraction: ContractAbstraction<ContractProvider | Wallet>,\n    private context: MetadataContext\n  ) {\n    this._metadataProvider = context.metadataProvider;\n  }\n\n  private findMetadataBigMap(): BigMapAbstraction {\n    const metadataBigMapId = this.constractAbstraction.schema.FindFirstInTopLevelPair<BigMapId>(\n      this.constractAbstraction.script.storage,\n      metadataBigMapType\n    );\n\n    if (!metadataBigMapId) {\n      throw new BigMapMetadataNotFound();\n    }\n\n    return new BigMapAbstraction(\n      new BigNumber(metadataBigMapId['int']),\n      new Schema(metadataBigMapType),\n      this.context.contract\n    );\n  }\n\n  private async getUriOrFail() {\n    const metadataBigMap = this.findMetadataBigMap();\n    const uri = await metadataBigMap.get<string>('');\n    if (!uri) {\n      throw new UriNotFound();\n    }\n    return uri;\n  }\n\n  /**\n   * @description Return an object containing the metadata, the uri, an optional integrity check result and an optional sha256 hash\n   */\n  async getMetadata() {\n    if (!this._metadataProvider) {\n      throw new UnconfiguredMetadataProviderError();\n    }\n    if (!this._metadataEnvelope) {\n      const uri = await this.getUriOrFail();\n      this._metadataEnvelope = await this._metadataProvider.provideMetadata(\n        this.constractAbstraction,\n        bytes2Char(uri),\n        this.context\n      );\n    }\n    return this._metadataEnvelope;\n  }\n\n  async metadataViews() {\n    if (Object.keys(this._metadataViewsObject).length === 0) {\n      await this.initializeMetadataViewsList();\n    }\n    return this._metadataViewsObject;\n  }\n\n  private async initializeMetadataViewsList() {\n    const { metadata } = await this.getMetadata();\n    const metadataViews: any = {};\n    metadata.views?.forEach((view) => this.createViewImplementations(view, metadataViews));\n    this._metadataViewsObject = metadataViews;\n  }\n\n  private generateIndexedViewName(viewName: string, metadataViews: object) {\n    let i = 1;\n    if (viewName in metadataViews) {\n      while (`${viewName}${i}` in metadataViews) {\n        i++;\n      }\n      viewName = `${viewName}${i}`;\n    }\n    return viewName;\n  }\n\n  private createViewImplementations(view: ViewDefinition, metadataViews: any) {\n    for (const viewImplementation of view?.implementations ?? []) {\n      if (view.name) {\n        // when views have the same name, add an index at the end of the name\n        const viewName = this.generateIndexedViewName(view.name, metadataViews);\n        const metadataView = this._viewFactory.getView(\n          viewName,\n          this.context.rpc,\n          this.constractAbstraction,\n          viewImplementation\n        );\n        if (metadataView) {\n          metadataViews[viewName] = metadataView;\n        } else {\n          console.warn(\n            `Skipped generating ${viewName} because the view has an unsupported type: ${this._viewFactory.getImplementationType(\n              viewImplementation\n            )}`\n          );\n        }\n      }\n    }\n  }\n}\n","import { Context, ContractAbstraction, ContractProvider, Wallet } from '@taquito/taquito';\nimport { MetadataContext, Tzip16ContractAbstraction } from './tzip16-contract-abstraction';\n\nconst ABSTRACTION_KEY = Symbol('Tzip16ContractAbstractionObjectKey');\n\nexport function tzip16<T extends ContractAbstraction<ContractProvider | Wallet>>(\n  abs: T,\n  context: Context\n) {\n  return Object.assign(abs, {\n    // namespace tzip16\n    tzip16(\n      this: ContractAbstraction<ContractProvider | Wallet> & {\n        [ABSTRACTION_KEY]?: Tzip16ContractAbstraction;\n      }\n    ) {\n      if (!this[ABSTRACTION_KEY]) {\n        this[ABSTRACTION_KEY] = new Tzip16ContractAbstraction(this, context as MetadataContext);\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      return this[ABSTRACTION_KEY]!;\n    },\n  });\n}\n","import CryptoJS from \"crypto-js\";\n\nexport function calculateSHA256Hash(preimage: string): string {\n    return CryptoJS.SHA256(preimage).toString(CryptoJS.enc.Hex);\n}","import { ContractAbstraction, ContractProvider, Wallet, Context } from '@taquito/taquito';\nimport { MetadataInterface } from './metadata-interface';\nimport { MetadataContext } from './tzip16-contract-abstraction';\nimport { InvalidMetadata, InvalidUri, ProtocolNotSupported } from './tzip16-errors';\nimport { calculateSHA256Hash } from './tzip16-utils';\n\nexport interface MetadataProviderInterface {\n  provideMetadata(\n    contractAbstraction: ContractAbstraction<ContractProvider | Wallet>,\n    uri: string,\n    context: MetadataContext\n  ): Promise<MetadataEnvelope>;\n}\n\nexport interface MetadataEnvelope {\n  uri: string;\n  integrityCheckResult?: boolean;\n  sha256Hash?: string;\n  metadata: MetadataInterface;\n}\nexport interface Handler {\n  getMetadata(\n    contractAbstraction: ContractAbstraction<ContractProvider | Wallet>,\n    uri: Tzip16Uri,\n    context: Context\n  ): Promise<string>;\n}\n\nexport interface Tzip16Uri {\n  sha256hash: string | undefined;\n  protocol: string;\n  location: string;\n}\n\n/**\n * @description: Metadata Provider\n */\nexport class MetadataProvider implements MetadataProviderInterface {\n  private readonly PROTOCOL_REGEX = /(?:sha256:\\/\\/0x(.*)\\/)?(https?|ipfs|tezos-storage):(.*)/;\n\n  constructor(private handlers: Map<string, Handler>) {}\n\n  /**\n   * @description Fetch the metadata by using the appropriate handler based on the protcol found in the URI\n   * @returns an object which contains the uri, the metadata, an optional integrity check result and an optional SHA256 hash\n   * @param _contractAbstraction the contract abstraction which contains the URI in its storage\n   * @param _uri the decoded uri found in the storage\n   * @param context the TezosToolkit Context\n   */\n  async provideMetadata(\n    contractAbstraction: ContractAbstraction<ContractProvider | Wallet>,\n    uri: string,\n    context: Context\n  ): Promise<MetadataEnvelope> {\n    const uriInfo = this.extractProtocolInfo(uri);\n    if (!uriInfo || !uriInfo.location) {\n      throw new InvalidUri(uri);\n    }\n\n    const handler = this.handlers.get(uriInfo.protocol);\n    if (!handler) {\n      throw new ProtocolNotSupported(uriInfo.protocol);\n    }\n\n    const metadata = await handler.getMetadata(contractAbstraction, uriInfo, context);\n    const sha256Hash = calculateSHA256Hash(metadata);\n    let metadataJSON;\n    try {\n      metadataJSON = JSON.parse(metadata);\n    } catch (ex) {\n      throw new InvalidMetadata(metadata);\n    }\n\n    return {\n      uri,\n      metadata: metadataJSON,\n      integrityCheckResult: uriInfo.sha256hash ? uriInfo.sha256hash === sha256Hash : undefined,\n      sha256Hash: uriInfo.sha256hash ? sha256Hash : undefined,\n    };\n  }\n\n  private extractProtocolInfo(_uri: string) {\n    const extractor = this.PROTOCOL_REGEX.exec(_uri);\n    if (!extractor) return;\n    return {\n      sha256hash: extractor[1],\n      protocol: extractor[2],\n      location: extractor[3],\n    };\n  }\n}\n","import { Context, Extension } from \"@taquito/taquito\";\nimport { Handler, MetadataProvider, MetadataProviderInterface } from \"./metadata-provider\";\nimport { HttpHandler } from \"./handlers/http-handler\";\nimport { TezosStorageHandler } from \"./handlers/tezos-storage-handler\";\nimport { IpfsHttpHandler } from \"./handlers/ipfs-handler\";\n\nexport const DEFAULT_HANDLERS = new Map<string, Handler>([\n    ['http', new HttpHandler()],\n    ['https', new HttpHandler()],\n    ['tezos-storage', new TezosStorageHandler()],\n    ['ipfs', new IpfsHttpHandler()]\n])\nexport class Tzip16Module implements Extension {\n    private _metadataProvider: MetadataProviderInterface;\n\n    constructor(metadataProvider?: MetadataProviderInterface) {\n        this._metadataProvider = metadataProvider ? metadataProvider : new MetadataProvider(DEFAULT_HANDLERS);\n    }\n\n    configureContext(context: Context) {\n        Object.assign(context, { metadataProvider: this._metadataProvider });\n    }\n}","\n// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\nexport const VERSION = {\n    \"commitHash\": \"81f0a5b103f867f57fbe5d526315c375a3788346\",\n    \"version\": \"11.2.0\"\n};\n"],"names":[],"mappings":"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"}