"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvalidViewParameterError = exports.NoParameterExpectedError = exports.ForbiddenInstructionInViewCode = exports.UnconfiguredMetadataProviderError = exports.InvalidMetadataType = exports.ProtocolNotSupported = exports.InvalidMetadata = exports.InvalidUri = exports.UriNotFound = exports.MetadataNotFound = exports.BigMapMetadataNotFound = void 0;
class BigMapMetadataNotFound extends Error {
    constructor() {
        super('Non-compliance with the TZIP-016 standard. No big map named metadata was found in the contract storage.');
        this.name = 'BigMapMetadataNotFound';
    }
}
exports.BigMapMetadataNotFound = BigMapMetadataNotFound;
class MetadataNotFound extends Error {
    constructor(info) {
        super(`No metadata was found in the contract storage. ${info}`);
        this.info = info;
        this.name = 'MetadataNotFound';
    }
}
exports.MetadataNotFound = MetadataNotFound;
class UriNotFound extends Error {
    constructor() {
        super('Non-compliance with the TZIP-016 standard. No URI found in the contract storage.');
        this.name = 'UriNotFound';
    }
}
exports.UriNotFound = UriNotFound;
class InvalidUri extends Error {
    constructor(uri) {
        super(`Non-compliance with the TZIP-016 standard. The URI is invalid: ${uri}.`);
        this.uri = uri;
        this.name = 'InvalidUri';
    }
}
exports.InvalidUri = InvalidUri;
class InvalidMetadata extends Error {
    constructor(invalidMetadata) {
        super(`The metadata found at the pointed ressource are not compliant with tzip16 standard: ${invalidMetadata}.`);
        this.invalidMetadata = invalidMetadata;
        this.name = 'InvalidMetadata';
    }
}
exports.InvalidMetadata = InvalidMetadata;
class ProtocolNotSupported extends Error {
    constructor(protocol) {
        super(`The protocol found in the URI is not supported: ${protocol}.`);
        this.protocol = protocol;
        this.name = 'ProtocolNotSupported';
    }
}
exports.ProtocolNotSupported = ProtocolNotSupported;
class InvalidMetadataType extends Error {
    constructor() {
        super('The contract does not comply with the tzip16 standard. The type of metadata should be bytes.');
        this.name = 'InvalidMetadataType';
    }
}
exports.InvalidMetadataType = InvalidMetadataType;
class UnconfiguredMetadataProviderError extends Error {
    constructor() {
        super('No metadata provider has been configured. The default one can be configured by calling addExtension(new Tzip16Module()) on your TezosToolkit instance.');
        this.name = 'UnconfiguredMetadataProviderError';
    }
}
exports.UnconfiguredMetadataProviderError = UnconfiguredMetadataProviderError;
class ForbiddenInstructionInViewCode extends Error {
    constructor(instruction) {
        super(`Error found in the code of the view. It contains a forbidden instruction: ${instruction}.`);
        this.instruction = instruction;
        this.name = 'ForbiddenInstructionInViewCode';
    }
}
exports.ForbiddenInstructionInViewCode = ForbiddenInstructionInViewCode;
class NoParameterExpectedError extends Error {
    constructor(viewName, args) {
        super(`${viewName} Received ${args.length} arguments while expecting no parameter or 'Unit'`);
        this.viewName = viewName;
        this.args = args;
        this.name = 'NoParameterExpectedError';
    }
}
exports.NoParameterExpectedError = NoParameterExpectedError;
class InvalidViewParameterError extends Error {
    constructor(viewName, sigs, args) {
        super(`${viewName} Received ${args.length} arguments while expecting one of the following signatures (${JSON.stringify(sigs)})`);
        this.viewName = viewName;
        this.sigs = sigs;
        this.args = args;
        this.name = 'InvalidViewParameterError';
    }
}
exports.InvalidViewParameterError = InvalidViewParameterError;
//# sourceMappingURL=tzip16-errors.js.map