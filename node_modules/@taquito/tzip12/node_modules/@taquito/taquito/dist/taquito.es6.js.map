{"version":3,"file":"taquito.es6.js","sources":["../src/forger/rpc-forger.ts","../src/injector/rpc-injector.ts","../src/signer/noop.ts","../src/constants.ts","../src/format.ts","../src/contract/errors.ts","../src/contract/prepare.ts","../src/operations/types.ts","../src/operations/operation-errors.ts","../src/operations/operations.ts","../src/operations/batch-operation.ts","../src/operations/operation-emitter.ts","../src/batch/rpc-batch-provider.ts","../src/wallet/receipt.ts","../src/wallet/operation.ts","../src/wallet/batch-operation.ts","../src/wallet/delegation-operation.ts","../src/wallet/origination-operation.ts","../src/wallet/transaction-operation.ts","../src/wallet/operation-factory.ts","../src/tz/rpc-tz-provider.ts","../src/contract/estimate.ts","../src/contract/rpc-estimate-provider.ts","../src/operations/delegate-operation.ts","../src/operations/origination-operation.ts","../src/operations/register-global-constant-operation.ts","../src/operations/reveal-operation.ts","../src/operations/transaction-operation.ts","../src/contract/manager-lambda.ts","../src/contract/view_lambda.ts","../src/contract/compose.ts","../src/contract/contract-methods/contract-method-flat-param.ts","../src/wallet/wallet.ts","../src/wallet/legacy.ts","../src/contract/contract-methods/contract-method-object-param.ts","../src/contract/contract-methods/contract-on-chain-view.ts","../src/contract/contract-methods/contract-method-factory.ts","../src/contract/lambda-view.ts","../src/contract/contract.ts","../src/contract/big-map.ts","../src/contract/sapling-state-abstraction.ts","../src/contract/semantic.ts","../src/contract/rpc-contract-provider.ts","../src/parser/michel-codec-parser.ts","../src/packer/rpc-packer.ts","../src/global-constants/error.ts","../src/global-constants/noop-global-constants-provider.ts","../src/context.ts","../src/subscribe/filters.ts","../src/subscribe/observable-subscription.ts","../src/subscribe/polling-provider.ts","../src/version.ts","../src/forger/composite-forger.ts","../src/parser/noop-parser.ts","../src/packer/michel-codec-packer.ts","../src/global-constants/default-global-constants-provider.ts","../src/taquito.ts"],"sourcesContent":["import { Forger, ForgeParams, ForgeResponse } from './interface';\nimport { Context } from '../context';\n\nexport class RpcForger implements Forger {\n  constructor(private context: Context) {}\n\n  forge({ branch, contents }: ForgeParams): Promise<ForgeResponse> {\n    return this.context.rpc.forgeOperations({ branch, contents });\n  }\n}\n","import { Injector } from './interface';\nimport { Context } from '../context';\n\nexport class RpcInjector implements Injector {\n  constructor(private context: Context) {}\n  inject(signedOperationBytes: string): Promise<string> {\n    return this.context.rpc.injectOperation(signedOperationBytes);\n  }\n}\n","import { Signer } from './interface';\n\nexport class UnconfiguredSignerError extends Error {\n  name = 'UnconfiguredSignerError';\n\n  constructor() {\n    super(\n      'No signer has been configured. Please configure one by calling setProvider({signer}) on your TezosToolkit instance.'\n    );\n  }\n}\n\n/**\n * @description Default signer implementation which does nothing and produce invalid signature\n */\nexport class NoopSigner implements Signer {\n  async publicKey(): Promise<string> {\n    throw new UnconfiguredSignerError();\n  }\n  async publicKeyHash(): Promise<string> {\n    throw new UnconfiguredSignerError();\n  }\n  async secretKey(): Promise<string> {\n    throw new UnconfiguredSignerError();\n  }\n  async sign(_bytes: string, _watermark?: Uint8Array): Promise<any> {\n    throw new UnconfiguredSignerError();\n  }\n}\n","export enum DEFAULT_GAS_LIMIT {\n  DELEGATION = 10600,\n  ORIGINATION = 10600,\n  TRANSFER = 10600,\n  REVEAL = 1100,\n}\nexport enum DEFAULT_FEE {\n  DELEGATION = 1257,\n  ORIGINATION = 10000,\n  TRANSFER = 10000,\n  REVEAL = 374,\n}\nexport enum DEFAULT_STORAGE_LIMIT {\n  DELEGATION = 0,\n  ORIGINATION = 257,\n  TRANSFER = 257,\n  REVEAL = 0,\n}\n\nexport enum Protocols {\n  Pt24m4xi = 'Pt24m4xiPbLDhVgVfABUjirbmda3yohdN82Sp9FeuAXJ4eV9otd',\n  PsBABY5H = 'PsBABY5HQTSkA4297zNHfsZNKtxULfL18y95qb3m53QJiXGmrbU',\n  PsBabyM1 = 'PsBabyM1eUXZseaJdmXFApDSBqj8YBfwELoxZHHW77EMcAbbwAS',\n  PsCARTHA = 'PsCARTHAGazKbHtnKfLzQg3kms52kSRpgnDY982a9oYsSXRLQEb',\n  PsDELPH1 = 'PsDELPH1Kxsxt8f9eWbxQeRxkjfbxoqM52jvs5Y5fBxWWh4ifpo',\n  PtEdo2Zk = 'PtEdo2ZkT9oKpimTah6x2embF25oss54njMuPzkJTEi5RqfdZFA',\n  PsFLorena = 'PsFLorenaUUuikDWvMDr6fGBRG8kt3e3D3fHoXK1j1BFRxeSH4i',\n  PtGRANADs = 'PtGRANADsDU8R9daYKAgWnQYAJ64omN1o3KMGVCykShA97vQbvV',\n  PtHangz2 = 'PtHangz2aRngywmSRGGvrcTyMbbdpWdpFKuS4uMWxg2RaH9i1qx',\n  PsiThaCa = 'PsiThaCaT47Zboaw71QWScM8sXeMM7bbQFncK9FLqYc6EKdpjVP',\n  Psithaca2 = 'Psithaca2MLRFYargivpo7YvUr7wUDqyxrdhC5CQq78mRvimz6A',\n  ProtoALpha = 'ProtoALphaALphaALphaALphaALphaALphaALphaALphaDdp3zK', // temporary protocol hash\n}\n\nexport const protocols = {\n  '004': [Protocols.Pt24m4xi],\n  '005': [Protocols.PsBABY5H, Protocols.PsBabyM1],\n  '006': [Protocols.PsCARTHA],\n  '007': [Protocols.PsDELPH1],\n  '008': [Protocols.PtEdo2Zk], // edonet v2\n  '009': [Protocols.PsFLorena],\n  '010': [Protocols.PtGRANADs],\n  '011': [Protocols.PtHangz2], // hangzhou v2,\n  '012': [Protocols.PsiThaCa], //Ithaca\n  '013': [Protocols.Psithaca2], //Ithaca2\n  '014': [Protocols.ProtoALpha],\n};\n\nexport enum DefaultLambdaAddresses {\n  MAINNET = 'KT1CPuTzwC7h7uLXd5WQmpMFso1HxrLBUtpE',\n  CARTHAGENET = 'KT1VAy1o1FGiXYfD3YT7x7k5eF5HSHhmc1u6',\n  DELPHINET = 'KT19abMFs3haqyKYwqdLjK9GbtofryZLvpiK',\n  EDONET = 'KT1A64nVZDccAHGAsf1ZyVajXZcbiwjV3SnN',\n  FLORENCENET = 'KT1KCe3YqGnudsiCWb5twbe2DH5T3EMdLpSE',\n  GRANADANET = 'KT1BCun2vsA4GBQvsKAuGD5x873MfW2jsN9z',\n  HANGZHOUNET = 'KT1PWtBAr1hjK9M9s9oZNZFbfzPdkkD6PSJR',\n  ITHACANET = 'KT1CsEGfRHWeuUQFh9LfVFLVMbm7DFBuHPPU',\n  ITHACANET2 = 'KT1H2a5vGkMLFGBPMs6oRRJshCvYeXSBSadn',\n}\n\nexport enum ChainIds {\n  MAINNET = 'NetXdQprcVkpaWU',\n  CARTHAGENET = 'NetXjD3HPJJjmcd',\n  DELPHINET = 'NetXm8tYqnMWky1',\n  EDONET = 'NetXSgo1ZT2DRUG',\n  FLORENCENET = 'NetXxkAx4woPLyu',\n  GRANADANET = 'NetXz969SFaFn8k',\n  HANGZHOUNET = 'NetXZSsxBpMQeAT',\n  ITHACANET = 'NetXbhmtAbMukLc',\n  ITHACANET2 = 'NetXnHfVqm9iesp',\n}\n","import BigNumber from 'bignumber.js';\n\nconst TZ_DECIMALS = 6;\nconst MTZ_DECIMALS = 3;\n\ntype Format = 'tz' | 'mtz' | 'mutez';\n\nfunction getDecimal(format: Format) {\n  switch (format) {\n    case 'tz':\n      return TZ_DECIMALS;\n    case 'mtz':\n      return MTZ_DECIMALS;\n    case 'mutez':\n    default:\n      return 0;\n  }\n}\n\nexport function format(\n  from: Format = 'mutez',\n  to: Format = 'mutez',\n  amount: number | string | BigNumber\n) {\n  const bigNum = new BigNumber(amount);\n  if (bigNum.isNaN()) {\n    return amount;\n  }\n\n  return bigNum\n    .multipliedBy(Math.pow(10, getDecimal(from)))\n    .dividedBy(Math.pow(10, getDecimal(to)));\n}\n","import { HttpResponseError } from '@taquito/http-utils';\nimport { MichelsonV1Expression } from '@taquito/rpc';\n\nexport class InvalidParameterError extends Error {\n  name = 'Invalid parameters error';\n  constructor(public smartContractMethodName: string, public sigs: any[], public args: any[]) {\n    super(\n      `${smartContractMethodName} Received ${\n        args.length\n      } arguments while expecting one of the following signatures (${JSON.stringify(sigs)})`\n    );\n  }\n}\n\nexport class UndefinedLambdaContractError extends Error {\n  name = 'Undefined LambdaContract error';\n  constructor() {\n    super(\n      'This might happen if you are using a sandbox. Please provide the address of a lambda contract as a parameter of the read method.'\n    );\n  }\n}\nexport class InvalidDelegationSource extends Error {\n  name = 'Invalid delegation source error';\n\n  constructor(public source: string) {\n    super(\n      `Since Babylon delegation source can no longer be a contract address ${source}. Please use the smart contract abstraction to set your delegate.`\n    );\n  }\n}\n\nexport class InvalidCodeParameter extends Error {\n  public name = 'InvalidCodeParameter';\n  constructor(public message: string, public readonly data: any) {\n    super(message);\n  }\n}\n\nexport class InvalidInitParameter extends Error {\n  public name = 'InvalidInitParameter';\n  constructor(public message: string, public readonly data: any) {\n    super(message);\n  }\n}\n\nexport class InvalidViewParameterError extends Error {\n  name = 'Invalid view parameters error';\n  cause: any;\n  constructor(\n    public smartContractViewName: string,\n    public sigs: any,\n    public args: any,\n    public originalError: any\n  ) {\n    super(\n      `Unable to encode the parameter of the view: ${smartContractViewName}. Received ${args} as parameter while expecting one of the following signatures (${JSON.stringify(\n        sigs\n      )})`\n    );\n    this.cause = originalError;\n  }\n}\n\nexport class ViewSimulationError extends Error {\n  name = 'ViewSimulationError';\n  constructor(\n    public message: string,\n    public viewName: string,\n    public failWith?: MichelsonV1Expression,\n    public originalError?: any\n  ) {\n    super(message);\n  }\n}\n\nexport const validateAndExtractFailwith = (\n  error: HttpResponseError\n): MichelsonV1Expression | undefined => {\n  if (isJsonString(error.body)) {\n    const parsedError = JSON.parse(error.body);\n    if (Array.isArray(parsedError) && 'with' in parsedError[parsedError.length - 1]) {\n      return parsedError[parsedError.length - 1].with;\n    }\n  }\n};\n\nconst isJsonString = (str: string) => {\n  try {\n    JSON.parse(str);\n  } catch (e) {\n    return false;\n  }\n  return true;\n};\n\nexport class InvalidViewSimulationContext extends Error {\n  public name = 'InvalidViewSimulationContext';\n  constructor(public info: string) {\n    super(`${info} Please configure the context of the view execution in the executeView method.`);\n  }\n}\n","import { Schema } from '@taquito/michelson-encoder';\nimport { OpKind, MichelsonV1Expression } from '@taquito/rpc';\nimport { Prim, Expr } from '@taquito/michel-codec';\nimport {\n  OriginateParams,\n  RPCOriginationOperation,\n  TransferParams,\n  RPCTransferOperation,\n  DelegateParams,\n  RPCDelegateOperation,\n  RegisterDelegateParams,\n  RPCRevealOperation,\n  RevealParams,\n  RegisterGlobalConstantParams,\n  RPCRegisterGlobalConstantOperation,\n} from '../operations/types';\nimport { DEFAULT_FEE, DEFAULT_GAS_LIMIT, DEFAULT_STORAGE_LIMIT } from '../constants';\nimport { format } from '../format';\nimport { InvalidCodeParameter, InvalidInitParameter } from './errors';\n\nexport const createOriginationOperation = async ({\n  code,\n  init,\n  balance = '0',\n  delegate,\n  storage,\n  fee = DEFAULT_FEE.ORIGINATION,\n  gasLimit = DEFAULT_GAS_LIMIT.ORIGINATION,\n  storageLimit = DEFAULT_STORAGE_LIMIT.ORIGINATION,\n  mutez = false,\n}: OriginateParams) => {\n  if (storage !== undefined && init !== undefined) {\n    throw new Error(\n      'Storage and Init cannot be set a the same time. Please either use storage or init but not both.'\n    );\n  }\n\n  if (!Array.isArray(code)) {\n    throw new InvalidCodeParameter('Wrong code parameter type, expected an array', code);\n  }\n\n  let contractStorage: Expr | undefined;\n  if (storage !== undefined) {\n    const storageType = (code as Expr[]).find(\n      (p): p is Prim => 'prim' in p && p.prim === 'storage'\n    );\n    if (storageType?.args === undefined) {\n      throw new InvalidCodeParameter('The storage section is missing from the script', code);\n    }\n    const schema = new Schema(storageType.args[0] as MichelsonV1Expression); // TODO\n    contractStorage = schema.Encode(storage);\n  } else if (init !== undefined && typeof init === 'object') {\n    contractStorage = init as Expr;\n  } else {\n    throw new InvalidInitParameter('Wrong init parameter type, expected JSON Michelson', init);\n  }\n\n  const script = {\n    code,\n    storage: contractStorage,\n  };\n\n  const operation: RPCOriginationOperation = {\n    kind: OpKind.ORIGINATION,\n    fee,\n    gas_limit: gasLimit,\n    storage_limit: storageLimit,\n    balance: mutez ? balance.toString() : format('tz', 'mutez', balance).toString(),\n    script,\n  };\n\n  if (delegate) {\n    operation.delegate = delegate;\n  }\n  return operation;\n};\n\nexport const createTransferOperation = async ({\n  to,\n  amount,\n  parameter,\n  fee = DEFAULT_FEE.TRANSFER,\n  gasLimit = DEFAULT_GAS_LIMIT.TRANSFER,\n  storageLimit = DEFAULT_STORAGE_LIMIT.TRANSFER,\n  mutez = false,\n}: TransferParams) => {\n  const operation: RPCTransferOperation = {\n    kind: OpKind.TRANSACTION,\n    fee,\n    gas_limit: gasLimit,\n    storage_limit: storageLimit,\n    amount: mutez ? amount.toString() : format('tz', 'mutez', amount).toString(),\n    destination: to,\n    parameters: parameter,\n  };\n  return operation;\n};\n\nexport const createSetDelegateOperation = async ({\n  delegate,\n  source,\n  fee = DEFAULT_FEE.DELEGATION,\n  gasLimit = DEFAULT_GAS_LIMIT.DELEGATION,\n  storageLimit = DEFAULT_STORAGE_LIMIT.DELEGATION,\n}: DelegateParams) => {\n  const operation: RPCDelegateOperation = {\n    kind: OpKind.DELEGATION,\n    source,\n    fee,\n    gas_limit: gasLimit,\n    storage_limit: storageLimit,\n    delegate,\n  };\n  return operation;\n};\n\nexport const createRegisterDelegateOperation = async (\n  {\n    fee = DEFAULT_FEE.DELEGATION,\n    gasLimit = DEFAULT_GAS_LIMIT.DELEGATION,\n    storageLimit = DEFAULT_STORAGE_LIMIT.DELEGATION,\n  }: RegisterDelegateParams,\n  source: string\n) => {\n  return {\n    kind: OpKind.DELEGATION,\n    fee,\n    gas_limit: gasLimit,\n    storage_limit: storageLimit,\n    delegate: source,\n  } as RPCDelegateOperation;\n};\n\nexport const createRevealOperation = async (\n  {\n    fee = DEFAULT_FEE.REVEAL,\n    gasLimit = DEFAULT_GAS_LIMIT.REVEAL,\n    storageLimit = DEFAULT_STORAGE_LIMIT.REVEAL,\n  }: RevealParams,\n  source: string,\n  publicKey: string\n) => {\n  return {\n    kind: OpKind.REVEAL,\n    fee,\n    public_key: publicKey,\n    source,\n    gas_limit: gasLimit,\n    storage_limit: storageLimit,\n  } as RPCRevealOperation;\n};\n\nexport const createRegisterGlobalConstantOperation = async ({\n  value,\n  source,\n  fee,\n  gasLimit,\n  storageLimit,\n}: RegisterGlobalConstantParams) => {\n  return {\n    kind: OpKind.REGISTER_GLOBAL_CONSTANT,\n    value,\n    fee,\n    gas_limit: gasLimit,\n    storage_limit: storageLimit,\n    source,\n  } as RPCRegisterGlobalConstantOperation;\n};\n","import {\n  OperationObject,\n  InternalOperationResultKindEnum,\n  OpKind,\n  TransactionOperationParameter,\n  MichelsonV1Expression,\n} from '@taquito/rpc';\n\nexport { OpKind } from '@taquito/rpc';\n\nexport type withKind<T, K extends OpKind> = T & { kind: K };\n\nexport type ParamsWithKind =\n  | withKind<OriginateParams, OpKind.ORIGINATION>\n  | withKind<DelegateParams, OpKind.DELEGATION>\n  | withKind<TransferParams, OpKind.TRANSACTION>\n  | withKind<ActivationParams, OpKind.ACTIVATION>\n  | withKind<RegisterGlobalConstantParams, OpKind.REGISTER_GLOBAL_CONSTANT>;\n\nexport type ParamsWithKindExtended =\n  | ParamsWithKind\n  | withKind<RevealParams, OpKind.REVEAL>\n\nexport const attachKind = <T, K extends OpKind>(op: T, kind: K) => {\n  return { ...op, kind } as withKind<T, K>;\n};\n\nexport const findWithKind = <T extends { kind: OpKind }, K extends OpKind>(\n  arr: T[],\n  kind: K\n): (T & { kind: K }) | undefined => {\n  if (Array.isArray(arr)) {\n    const found = arr.find(op => op.kind === kind);\n\n    if (found && isKind(found, kind)) {\n      return found;\n    }\n  }\n};\n\nexport const isKind = <T extends { kind: OpKind }, K extends OpKind>(\n  op: T,\n  kind: K\n): op is withKind<T, K> => {\n  return op.kind === kind;\n};\n\nexport type RPCOpWithFee =\n  | RPCTransferOperation\n  | RPCOriginationOperation\n  | RPCDelegateOperation\n  | RPCRevealOperation\n  | RPCRegisterGlobalConstantOperation;\nexport type RPCOpWithSource =\n  | RPCTransferOperation\n  | RPCOriginationOperation\n  | RPCDelegateOperation\n  | RPCRevealOperation\n  | RPCRegisterGlobalConstantOperation;\n\nexport const isOpWithFee = <T extends { kind: OpKind }>(\n  op: T\n): op is withKind<T, InternalOperationResultKindEnum> => {\n  return ['transaction', 'delegation', 'origination', 'reveal', 'register_global_constant'].indexOf(op.kind) !== -1;\n};\n\nexport const isOpRequireReveal = <T extends { kind: OpKind }>(\n  op: T\n): op is withKind<T, Exclude<InternalOperationResultKindEnum, OpKind.REVEAL>> => {\n  return ['transaction', 'delegation', 'origination', 'register_global_constant'].indexOf(op.kind) !== -1;\n};\n\nexport type SourceKinds = InternalOperationResultKindEnum;\n\nexport const isSourceOp = <T extends { kind: OpKind }>(op: T): op is withKind<T, SourceKinds> => {\n  return ['transaction', 'delegation', 'origination', 'reveal', 'ballot'].indexOf(op.kind) !== -1;\n};\n\nexport const hasMetadata = <T extends { kind: OpKind }, K>(\n  op: T\n): op is T & {\n  metadata: K;\n} => {\n  return 'metadata' in op;\n};\n\nexport const hasMetadataWithResult = <T extends { kind: OpKind }, K>(\n  op: T\n): op is T & {\n  metadata: {\n    operation_result: K;\n  };\n} => {\n  return hasMetadata<T, any>(op) && 'operation_result' in op.metadata;\n};\n\nexport const hasMetadataWithInternalOperationResult = <T extends { kind: OpKind }, K>(\n  op: T\n): op is T & {\n  metadata: {\n    internal_operation_results?: K;\n  };\n} => {\n  return hasMetadata<T, any>(op) && 'internal_operation_results' in op.metadata;\n};\n\nexport interface GasConsumingOperation {\n  consumedGas?: string;\n  gasLimit: number;\n}\n\nexport interface StorageConsumingOperation {\n  storageDiff?: string;\n  storageSize?: string;\n  storageLimit: number;\n}\n\nexport interface FeeConsumingOperation {\n  fee: number;\n}\n\nexport type OriginateParamsBase = {\n  balance?: string;\n  code: string | object[];\n  delegate?: string;\n  fee?: number;\n  gasLimit?: number;\n  storageLimit?: number;\n  mutez?: boolean;\n};\n\n/**\n * @description Parameters for originate method\n */\nexport type OriginateParams<TStorage = any> = OriginateParamsBase &\n  (\n    | {\n      init?: never;\n      /** JS representation of a storage object */\n      storage: TStorage;\n    }\n    | {\n      /** Initial storage object value. Either Micheline or JSON encoded */\n      init: string | object;\n      storage?: never;\n    }\n  );\n\nexport interface ActivationParams {\n  pkh: string;\n  secret: string;\n}\n\n/**\n * @description RPC origination operation\n */\nexport interface RPCOriginationOperation {\n  kind: OpKind.ORIGINATION;\n  fee: number;\n  gas_limit: number;\n  storage_limit: number;\n  balance: string;\n  delegate?: string;\n  source?: string;\n  script: {\n    code: any;\n    storage: any;\n  };\n}\n\n/**\n * @description RPC reveal operation\n */\nexport interface RPCRevealOperation {\n  kind: OpKind.REVEAL;\n  fee: number;\n  public_key: string;\n  source?: string;\n  gas_limit: number;\n  storage_limit: number;\n}\n\nexport interface RevealParams {\n  fee?: number;\n  gasLimit?: number;\n  storageLimit?: number;\n}\n\n\n/**\n * @description Result of a forge operation contains the operation plus its encoded version\n */\nexport interface ForgedBytes {\n  opbytes: string;\n  opOb: OperationObject;\n  counter: number;\n}\n\n/**\n * @description Parameters for setDelegate method\n */\nexport interface DelegateParams {\n  source: string;\n  delegate?: string;\n  fee?: number;\n  gasLimit?: number;\n  storageLimit?: number;\n}\n\n/**\n * @description Parameters for registerDelegate method\n */\nexport interface RegisterDelegateParams {\n  fee?: number;\n  gasLimit?: number;\n  storageLimit?: number;\n}\n\n/**\n * @description RPC delegation operation\n */\nexport interface RPCDelegateOperation {\n  kind: OpKind.DELEGATION;\n  source?: string;\n  fee: number;\n  gas_limit: number;\n  storage_limit: number;\n  delegate?: string;\n}\n\n/**\n * @description Parameters for transfer method\n */\nexport interface TransferParams {\n  to: string;\n  source?: string;\n  amount: number;\n  fee?: number;\n  parameter?: TransactionOperationParameter;\n  gasLimit?: number;\n  storageLimit?: number;\n  mutez?: boolean;\n}\n\n/**\n * @description RPC register global constant operation\n */\n export interface RPCRegisterGlobalConstantOperation {\n  kind: OpKind.REGISTER_GLOBAL_CONSTANT;\n  fee: number;\n  gas_limit: number;\n  storage_limit: number;\n  source: string;\n  value: MichelsonV1Expression;\n}\n\n/**\n * @description Parameters for the `registerGlobalConstant` method\n */\nexport interface RegisterGlobalConstantParams {\n  value: MichelsonV1Expression;\n  source?: string;\n  fee?: number;\n  gasLimit?: number;\n  storageLimit?: number;\n}\n\n/**\n * @description RPC transfer operation\n */\nexport interface RPCTransferOperation {\n  kind: OpKind.TRANSACTION;\n  fee: number;\n  gas_limit: number;\n  storage_limit: number;\n  amount: string;\n  source?: string;\n  destination: string;\n  parameters?: TransactionOperationParameter;\n}\n\n/**\n * @description RPC activate account operation\n */\nexport interface RPCActivateOperation {\n  kind: OpKind.ACTIVATION;\n  pkh: string;\n  secret: string;\n}\n\nexport type RPCOperation =\n  | RPCOriginationOperation\n  | RPCTransferOperation\n  | RPCDelegateOperation\n  | RPCRevealOperation\n  | RPCActivateOperation\n  | RPCRegisterGlobalConstantOperation;\n\nexport type PrepareOperationParams = {\n  operation: RPCOperation | RPCOperation[];\n  source?: string;\n};\n","import {\n  MichelsonV1ExpressionBase,\n  OperationResultDelegation,\n  OperationResultOrigination,\n  OperationResultRegisterGlobalConstant,\n  OperationResultReveal,\n  OperationResultTransaction,\n  PreapplyResponse,\n  TezosGenericOperationError,\n} from '@taquito/rpc';\nimport {\n  hasMetadata,\n  hasMetadataWithInternalOperationResult,\n  hasMetadataWithResult,\n} from './types';\n\nexport interface TezosOperationErrorWithMessage extends TezosGenericOperationError {\n  with: MichelsonV1ExpressionBase;\n}\n\nconst isErrorWithMessage = (error: any): error is TezosOperationErrorWithMessage => {\n  return 'with' in error;\n};\n\nexport class TezosOperationError extends Error {\n  name = 'TezosOperationError';\n  id: string;\n  kind: string;\n\n  constructor(public errors: TezosGenericOperationError[]) {\n    super();\n    // Last error is 'often' the one with more detail\n    const lastError = errors[errors.length - 1];\n\n    this.id = lastError.id;\n    this.kind = lastError.kind;\n\n    this.message = `(${this.kind}) ${this.id}`;\n\n    if (isErrorWithMessage(lastError) && lastError.with.string) {\n      this.message = lastError.with.string;\n    }\n  }\n}\n\nexport class TezosPreapplyFailureError extends Error {\n  name = 'TezosPreapplyFailureError';\n\n  constructor(public result: any) {\n    super('Preapply returned an unexpected result');\n  }\n}\n\nexport type MergedOperationResult = OperationResultDelegation &\n  OperationResultOrigination &\n  OperationResultTransaction &\n  OperationResultRegisterGlobalConstant &\n  OperationResultReveal & {\n    fee?: string;\n  };\n\n// Flatten all operation content results and internal operation results into a single array\n// Some cases where we can have multiple operation results or internal operation results are:\n// - When an operation includes a reveal operation\n// - When an operation is made using the batch API\n// - Smart contract call can contains internal operation results when they call other smart contract internally or originate contracts\nexport const flattenOperationResult = (response: PreapplyResponse | PreapplyResponse[]) => {\n  const results = Array.isArray(response) ? response : [response];\n\n  const returnedResults: MergedOperationResult[] = [];\n  for (let i = 0; i < results.length; i++) {\n    for (let j = 0; j < results[i].contents.length; j++) {\n      const content = results[i].contents[j];\n      if (hasMetadataWithResult(content)) {\n        returnedResults.push({\n          fee: content.fee,\n          ...content.metadata.operation_result,\n        });\n\n        if (Array.isArray(content.metadata.internal_operation_results)) {\n          content.metadata.internal_operation_results.forEach((x) =>\n            returnedResults.push(x.result)\n          );\n        }\n      }\n    }\n  }\n\n  return returnedResults;\n};\n\n/***\n * @description Flatten all error from preapply response (including internal error)\n */\nexport const flattenErrors = (\n  response: PreapplyResponse | PreapplyResponse[],\n  status = 'failed'\n) => {\n  const results = Array.isArray(response) ? response : [response];\n\n  let errors: TezosGenericOperationError[] = [];\n  // Transaction that do not fail will be backtracked in case one failure occur\n  for (let i = 0; i < results.length; i++) {\n    for (let j = 0; j < results[i].contents.length; j++) {\n      const content = results[i].contents[j];\n      if (hasMetadata(content)) {\n        if (hasMetadataWithResult(content) && content.metadata.operation_result.status === status) {\n          errors = errors.concat(content.metadata.operation_result.errors || []);\n        }\n        if (\n          hasMetadataWithInternalOperationResult(content) &&\n          Array.isArray(content.metadata.internal_operation_results)\n        ) {\n          for (const internalResult of content.metadata.internal_operation_results) {\n            if ('result' in internalResult && internalResult.result.status === status) {\n              errors = errors.concat(internalResult.result.errors || []);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return errors;\n};\n","import {\n  BlockResponse,\n  OperationContentsAndResult,\n  OperationContentsAndResultReveal,\n} from '@taquito/rpc';\nimport { defer, EMPTY, from, of, ReplaySubject, timer } from 'rxjs';\nimport {\n  catchError,\n  filter,\n  first,\n  map,\n  mapTo,\n  shareReplay,\n  switchMap,\n  switchMapTo,\n  tap,\n} from 'rxjs/operators';\nimport { Context } from '../context';\nimport { ForgedBytes, hasMetadataWithResult } from './types';\nimport { validateOperation, ValidationResult, InvalidOperationHashError } from '@taquito/utils';\n\ninterface PollingConfig {\n  timeout: number;\n  interval: number;\n}\n\n/**\n * @description Utility class to interact with Tezos operations\n */\nexport class Operation {\n  private _pollingConfig$ = new ReplaySubject<PollingConfig>(1);\n\n  private _currentHeadPromise: Promise<BlockResponse> | undefined = undefined;\n\n  // Caching the current head for one second\n  private currentHead$ = defer(() => {\n    if (!this._currentHeadPromise) {\n      this._currentHeadPromise = this.context.rpc.getBlock();\n      timer(1000)\n        .pipe(first())\n        .subscribe(() => {\n          this._currentHeadPromise = undefined;\n        });\n    }\n    return from(this._currentHeadPromise);\n  });\n\n  // Polling observable that emit until timeout is reached\n  private polling$ = defer(() =>\n    this._pollingConfig$.pipe(\n      tap(({ timeout, interval }) => {\n        if (timeout <= 0) {\n          throw new Error('Timeout must be more than 0');\n        }\n\n        if (interval <= 0) {\n          throw new Error('Interval must be more than 0');\n        }\n      }),\n      map((config) => ({\n        ...config,\n        timeoutAt: Math.ceil(config.timeout / config.interval) + 1,\n        count: 0,\n      })),\n      switchMap((config) => timer(0, config.interval * 1000).pipe(mapTo(config))),\n      tap((config) => {\n        config.count++;\n        if (config.count > config.timeoutAt) {\n          throw new Error(`Confirmation polling timed out`);\n        }\n      })\n    )\n  );\n\n  // Observable that emit once operation is seen in a block\n  private confirmed$ = this.polling$.pipe(\n    switchMapTo(this.currentHead$),\n    map((head) => {\n      for (let i = 3; i >= 0; i--) {\n        head.operations[i].forEach((op) => {\n          if (op.hash === this.hash) {\n            this._foundAt = head.header.level;\n          }\n        });\n      }\n\n      if (head.header.level - this._foundAt >= 0) {\n        return this._foundAt;\n      }\n    }),\n    filter((x) => x !== undefined),\n    first(),\n    shareReplay()\n  );\n\n  protected _foundAt = Number.POSITIVE_INFINITY;\n  get includedInBlock() {\n    return this._foundAt;\n  }\n  /**\n   *\n   * @param hash Operation hash\n   * @param raw Raw operation that was injected\n   * @param context Taquito context allowing access to rpc and signer\n   */\n  constructor(\n    public readonly hash: string,\n    public readonly raw: ForgedBytes,\n    public readonly results: OperationContentsAndResult[],\n    protected readonly context: Context\n  ) {\n    if (validateOperation(this.hash) !== ValidationResult.VALID) {\n      throw new InvalidOperationHashError(`Invalid Operation Hash: ${this.hash}`);\n    }\n\n    this.confirmed$.pipe(first(),\n      catchError(() => {\n        return of(EMPTY)\n      })\n    ).subscribe();\n  }\n\n  get revealOperation() {\n    return (\n      Array.isArray(this.results) &&\n      (this.results.find((op) => op.kind === 'reveal') as\n        | OperationContentsAndResultReveal\n        | undefined)\n    );\n  }\n\n  public get revealStatus() {\n    if (this.revealOperation) {\n      return this.revealOperation.metadata.operation_result.status;\n    } else {\n      return 'unknown';\n    }\n  }\n\n  public get status() {\n    return (\n      this.results.map((result) => {\n        if (hasMetadataWithResult(result)) {\n          return result.metadata.operation_result.status;\n        } else {\n          return 'unknown';\n        }\n      })[0] || 'unknown'\n    );\n  }\n\n  /**\n   *\n   * @param confirmations [0] Number of confirmation to wait for\n   * @param interval [10] Polling interval\n   * @param timeout [180] Timeout\n   */\n  async confirmation(confirmations?: number, interval?: number, timeout?: number) {\n    if (typeof confirmations !== 'undefined' && confirmations < 1) {\n      throw new Error('Confirmation count must be at least 1');\n    }\n\n    const confirmationPollingIntervalSecond =\n      this.context.config.confirmationPollingIntervalSecond !== undefined\n        ? this.context.config.confirmationPollingIntervalSecond\n        : await this.context.getConfirmationPollingInterval();\n\n    const { defaultConfirmationCount, confirmationPollingTimeoutSecond } = this.context.config;\n    this._pollingConfig$.next({\n      interval: interval || confirmationPollingIntervalSecond,\n      timeout: timeout || confirmationPollingTimeoutSecond,\n    } as Required<PollingConfig>);\n\n    const conf = confirmations !== undefined ? confirmations : defaultConfirmationCount;\n\n    return new Promise<number>((resolve, reject) => {\n      this.confirmed$\n        .pipe(\n          switchMap(() => this.polling$),\n          switchMap(() => this.currentHead$),\n          filter((head) => head.header.level - this._foundAt >= conf - 1),\n          first()\n        )\n        .subscribe((_) => {\n          resolve(this._foundAt + (conf - 1));\n        }, reject);\n    });\n  }\n}\n","import { OperationContentsAndResult } from '@taquito/rpc';\nimport { BATCH_KINDS } from '../batch/rpc-batch-provider';\nimport { Context } from '../context';\nimport { flattenErrors, flattenOperationResult } from './operation-errors';\nimport { Operation } from './operations';\nimport {\n  FeeConsumingOperation,\n  ForgedBytes,\n  GasConsumingOperation,\n  RPCOperation,\n  StorageConsumingOperation,\n  hasMetadataWithResult,\n} from './types';\n\nexport class BatchOperation\n  extends Operation\n  implements GasConsumingOperation, StorageConsumingOperation, FeeConsumingOperation\n{\n  constructor(\n    hash: string,\n    private readonly params: RPCOperation[],\n    public readonly source: string,\n    raw: ForgedBytes,\n    results: OperationContentsAndResult[],\n    context: Context\n  ) {\n    super(hash, raw, results, context);\n  }\n\n  private sumProp(arr: any[], prop: string) {\n    return arr.reduce((prev, current) => {\n      return prop in current ? Number(current[prop]) + prev : prev;\n    }, 0);\n  }\n\n  public get status() {\n    return (\n      this.results\n        .filter((result) => BATCH_KINDS.indexOf(result.kind) !== -1)\n        .map((result) => {\n          if (hasMetadataWithResult(result)) {\n            return result.metadata.operation_result.status;\n          } else {\n            return 'unknown';\n          }\n        })[0] || 'unknown'\n    );\n  }\n\n  get fee() {\n    return this.sumProp(this.params, 'fee');\n  }\n\n  get gasLimit() {\n    return this.sumProp(this.params, 'gas_limit');\n  }\n\n  get storageLimit() {\n    return this.sumProp(this.params, 'storage_limit');\n  }\n\n  get consumedGas() {\n    return String(this.sumProp(flattenOperationResult({ contents: this.results }), 'consumed_gas'));\n  }\n\n  get storageDiff() {\n    return String(\n      this.sumProp(flattenOperationResult({ contents: this.results }), 'paid_storage_size_diff')\n    );\n  }\n\n  get errors() {\n    return flattenErrors({ contents: this.results });\n  }\n}\n","import {\n  BlockHeaderResponse,\n  OperationContents,\n  OperationContentsAndResult,\n  OpKind,\n  RpcClientInterface,\n  RPCRunOperationParam,\n} from '@taquito/rpc';\nimport { Protocols } from '../constants';\nimport { Context } from '../context';\nimport { Estimate } from '../contract/estimate';\nimport { flattenErrors, TezosOperationError, TezosPreapplyFailureError } from './operation-errors';\nimport {\n  ForgedBytes,\n  isOpRequireReveal,\n  ParamsWithKind,\n  PrepareOperationParams,\n  RPCOperation,\n  RPCOpWithFee,\n  RPCOpWithSource,\n} from './types';\n\nexport interface PreparedOperation {\n  opOb: {\n    branch: string;\n    contents: OperationContents[];\n    protocol: string;\n  };\n  counter: number;\n}\n\nexport abstract class OperationEmitter {\n  get rpc(): RpcClientInterface {\n    return this.context.rpc;\n  }\n\n  get signer() {\n    return this.context.signer;\n  }\n\n  constructor(protected context: Context) {}\n\n  protected async isRevealOpNeeded(op: RPCOperation[] | ParamsWithKind[], pkh: string) {\n    return !(await this.isAccountRevealRequired(pkh)) || !this.isRevealRequiredForOpType(op)\n      ? false\n      : true;\n  }\n\n  protected async isAccountRevealRequired(publicKeyHash: string) {\n    const manager = await this.rpc.getManagerKey(publicKeyHash);\n    const haveManager = manager && typeof manager === 'object' ? !!manager.key : !!manager;\n    return !haveManager;\n  }\n\n  protected isRevealRequiredForOpType(op: RPCOperation[] | ParamsWithKind[]) {\n    let opRequireReveal = false;\n    for (const operation of op) {\n      if (isOpRequireReveal(operation)) {\n        opRequireReveal = true;\n      }\n    }\n    return opRequireReveal;\n  }\n\n  // Originally from sotez (Copyright (c) 2018 Andrew Kishino)\n  protected async prepareOperation({\n    operation,\n    source,\n  }: PrepareOperationParams): Promise<PreparedOperation> {\n    const counters: { [key: string]: number } = {};\n    let ops: RPCOperation[] = [];\n\n    const blockHeaderPromise = this.rpc.getBlockHeader({ block: 'head~2' });\n    const blockMetaPromise = this.rpc.getBlockMetadata();\n\n    if (Array.isArray(operation)) {\n      ops = [...operation];\n    } else {\n      ops = [operation];\n    }\n\n    // Implicit account who emit the operation\n    const publicKeyHash = await this.signer.publicKeyHash();\n    let counterPromise: Promise<string | undefined> = Promise.resolve(undefined);\n\n    for (let i = 0; i < ops.length; i++) {\n      if (isOpRequireReveal(ops[i]) || ops[i].kind === 'reveal') {\n        const { counter } = await this.rpc.getContract(publicKeyHash);\n        counterPromise = Promise.resolve(counter);\n        break;\n      }\n    }\n\n    const [header, metadata, headCounter] = await Promise.all([\n      blockHeaderPromise,\n      blockMetaPromise,\n      counterPromise,\n    ]);\n\n    if (!header) {\n      throw new Error('Unable to fetch latest block header');\n    }\n\n    if (!metadata) {\n      throw new Error('Unable to fetch latest metadata');\n    }\n\n    const head = header;\n\n    const counter = parseInt(headCounter || '0', 10);\n    if (!counters[publicKeyHash] || counters[publicKeyHash] < counter) {\n      counters[publicKeyHash] = counter;\n    }\n\n    const getFee = (op: RPCOpWithFee) => {\n      const opCounter = ++counters[publicKeyHash];\n      return {\n        counter: `${opCounter}`,\n        fee: typeof op.fee === 'undefined' ? '0' : `${op.fee}`,\n        gas_limit: typeof op.gas_limit === 'undefined' ? '0' : `${op.gas_limit}`,\n        storage_limit: typeof op.storage_limit === 'undefined' ? '0' : `${op.storage_limit}`,\n      };\n    };\n\n    const getSource = (op: RPCOpWithSource) => {\n      return {\n        source: typeof op.source === 'undefined' ? source || publicKeyHash : op.source,\n      };\n    };\n\n    const constructOps = (cOps: RPCOperation[]): OperationContents[] =>\n      cOps.map((op: RPCOperation) => {\n        switch (op.kind) {\n          case OpKind.ACTIVATION:\n            return {\n              ...op,\n            };\n          case OpKind.REVEAL:\n            return {\n              ...op,\n              ...getSource(op),\n              ...getFee(op),\n            };\n          case OpKind.ORIGINATION:\n            return {\n              ...op,\n              balance: typeof op.balance !== 'undefined' ? `${op.balance}` : '0',\n              ...getSource(op),\n              ...getFee(op),\n            };\n          case OpKind.TRANSACTION: {\n            const cops = {\n              ...op,\n              amount: typeof op.amount !== 'undefined' ? `${op.amount}` : '0',\n              ...getSource(op),\n              ...getFee(op),\n            };\n            if (cops.source.toLowerCase().startsWith('kt1')) {\n              throw new Error(\n                `KT1 addresses are not supported as source since ${Protocols.PsBabyM1}`\n              );\n            }\n            return cops;\n          }\n          case OpKind.DELEGATION:\n            return {\n              ...op,\n              ...getSource(op),\n              ...getFee(op),\n            };\n          case OpKind.REGISTER_GLOBAL_CONSTANT:\n            return {\n              ...op,\n              ...getSource(op),\n              ...getFee(op),\n            };\n          default:\n            throw new Error('Unsupported operation');\n        }\n      });\n\n    const branch = head.hash;\n    const contents = constructOps(ops);\n    const protocol = metadata.next_protocol;\n\n    return {\n      opOb: {\n        branch,\n        contents,\n        protocol,\n      },\n      counter,\n    };\n  }\n\n  protected async forge({ opOb: { branch, contents, protocol }, counter }: PreparedOperation) {\n    const forgedBytes = await this.context.forger.forge({ branch, contents });\n\n    return {\n      opbytes: forgedBytes,\n      opOb: {\n        branch,\n        contents,\n        protocol,\n      },\n      counter,\n    };\n  }\n\n  protected async simulate(op: RPCRunOperationParam) {\n    return {\n      opResponse: await this.rpc.runOperation(op),\n      op,\n      context: this.context.clone(),\n    };\n  }\n\n  protected async estimate<T extends { fee?: number; gasLimit?: number; storageLimit?: number }>(\n    { fee, gasLimit, storageLimit, ...rest }: T,\n    estimator: (param: T) => Promise<Estimate>\n  ) {\n    let calculatedFee = fee;\n    let calculatedGas = gasLimit;\n    let calculatedStorage = storageLimit;\n\n    if (fee === undefined || gasLimit === undefined || storageLimit === undefined) {\n      const estimation = await estimator({ fee, gasLimit, storageLimit, ...(rest as any) });\n\n      if (calculatedFee === undefined) {\n        calculatedFee = estimation.suggestedFeeMutez;\n      }\n\n      if (calculatedGas === undefined) {\n        calculatedGas = estimation.gasLimit;\n      }\n\n      if (calculatedStorage === undefined) {\n        calculatedStorage = estimation.storageLimit;\n      }\n    }\n\n    return {\n      fee: calculatedFee,\n      gasLimit: calculatedGas,\n      storageLimit: calculatedStorage,\n    };\n  }\n\n  protected async signAndInject(forgedBytes: ForgedBytes) {\n    const signed = await this.signer.sign(forgedBytes.opbytes, new Uint8Array([3]));\n    forgedBytes.opbytes = signed.sbytes;\n    forgedBytes.opOb.signature = signed.prefixSig;\n\n    const opResponse: OperationContentsAndResult[] = [];\n    const results = await this.rpc.preapplyOperations([forgedBytes.opOb]);\n\n    if (!Array.isArray(results)) {\n      throw new TezosPreapplyFailureError(results);\n    }\n\n    for (let i = 0; i < results.length; i++) {\n      for (let j = 0; j < results[i].contents.length; j++) {\n        opResponse.push(results[i].contents[j]);\n      }\n    }\n\n    const errors = flattenErrors(results);\n\n    if (errors.length) {\n      throw new TezosOperationError(errors);\n    }\n\n    return {\n      hash: await this.context.injector.inject(forgedBytes.opbytes),\n      forgedBytes,\n      opResponse,\n      context: this.context.clone(),\n    };\n  }\n}\n","import { Context } from '../context';\nimport { ContractStorageType, DefaultContractType } from '../contract/contract';\nimport { ContractMethod } from '../contract/contract-methods/contract-method-flat-param';\nimport { EstimationProvider, ContractProvider } from '../contract/interface';\nimport {\n  createOriginationOperation,\n  createRegisterGlobalConstantOperation,\n  createRevealOperation,\n  createSetDelegateOperation,\n  createTransferOperation,\n} from '../contract/prepare';\nimport { BatchOperation } from '../operations/batch-operation';\nimport { OperationEmitter } from '../operations/operation-emitter';\nimport {\n  ActivationParams,\n  DelegateParams,\n  OriginateParams,\n  RPCOperation,\n  TransferParams,\n  ParamsWithKind,\n  isOpWithFee,\n  withKind,\n  RevealParams,\n  RegisterGlobalConstantParams,\n} from '../operations/types';\nimport { OpKind } from '@taquito/rpc';\nimport { ContractMethodObject } from '../contract/contract-methods/contract-method-object-param';\nimport { \n  validateAddress, \n  validateKeyHash, \n  InvalidAddressError, \n  InvalidKeyHashError, \n  ValidationResult \n} from '@taquito/utils'\n\nexport const BATCH_KINDS = [\n  OpKind.ACTIVATION,\n  OpKind.ORIGINATION,\n  OpKind.TRANSACTION,\n  OpKind.DELEGATION,\n];\nexport type BatchKinds =\n  | OpKind.ACTIVATION\n  | OpKind.ORIGINATION\n  | OpKind.TRANSACTION\n  | OpKind.DELEGATION;\n\nexport class OperationBatch extends OperationEmitter {\n  private operations: ParamsWithKind[] = [];\n\n  constructor(context: Context, private estimator: EstimationProvider) {\n    super(context);\n  }\n\n  /**\n   *\n   * @description Add a transaction operation to the batch\n   *\n   * @param params Transfer operation parameter\n   */\n  withTransfer(params: TransferParams) {\n    if (validateAddress(params.to) !== ValidationResult.VALID) {\n      throw new InvalidAddressError(`Invalid 'to' address: ${params.to}`)\n    }\n    this.operations.push({ kind: OpKind.TRANSACTION, ...params });\n    return this;\n  }\n\n  /**\n   *\n   * @description Add a transaction operation to the batch\n   *\n   * @param params Transfer operation parameter\n   */\n  withContractCall(params: ContractMethod<ContractProvider> | ContractMethodObject<ContractProvider>) {\n    return this.withTransfer(params.toTransferParams());\n  }\n\n  /**\n   *\n   * @description Add a delegation operation to the batch\n   *\n   * @param params Delegation operation parameter\n   */\n  withDelegation(params: DelegateParams) {\n    if (params.source && validateAddress(params.source) !== ValidationResult.VALID) {\n      throw new InvalidAddressError(`Invalid source address: ${params.source}`);\n    }\n    if (params.delegate && validateAddress(params.delegate) !== ValidationResult.VALID) {\n      throw new InvalidAddressError(`Invalid delegate address: ${params.delegate}`);\n    }\n    this.operations.push({ kind: OpKind.DELEGATION, ...params });\n    return this;\n  }\n\n  /**\n   *\n   * @description Add an activation operation to the batch\n   *\n   * @param params Activation operation parameter\n   */\n  withActivation({ pkh, secret }: ActivationParams) {\n    if (validateKeyHash(pkh) !== ValidationResult.VALID) {\n      throw new InvalidKeyHashError(`Invalid Key Hash: ${pkh}`);\n    }\n    this.operations.push({ kind: OpKind.ACTIVATION, pkh, secret });\n    return this;\n  }\n\n  /**\n   *\n   * @description Add an origination operation to the batch\n   *\n   * @param params Origination operation parameter\n   */\n  withOrigination<TContract extends DefaultContractType = DefaultContractType>(params: OriginateParams<ContractStorageType<TContract>>) {\n    this.operations.push({ kind: OpKind.ORIGINATION, ...params });\n    return this;\n  }\n\n  /**\n   *\n   * @description Add an operation to register a global constant to the batch\n   *\n   * @param params RegisterGlobalConstant operation parameter\n   */\n   withRegisterGlobalConstant(params: RegisterGlobalConstantParams) {\n    this.operations.push({ kind: OpKind.REGISTER_GLOBAL_CONSTANT, ...params });\n    return this;\n  }\n\n  private async getRPCOp(param: ParamsWithKind) {\n    switch (param.kind) {\n      case OpKind.TRANSACTION:\n        return createTransferOperation({\n          ...param,\n        });\n      case OpKind.ORIGINATION:\n        return createOriginationOperation(\n          await this.context.parser.prepareCodeOrigination({\n          ...param,\n        }));\n      case OpKind.DELEGATION:\n        return createSetDelegateOperation({\n          ...param,\n        });\n      case OpKind.ACTIVATION:\n        return {\n          ...param,\n        };\n      case OpKind.REGISTER_GLOBAL_CONSTANT:\n        return createRegisterGlobalConstantOperation({\n          ...param,\n        });\n      default:\n        throw new Error(`Unsupported operation kind: ${(param as any).kind}`);\n    }\n  }\n\n  /**\n   *\n   * @description Add a group operation to the batch. Operation will be applied in the order they are in the params array\n   *\n   * @param params Operations parameter\n   */\n  with(params: ParamsWithKind[]) {\n    for (const param of params) {\n      switch (param.kind) {\n        case OpKind.TRANSACTION:\n          this.withTransfer(param);\n          break;\n        case OpKind.ORIGINATION:\n          this.withOrigination(param);\n          break;\n        case OpKind.DELEGATION:\n          this.withDelegation(param);\n          break;\n        case OpKind.ACTIVATION:\n          this.withActivation(param);\n          break;\n        case OpKind.REGISTER_GLOBAL_CONSTANT:\n          this.withRegisterGlobalConstant(param);\n          break;\n        default:\n          throw new Error(`Unsupported operation kind: ${(param as any).kind}`);\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   *\n   * @description Forge and Inject the operation batch\n   *\n   * @param params Optionally specify the source of the operation\n   */\n  async send(params?: { source?: string }) {\n    const publicKeyHash = await this.signer.publicKeyHash();\n    const publicKey = await this.signer.publicKey();\n    const estimates = await this.estimator.batch(this.operations);\n\n    const revealNeeded = await this.isRevealOpNeeded(this.operations, publicKeyHash);\n    let i = revealNeeded ? 1 : 0;\n\n    const ops: RPCOperation[] = [];\n    for (const op of this.operations) {\n      if (isOpWithFee(op)) {\n        const estimated = await this.estimate(op, async () => estimates[i]);\n        ops.push(await this.getRPCOp({ ...op, ...estimated }));\n      } else {\n        ops.push({ ...op });\n      }\n      i++;\n    }\n    if (revealNeeded) {\n      const reveal: withKind<RevealParams, OpKind.REVEAL> = { kind: OpKind.REVEAL }\n      const estimatedReveal = await this.estimate(reveal, async () => estimates[0]);\n      ops.unshift(await createRevealOperation({ ...estimatedReveal }, publicKeyHash, publicKey))\n    }\n\n    const source = (params && params.source) || publicKeyHash;\n    const prepared = await this.prepareOperation({\n      operation: ops,\n      source,\n    });\n    const opBytes = await this.forge(prepared);\n    const { hash, context, forgedBytes, opResponse } = await this.signAndInject(opBytes);\n    return new BatchOperation(hash, ops, source, forgedBytes, opResponse, context);\n  }\n}\n\nexport class RPCBatchProvider {\n  constructor(private context: Context, private estimator: EstimationProvider) { }\n\n  /***\n   *\n   * @description Batch a group of operation together. Operations will be applied in the order in which they are added to the batch\n   *\n   * @param params List of operation to batch together\n   */\n  batch(params?: ParamsWithKind[]) {\n    const batch = new OperationBatch(this.context, this.estimator);\n\n    if (Array.isArray(params)) {\n      batch.with(params);\n    }\n\n    return batch;\n  }\n}\n","import { OperationContentsAndResult } from '@taquito/rpc';\nimport BigNumber from 'bignumber.js';\nimport { flattenOperationResult } from '../operations/operation-errors';\n\nexport interface Receipt {\n  totalFee: BigNumber;\n  totalGas: BigNumber;\n  totalStorage: BigNumber;\n  totalAllocationBurn: BigNumber;\n  totalOriginationBurn: BigNumber;\n  totalPaidStorageDiff: BigNumber;\n  totalStorageBurn: BigNumber;\n}\n\nexport const receiptFromOperation = (\n  op: OperationContentsAndResult[],\n  { ALLOCATION_BURN, ORIGINATION_BURN } = {\n    ALLOCATION_BURN: 257,\n    ORIGINATION_BURN: 257,\n  }\n): Receipt => {\n  const operationResults = flattenOperationResult({ contents: op });\n  let totalGas = new BigNumber(0);\n  let totalStorage = new BigNumber(0);\n  let totalFee = new BigNumber(0);\n  let totalOriginationBurn = new BigNumber(0);\n  let totalAllocationBurn = new BigNumber(0);\n  let totalPaidStorageDiff = new BigNumber(0);\n  operationResults.forEach(result => {\n    totalFee = totalFee.plus(result.fee || 0);\n    totalOriginationBurn = totalOriginationBurn.plus(\n      Array.isArray(result.originated_contracts)\n        ? result.originated_contracts.length * ORIGINATION_BURN\n        : 0\n    );\n    totalAllocationBurn = totalAllocationBurn.plus(\n      'allocated_destination_contract' in result ? ALLOCATION_BURN : 0\n    );\n    totalGas = totalGas.plus(result.consumed_gas || 0);\n    totalPaidStorageDiff = totalPaidStorageDiff.plus(\n      'paid_storage_size_diff' in result ? Number(result.paid_storage_size_diff) || 0 : 0\n    );\n  });\n\n  totalStorage = totalStorage\n    .plus(totalAllocationBurn)\n    .plus(totalOriginationBurn)\n    .plus(totalPaidStorageDiff);\n\n  return {\n    totalFee,\n    totalGas,\n    totalStorage,\n    totalAllocationBurn,\n    totalOriginationBurn,\n    totalPaidStorageDiff,\n    totalStorageBurn: new BigNumber(totalStorage.multipliedBy(1000)),\n  };\n};\n","import { BlockResponse, OperationContentsAndResult, OperationResultStatusEnum } from '@taquito/rpc';\nimport { combineLatest, from, Observable, of, ReplaySubject } from 'rxjs';\nimport {\n  catchError,\n  distinctUntilChanged,\n  filter,\n  first,\n  map,\n  shareReplay,\n  takeWhile,\n  tap,\n} from 'rxjs/operators';\nimport { Context } from '../context';\nimport { Receipt, receiptFromOperation } from './receipt';\nimport { validateOperation, ValidationResult, InvalidOperationHashError } from '@taquito/utils';\n\nexport type OperationStatus = 'pending' | 'unknown' | OperationResultStatusEnum;\n\nexport class MissedBlockDuringConfirmationError extends Error {\n  name = 'MissedBlockDuringConfirmationError';\n\n  constructor() {\n    super(\n      'Taquito missed a block while waiting for operation confirmation and was not able to find the operation'\n    );\n  }\n}\n\nconst MAX_BRANCH_ANCESTORS = 60;\n\n/**\n * @description WalletOperation allows to monitor operation inclusion on chains and surface information related to the operation\n */\nexport class WalletOperation {\n  protected _operationResult = new ReplaySubject<OperationContentsAndResult[]>(1);\n  protected _includedInBlock = new ReplaySubject<BlockResponse>(1);\n  protected _included = false;\n\n  private lastHead: BlockResponse | undefined;\n  protected newHead$: Observable<BlockResponse> = this._newHead$.pipe(\n    tap((newHead) => {\n      if (\n        !this._included &&\n        this.lastHead &&\n        newHead.header.level - this.lastHead.header.level > 1\n      ) {\n        throw new MissedBlockDuringConfirmationError();\n      }\n\n      this.lastHead = newHead;\n    }),\n    shareReplay({ bufferSize: 1, refCount: true })\n  );\n\n  // Observable that emit once operation is seen in a block\n  private confirmed$ = this.newHead$.pipe(\n    map((head) => {\n      for (const opGroup of head.operations) {\n        for (const op of opGroup) {\n          if (op.hash === this.opHash) {\n            this._included = true;\n            this._includedInBlock.next(head);\n            this._operationResult.next(op.contents as OperationContentsAndResult[]);\n\n            // Return the block where the operation was found\n            return head;\n          }\n        }\n      }\n    }),\n    filter<BlockResponse | undefined, BlockResponse>((x): x is BlockResponse => {\n      return typeof x !== 'undefined';\n    }),\n    first(),\n    shareReplay({ bufferSize: 1, refCount: true })\n  );\n\n  async operationResults() {\n    return this._operationResult.pipe(first()).toPromise();\n  }\n\n  /**\n   * @description Receipt expose the total amount of tezos token burn and spent on fees\n   * The promise returned by receipt will resolve only once the transaction is included\n   */\n  async receipt(): Promise<Receipt> {\n    return receiptFromOperation(await this.operationResults());\n  }\n\n  /**\n   *\n   * @param opHash Operation hash\n   * @param raw Raw operation that was injected\n   * @param context Taquito context allowing access to rpc and signer\n   */\n  constructor(\n    public readonly opHash: string,\n    protected readonly context: Context,\n    private _newHead$: Observable<BlockResponse>\n  ) {\n    if (validateOperation(this.opHash) !== ValidationResult.VALID) {\n      throw new InvalidOperationHashError(`Invalid operation hash: ${this.opHash}`);\n    }\n    this.confirmed$\n      .pipe(\n        first(),\n        catchError(() => of(undefined))\n      )\n      .subscribe();\n  }\n\n  async getCurrentConfirmation() {\n    if (!this._included) {\n      return 0;\n    }\n\n    return combineLatest([this._includedInBlock, from(this.context.rpc.getBlock())])\n      .pipe(\n        map(([foundAtBlock, head]) => {\n          return head.header.level - foundAtBlock.header.level + 1;\n        }),\n        first()\n      )\n      .toPromise();\n  }\n\n  async isInCurrentBranch(tipBlockIdentifier = 'head') {\n    // By default it is assumed that the operation is in the current branch\n    if (!this._included) {\n      return true;\n    }\n\n    const tipBlockHeader = await this.context.rpc.getBlockHeader({ block: tipBlockIdentifier });\n    const inclusionBlock = await this._includedInBlock.pipe(first()).toPromise();\n\n    const levelDiff = tipBlockHeader.level - inclusionBlock.header.level;\n\n    // Block produced before the operation is included are assumed to be part of the current branch\n    if (levelDiff <= 0) {\n      return true;\n    }\n\n    const tipBlockLevel = Math.min(\n      inclusionBlock.header.level + levelDiff,\n      inclusionBlock.header.level + MAX_BRANCH_ANCESTORS\n    );\n\n    const blocks = new Set(await this.context.rpc.getLiveBlocks({ block: String(tipBlockLevel) }));\n    return blocks.has(inclusionBlock.hash);\n  }\n\n  confirmationObservable(confirmations?: number) {\n    if (typeof confirmations !== 'undefined' && confirmations < 1) {\n      throw new Error('Confirmation count must be at least 1');\n    }\n\n    const { defaultConfirmationCount } = this.context.config;\n\n    const conf = confirmations !== undefined ? confirmations : defaultConfirmationCount;\n\n    if (conf === undefined) {\n      throw new Error('Default confirmation count can not be undefined!');\n    }\n\n    return combineLatest([this._includedInBlock, this.newHead$]).pipe(\n      distinctUntilChanged(([, previousHead], [, newHead]) => {\n        return previousHead.hash === newHead.hash;\n      }),\n      map(([foundAtBlock, head]) => {\n        return {\n          block: head,\n          expectedConfirmation: conf,\n          currentConfirmation: head.header.level - foundAtBlock.header.level + 1,\n          completed: head.header.level - foundAtBlock.header.level >= conf - 1,\n          isInCurrentBranch: () => this.isInCurrentBranch(head.hash),\n        };\n      }),\n      takeWhile(({ completed }) => !completed, true)\n    );\n  }\n\n  /**\n   *\n   * @param confirmations [0] Number of confirmation to wait for\n   */\n  confirmation(confirmations?: number) {\n    return this.confirmationObservable(confirmations).toPromise();\n  }\n}\n","import { BlockResponse, OperationContentsAndResultReveal, OpKind } from '@taquito/rpc';\nimport { Observable } from 'rxjs';\nimport { BATCH_KINDS } from '../batch/rpc-batch-provider';\nimport { Context } from '../context';\nimport { hasMetadataWithResult } from '../operations/types';\nimport { WalletOperation, OperationStatus } from './operation';\n\nexport class BatchWalletOperation extends WalletOperation {\n  constructor(\n    public readonly opHash: string,\n    protected readonly context: Context,\n    newHead$: Observable<BlockResponse>\n  ) {\n    super(opHash, context, newHead$);\n  }\n\n  public async revealOperation() {\n    const operationResult = await this.operationResults();\n    return operationResult.find(x => x.kind === OpKind.REVEAL) as\n      | OperationContentsAndResultReveal\n      | undefined;\n  }\n\n  async status(): Promise<OperationStatus> {\n    if (!this._included) {\n      return 'pending';\n    }\n\n    const op = await this.operationResults();\n\n    return (\n      op\n        .filter((result) => BATCH_KINDS.indexOf(result.kind) !== -1)\n        .map((result) => {\n          if (hasMetadataWithResult(result)) {\n            return result.metadata.operation_result.status;\n          } else {\n            return 'unknown';\n          }\n        })[0] || 'unknown'\n    );\n  }\n}\n","import { BlockResponse, OperationContentsAndResultReveal, OpKind } from '@taquito/rpc';\nimport { Observable } from 'rxjs';\nimport { Context } from '../context';\nimport { WalletOperation, OperationStatus } from './operation';\n\nexport class DelegationWalletOperation extends WalletOperation {\n  constructor(\n    public readonly opHash: string,\n    protected readonly context: Context,\n    newHead$: Observable<BlockResponse>\n  ) {\n    super(opHash, context, newHead$);\n  }\n\n  public async revealOperation() {\n    const operationResult = await this.operationResults();\n    return operationResult.find(x => x.kind === OpKind.REVEAL) as\n      | OperationContentsAndResultReveal\n      | undefined;\n  }\n\n  public async delegationOperation() {\n    const operationResult = await this.operationResults();\n    return operationResult.find(x => x.kind === OpKind.DELEGATION) as\n      | OperationContentsAndResultReveal\n      | undefined;\n  }\n\n  public async status(): Promise<OperationStatus> {\n    if (!this._included) {\n      return 'pending';\n    }\n\n    const op = await this.delegationOperation();\n    if (!op) {\n      return 'unknown';\n    }\n\n    return op.metadata.operation_result.status;\n  }\n}\n","import {\n  BlockResponse,\n  OperationContentsAndResultOrigination,\n  OperationContentsAndResultReveal,\n  OpKind,\n} from '@taquito/rpc';\nimport { Observable } from 'rxjs';\nimport { Context } from '../context';\nimport { DefaultWalletType } from '../contract/contract';\nimport { findWithKind } from '../operations/types';\nimport { WalletOperation, OperationStatus } from './operation';\n\nexport class OriginationWalletOperation<TWallet extends DefaultWalletType = DefaultWalletType> extends WalletOperation {\n  constructor(\n    public readonly opHash: string,\n    protected readonly context: Context,\n    newHead$: Observable<BlockResponse>\n  ) {\n    super(opHash, context, newHead$);\n  }\n\n  public async originationOperation() {\n    const operationResult = await this.operationResults();\n    return findWithKind(operationResult, OpKind.ORIGINATION) as\n      | OperationContentsAndResultOrigination\n      | undefined;\n  }\n\n  public async revealOperation() {\n    const operationResult = await this.operationResults();\n    return findWithKind(operationResult, OpKind.REVEAL) as\n      | OperationContentsAndResultReveal\n      | undefined;\n  }\n\n  public async status(): Promise<OperationStatus> {\n    if (!this._included) {\n      return 'pending';\n    }\n\n    const op = await this.originationOperation();\n    if (!op) {\n      return 'unknown';\n    }\n\n    return op.metadata.operation_result.status;\n  }\n\n  public async contract() {\n    const op = await this.originationOperation();\n    const address = (op?.metadata.operation_result.originated_contracts || [])[0];\n    return this.context.wallet.at<TWallet>(address);\n  }\n}\n","import { WalletOperation, OperationStatus } from './operation';\nimport { Context } from '../context';\nimport { Observable } from 'rxjs';\nimport {\n  BlockResponse,\n  OpKind,\n  OperationContentsAndResultReveal,\n  OperationContentsAndResultTransaction,\n} from '@taquito/rpc';\n\nexport class TransactionWalletOperation extends WalletOperation {\n  constructor(\n    public readonly opHash: string,\n    protected readonly context: Context,\n    newHead$: Observable<BlockResponse>\n  ) {\n    super(opHash, context, newHead$);\n  }\n\n  public async revealOperation() {\n    const operationResult = await this.operationResults();\n    return operationResult.find(x => x.kind === OpKind.REVEAL) as\n      | OperationContentsAndResultReveal\n      | undefined;\n  }\n\n  public async transactionOperation() {\n    const operationResult = await this.operationResults();\n    return operationResult.find(x => x.kind === OpKind.TRANSACTION) as\n      | OperationContentsAndResultTransaction\n      | undefined;\n  }\n\n  public async status(): Promise<OperationStatus> {\n    if (!this._included) {\n      return 'pending';\n    }\n\n    const op = await this.transactionOperation();\n    if (!op) {\n      return 'unknown';\n    }\n\n    return op.metadata.operation_result.status;\n  }\n}\n","import { BlockResponse } from '@taquito/rpc';\nimport {\n  concat,\n  defer,\n  from,\n  MonoTypeOperatorFunction,\n  Observable,\n  of,\n  range,\n  ReplaySubject,\n  SchedulerLike,\n  throwError,\n  timer,\n} from 'rxjs';\nimport {\n  concatMap,\n  distinctUntilKeyChanged,\n  first,\n  shareReplay,\n  startWith,\n  switchMap,\n  timeoutWith,\n} from 'rxjs/operators';\nimport { Context } from '../context';\nimport { BatchWalletOperation } from './batch-operation';\nimport { DelegationWalletOperation } from './delegation-operation';\nimport { WalletOperation } from './operation';\nimport { OriginationWalletOperation } from './origination-operation';\nimport { TransactionWalletOperation } from './transaction-operation';\n\nexport const cacheUntil =\n  <T>(cacheUntilObs: Observable<any>): MonoTypeOperatorFunction<T> =>\n  (source) => {\n    let subject: ReplaySubject<T> | null = null;\n\n    return defer(() => {\n      if (!subject) {\n        subject = new ReplaySubject<T>();\n        source.pipe(first()).subscribe(subject);\n        cacheUntilObs.pipe(first()).subscribe(() => {\n          subject = null;\n        });\n      }\n\n      return subject;\n    });\n  };\n\nexport const createNewPollingBasedHeadObservable = (\n  pollingTimer: Observable<number>,\n  sharedHeadOb: Observable<BlockResponse>,\n  context: Context,\n  scheduler?: SchedulerLike\n): Observable<BlockResponse> => {\n  return pollingTimer.pipe(\n    switchMap(() => sharedHeadOb),\n    distinctUntilKeyChanged('hash'),\n    timeoutWith(\n      context.config.confirmationPollingTimeoutSecond * 1000,\n      throwError(new Error('Confirmation polling timed out')),\n      scheduler\n    ),\n    shareReplay({\n      refCount: true,\n      scheduler,\n    })\n  );\n};\n\nexport interface OperationFactoryConfig {\n  blockIdentifier?: string;\n}\n\nexport class OperationFactory {\n  constructor(private context: Context) {}\n\n  // Cache the last block for one second across all operations\n  private sharedHeadObs = defer(() => from(this.context.rpc.getBlock())).pipe(\n    cacheUntil(timer(0, 1000))\n  );\n\n  private async createNewHeadObservable() {\n    const confirmationPollingIntervalSecond =\n      this.context.config.confirmationPollingIntervalSecond !== undefined\n        ? this.context.config.confirmationPollingIntervalSecond\n        : await this.context.getConfirmationPollingInterval();\n    return createNewPollingBasedHeadObservable(\n      timer(0, confirmationPollingIntervalSecond * 1000),\n      this.sharedHeadObs,\n      this.context\n    );\n  }\n\n  private createPastBlockWalker(startBlock: string, count = 1) {\n    return from(this.context.rpc.getBlock({ block: startBlock })).pipe(\n      switchMap((block) => {\n        if (count === 1) {\n          return of(block);\n        }\n\n        return range(block.header.level, count - 1).pipe(\n          startWith(block),\n          concatMap(async (level) => {\n            return this.context.rpc.getBlock({ block: String(level) });\n          })\n        );\n      })\n    );\n  }\n\n  private async createHeadObservableFromConfig({ blockIdentifier }: OperationFactoryConfig) {\n    const observableSequence: Observable<BlockResponse>[] = [];\n\n    if (blockIdentifier) {\n      observableSequence.push(this.createPastBlockWalker(blockIdentifier));\n    }\n\n    observableSequence.push(await this.createNewHeadObservable());\n\n    return concat(...observableSequence);\n  }\n\n  async createOperation(\n    hash: string,\n    config: OperationFactoryConfig = {}\n  ): Promise<WalletOperation> {\n    return new WalletOperation(\n      hash,\n      this.context.clone(),\n      await this.createHeadObservableFromConfig(config)\n    );\n  }\n\n  async createBatchOperation(\n    hash: string,\n    config: OperationFactoryConfig = {}\n  ): Promise<BatchWalletOperation> {\n    return new BatchWalletOperation(\n      hash,\n      this.context.clone(),\n      await this.createHeadObservableFromConfig(config)\n    );\n  }\n\n  async createTransactionOperation(\n    hash: string,\n    config: OperationFactoryConfig = {}\n  ): Promise<TransactionWalletOperation> {\n    return new TransactionWalletOperation(\n      hash,\n      this.context.clone(),\n      await this.createHeadObservableFromConfig(config)\n    );\n  }\n\n  async createDelegationOperation(\n    hash: string,\n    config: OperationFactoryConfig = {}\n  ): Promise<DelegationWalletOperation> {\n    return new DelegationWalletOperation(\n      hash,\n      this.context.clone(),\n      await this.createHeadObservableFromConfig(config)\n    );\n  }\n\n  async createOriginationOperation(\n    hash: string,\n    config: OperationFactoryConfig = {}\n  ): Promise<OriginationWalletOperation> {\n    return new OriginationWalletOperation(\n      hash,\n      this.context.clone(),\n      await this.createHeadObservableFromConfig(config)\n    );\n  }\n}\n","import BigNumber from 'bignumber.js';\nimport { Context } from '../context';\nimport { OperationEmitter } from '../operations/operation-emitter';\nimport { Operation } from '../operations/operations';\nimport { RPCActivateOperation } from '../operations/types';\nimport { TzProvider } from './interface';\nimport { OpKind } from '@taquito/rpc';\nimport { validateAddress, ValidationResult, validateKeyHash, InvalidAddressError, InvalidKeyHashError } from '@taquito/utils';\n\nexport class RpcTzProvider extends OperationEmitter implements TzProvider {\n  constructor(context: Context) {\n    super(context);\n  }\n\n  async getBalance(address: string): Promise<BigNumber> {\n    if (validateAddress(address) !== ValidationResult.VALID) {\n      throw new InvalidAddressError(`Invalid address: ${address}`);\n    }\n    return this.rpc.getBalance(address);\n  }\n\n  async getDelegate(address: string): Promise<string | null> {\n    if (validateAddress(address) !== ValidationResult.VALID) {\n      throw new InvalidAddressError(`Invalid address: ${address}`);\n    }\n    return this.rpc.getDelegate(address);\n  }\n\n  async activate(pkh: string, secret: string) {\n    if (validateKeyHash(pkh) !== ValidationResult.VALID) {\n      throw new InvalidKeyHashError(`Invalid Public Key Hash: ${pkh}`);\n    }\n    const operation: RPCActivateOperation = {\n      kind: OpKind.ACTIVATION,\n      pkh,\n      secret,\n    };\n\n    const prepared = await this.prepareOperation({ operation: [operation], source: pkh });\n    const forgedBytes = await this.forge(prepared);\n    const bytes = `${forgedBytes.opbytes}00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000`;\n    return new Operation(\n      await this.rpc.injectOperation(bytes),\n      { ...forgedBytes, opbytes: bytes },\n      [],\n      this.context.clone()\n    );\n  }\n}\n","const MINIMAL_FEE_MUTEZ = 100;\nconst MINIMAL_FEE_PER_BYTE_MUTEZ = 1;\nconst MINIMAL_FEE_PER_GAS_MUTEZ = 0.1;\n\nconst GAS_BUFFER = 100;\n\nexport interface EstimateProperties {\n  milligasLimit: number,\n  storageLimit: number,\n  opSize: number,\n  minimalFeePerStorageByteMutez: number,\n  baseFeeMutez?: number\n}\n\n/**\n * Examples of use :\n *\n *  Estimate a transfer operation :\n * ```\n * // Assuming that provider and signer are already configured...\n *\n * const amount = 2;\n * const address = 'tz1h3rQ8wBxFd8L9B3d7Jhaawu6Z568XU3xY';\n *\n * // Estimate gasLimit, storageLimit and fees for a transfer operation\n * const est = await Tezos.estimate.transfer({ to: address, amount: amount })\n * console.log(est.burnFeeMutez, est.gasLimit, est.minimalFeeMutez, est.storageLimit,\n *  est.suggestedFeeMutez, est.totalCost, est.usingBaseFeeMutez)\n *\n * ```\n *\n * Estimate a contract origination :\n * ```\n * // generic.json is referring to a Michelson Smart Contract\n *\n * const genericMultisigJSON = require('./generic.json')\n * const est = await Tezos.estimate.originate({\n *   code: genericMultisigJSON,\n *   storage: {\n *     stored_counter: 0,\n *     threshold: 1,\n *     keys: ['edpkuLxx9PQD8fZ45eUzrK3BhfDZJHhBuK4Zi49DcEGANwd2rpX82t']\n *   }\n * })\n * console.log(est.burnFeeMutez, est.gasLimit, est.minimalFeeMutez, est.storageLimit,\n *   est.suggestedFeeMutez, est.totalCost, est.usingBaseFeeMutez)\n *\n * ```\n */\n\nexport class Estimate {\n  constructor(\n    private readonly _milligasLimit: number | string,\n    private readonly _storageLimit: number | string,\n    public readonly opSize: number | string,\n    private readonly minimalFeePerStorageByteMutez: number | string,\n    /**\n     * @description Base fee in mutez (1 mutez = 1e10−6 tez)\n     */\n    private readonly baseFeeMutez: number | string = MINIMAL_FEE_MUTEZ\n  ) {}\n\n  /**\n   * @description The number of Mutez that will be burned for the storage of the [operation](https://tezos.gitlab.io/user/glossary.html#operations). (Storage + Allocation fees)\n   */\n  get burnFeeMutez() {\n    return this.roundUp(Number(this.storageLimit) * Number(this.minimalFeePerStorageByteMutez));\n  }\n\n  /**\n   * @description  The limit on the amount of storage an [operation](https://tezos.gitlab.io/user/glossary.html#operations) can use.\n   */\n  get storageLimit() {\n    const limit = Math.max(Number(this._storageLimit), 0);\n    return limit > 0 ? limit : 0;\n  }\n\n  /**\n   * @description The limit on the amount of [gas](https://tezos.gitlab.io/user/glossary.html#gas) a given operation can consume.\n   */\n  get gasLimit() {\n    return this.roundUp(Number(this._milligasLimit)/1000 + GAS_BUFFER);\n  }\n\n  private get operationFeeMutez() {\n    return (\n      (Number(this._milligasLimit)/1000 + GAS_BUFFER) * MINIMAL_FEE_PER_GAS_MUTEZ + Number(this.opSize) * MINIMAL_FEE_PER_BYTE_MUTEZ\n      );\n  }\n\n  private roundUp(nanotez: number) {\n    return Math.ceil(Number(nanotez));\n  }\n\n  /**\n   * @description Minimum fees for the [operation](https://tezos.gitlab.io/user/glossary.html#operations) according to [baker](https://tezos.gitlab.io/user/glossary.html#baker) defaults.\n   */\n  get minimalFeeMutez() {\n    return this.roundUp(MINIMAL_FEE_MUTEZ + this.operationFeeMutez);\n  }\n\n  /**\n   * @description The suggested fee for the operation which includes minimal fees and a small buffer.\n   */\n  get suggestedFeeMutez() {\n    return this.roundUp(this.operationFeeMutez + MINIMAL_FEE_MUTEZ * 2);\n  }\n\n  /**\n   * @description Fees according to your specified base fee will ensure that at least minimum fees are used.\n   */\n  get usingBaseFeeMutez() {\n    return (\n      Math.max(Number(this.baseFeeMutez), MINIMAL_FEE_MUTEZ) + this.roundUp(this.operationFeeMutez)\n    );\n  }\n\n  /**\n   * @description The sum of `minimalFeeMutez` + `burnFeeMutez`.\n   */\n  get totalCost() {\n    return this.minimalFeeMutez + this.burnFeeMutez;\n  }\n\n  /**\n   * @description Since Delphinet, consumed gas is provided in milligas for more precision. \n   * This function returns an estimation of the gas that operation will consume in milligas. \n   */\n  get consumedMilligas() {\n    return Number(this._milligasLimit);\n  }\n\n  static createEstimateInstanceFromProperties(estimateProperties: EstimateProperties[]) {\n    let milligasLimit = 0;\n    let storageLimit = 0;\n    let opSize = 0;\n    let minimalFeePerStorageByteMutez = 0;\n    let baseFeeMutez: number | undefined;\n\n    estimateProperties.forEach(estimate => {\n      milligasLimit += estimate.milligasLimit;\n      storageLimit += estimate.storageLimit;\n      opSize += estimate.opSize;\n      minimalFeePerStorageByteMutez = Math.max(estimate.minimalFeePerStorageByteMutez, minimalFeePerStorageByteMutez);\n      if (estimate.baseFeeMutez) {\n        baseFeeMutez = baseFeeMutez ? baseFeeMutez + estimate.baseFeeMutez : estimate.baseFeeMutez;\n      }\n    })\n    return new Estimate(milligasLimit, storageLimit, opSize, minimalFeePerStorageByteMutez, baseFeeMutez);\n  }\n\n  static createArrayEstimateInstancesFromProperties(estimateProperties: EstimateProperties[]) {\n    return estimateProperties.map(x => new Estimate(x.milligasLimit, x.storageLimit, x.opSize, x.minimalFeePerStorageByteMutez, x.baseFeeMutez))\n  }\n}\n","import { PreapplyResponse, RPCRunOperationParam, OpKind, ConstantsResponse } from '@taquito/rpc';\nimport BigNumber from 'bignumber.js';\nimport { DEFAULT_FEE, DEFAULT_GAS_LIMIT, DEFAULT_STORAGE_LIMIT } from '../constants';\nimport { OperationEmitter } from '../operations/operation-emitter';\nimport {\n  flattenErrors,\n  flattenOperationResult,\n  TezosOperationError,\n} from '../operations/operation-errors';\nimport {\n  DelegateParams,\n  isOpWithFee,\n  OriginateParams,\n  ParamsWithKind,\n  PrepareOperationParams,\n  RegisterDelegateParams,\n  RPCOperation,\n  TransferParams,\n  RevealParams,\n  RegisterGlobalConstantParams,\n} from '../operations/types';\nimport { Estimate, EstimateProperties } from './estimate';\nimport { EstimationProvider } from './interface';\nimport {\n  createOriginationOperation,\n  createRegisterDelegateOperation,\n  createRevealOperation,\n  createSetDelegateOperation,\n  createTransferOperation,\n  createRegisterGlobalConstantOperation,\n} from './prepare';\nimport { validateAddress, InvalidAddressError, ValidationResult } from '@taquito/utils';\n\ninterface Limits {\n  fee?: number;\n  storageLimit?: number;\n  gasLimit?: number;\n}\n\nconst mergeLimits = (\n  userDefinedLimit: Limits,\n  defaultLimits: Required<Limits>\n): Required<Limits> => {\n  return {\n    fee: typeof userDefinedLimit.fee === 'undefined' ? defaultLimits.fee : userDefinedLimit.fee,\n    gasLimit:\n      typeof userDefinedLimit.gasLimit === 'undefined'\n        ? defaultLimits.gasLimit\n        : userDefinedLimit.gasLimit,\n    storageLimit:\n      typeof userDefinedLimit.storageLimit === 'undefined'\n        ? defaultLimits.storageLimit\n        : userDefinedLimit.storageLimit,\n  };\n};\n\n// RPC requires a signature but does not verify it\nconst SIGNATURE_STUB =\n  'edsigtkpiSSschcaCt9pUVrpNPf7TTcgvgDEDD6NCEHMy8NNQJCGnMfLZzYoQj74yLjo9wx6MPVV29CvVzgi7qEcEUok3k7AuMg';\n\nexport class RPCEstimateProvider extends OperationEmitter implements EstimationProvider {\n  private readonly ALLOCATION_STORAGE = 257;\n  private readonly ORIGINATION_STORAGE = 257;\n  private readonly OP_SIZE_REVEAL = 128;\n\n  // Maximum values defined by the protocol\n  private async getAccountLimits(pkh: string, constants: ConstantsResponse, numberOfOps?: number) {\n    const balance = await this.rpc.getBalance(pkh);\n    const {\n      hard_gas_limit_per_operation,\n      hard_gas_limit_per_block,\n      hard_storage_limit_per_operation,\n      cost_per_byte,\n    } = constants;\n    return {\n      fee: 0,\n      gasLimit: numberOfOps\n        ? Math.floor(\n            this.ajustGasForBatchOperation(\n              hard_gas_limit_per_block,\n              hard_gas_limit_per_operation,\n              numberOfOps\n            ).toNumber()\n          )\n        : hard_gas_limit_per_operation.toNumber(),\n      storageLimit: Math.floor(\n        BigNumber.min(balance.dividedBy(cost_per_byte), hard_storage_limit_per_operation).toNumber()\n      ),\n    };\n  }\n\n  // Fix for Granada where the total gasLimit of a batch can not exceed the hard_gas_limit_per_block.\n  // If the total gasLimit of the batch is higher than the hard_gas_limit_per_block,\n  // the gasLimit is calculated by dividing the hard_gas_limit_per_block by the number of operation in the batch (numberOfOps).\n  // numberOfOps is incremented by 1 for safety in case a reveal operation is needed\n  private ajustGasForBatchOperation(\n    gasLimitBlock: BigNumber,\n    gaslimitOp: BigNumber,\n    numberOfOps: number\n  ) {\n    return BigNumber.min(gaslimitOp, gasLimitBlock.div(numberOfOps + 1));\n  }\n\n  private getEstimationPropertiesFromOperationContent(\n    content: PreapplyResponse['contents'][0],\n    size: number,\n    costPerByte: BigNumber\n  ): EstimateProperties {\n    const operationResults = flattenOperationResult({ contents: [content] });\n    let totalGas = 0;\n    let totalMilligas = 0;\n    let totalStorage = 0;\n    operationResults.forEach((result) => {\n      totalStorage +=\n        'originated_contracts' in result && typeof result.originated_contracts !== 'undefined'\n          ? result.originated_contracts.length * this.ORIGINATION_STORAGE\n          : 0;\n      totalStorage += 'allocated_destination_contract' in result ? this.ALLOCATION_STORAGE : 0;\n      totalGas += Number(result.consumed_gas) || 0;\n      totalMilligas += Number(result.consumed_milligas) || 0;\n      totalStorage +=\n        'paid_storage_size_diff' in result ? Number(result.paid_storage_size_diff) || 0 : 0;\n      totalStorage +=\n        'storage_size' in result && 'global_address' in result\n          ? Number(result.storage_size) || 0\n          : 0;\n    });\n\n    if (totalGas !== 0 && totalMilligas === 0) {\n      // This will convert gas to milligas for Carthagenet where result does not contain consumed gas in milligas.\n      totalMilligas = totalGas * 1000;\n    }\n\n    if (isOpWithFee(content)) {\n      return {\n        milligasLimit: totalMilligas || 0,\n        storageLimit: Number(totalStorage || 0),\n        opSize: size,\n        minimalFeePerStorageByteMutez: costPerByte.toNumber(),\n      };\n    } else {\n      return {\n        milligasLimit: 0,\n        storageLimit: 0,\n        opSize: size,\n        minimalFeePerStorageByteMutez: costPerByte.toNumber(),\n        baseFeeMutez: 0,\n      };\n    }\n  }\n\n  private async prepareEstimate(params: PrepareOperationParams, constants: ConstantsResponse) {\n    const prepared = await this.prepareOperation(params);\n    const {\n      opbytes,\n      opOb: { branch, contents },\n    } = await this.forge(prepared);\n    const operation: RPCRunOperationParam = {\n      operation: { branch, contents, signature: SIGNATURE_STUB },\n      chain_id: await this.rpc.getChainId(),\n    };\n\n    const { opResponse } = await this.simulate(operation);\n    const { cost_per_byte } = constants;\n    const errors = [...flattenErrors(opResponse, 'backtracked'), ...flattenErrors(opResponse)];\n\n    // Fail early in case of errors\n    if (errors.length) {\n      throw new TezosOperationError(errors);\n    }\n\n    let numberOfOps = 1;\n    if (Array.isArray(params.operation) && params.operation.length > 1) {\n      numberOfOps =\n        opResponse.contents[0].kind === 'reveal'\n          ? params.operation.length - 1\n          : params.operation.length;\n    }\n\n    return opResponse.contents.map((x) => {\n      return this.getEstimationPropertiesFromOperationContent(\n        x,\n        // TODO: Calculate a specific opSize for each operation.\n        x.kind === 'reveal' ? this.OP_SIZE_REVEAL / 2 : opbytes.length / 2 / numberOfOps,\n        cost_per_byte\n      );\n    });\n  }\n\n  /**\n   *\n   * @description Estimate gasLimit, storageLimit and fees for an origination operation\n   *\n   * @returns An estimation of gasLimit, storageLimit and fees for the operation\n   *\n   * @param OriginationOperation Originate operation parameter\n   */\n  async originate({ fee, storageLimit, gasLimit, ...rest }: OriginateParams) {\n    const pkh = await this.signer.publicKeyHash();\n    const protocolConstants = await this.rpc.getConstants();\n    const DEFAULT_PARAMS = await this.getAccountLimits(pkh, protocolConstants);\n    const op = await createOriginationOperation(\n      await this.context.parser.prepareCodeOrigination({\n        ...rest,\n        ...mergeLimits({ fee, storageLimit, gasLimit }, DEFAULT_PARAMS),\n      })\n    );\n    const isRevealNeeded = await this.isRevealOpNeeded([op], pkh);\n    const ops = isRevealNeeded ? await this.addRevealOp([op], pkh) : op;\n    const estimateProperties = await this.prepareEstimate(\n      { operation: ops, source: pkh },\n      protocolConstants\n    );\n    if (isRevealNeeded) {\n      estimateProperties.shift();\n    }\n    return Estimate.createEstimateInstanceFromProperties(estimateProperties);\n  }\n  /**\n   *\n   * @description Estimate gasLimit, storageLimit and fees for an transfer operation\n   *\n   * @returns An estimation of gasLimit, storageLimit and fees for the operation\n   *\n   * @param TransferOperation Originate operation parameter\n   */\n  async transfer({ fee, storageLimit, gasLimit, ...rest }: TransferParams) {\n    if (validateAddress(rest.to) !== ValidationResult.VALID) {\n      throw new InvalidAddressError(`Invalid 'to' address: ${rest.to}`);\n    }\n    if (rest.source && validateAddress(rest.source) !== ValidationResult.VALID) {\n      throw new InvalidAddressError(`Invalid 'source' address: ${rest.source}`);\n    }\n    const pkh = await this.signer.publicKeyHash();\n    const protocolConstants = await this.rpc.getConstants();\n    const DEFAULT_PARAMS = await this.getAccountLimits(pkh, protocolConstants);\n    const op = await createTransferOperation({\n      ...rest,\n      ...mergeLimits({ fee, storageLimit, gasLimit }, DEFAULT_PARAMS),\n    });\n    const isRevealNeeded = await this.isRevealOpNeeded([op], pkh);\n    const ops = isRevealNeeded ? await this.addRevealOp([op], pkh) : op;\n    const estimateProperties = await this.prepareEstimate(\n      { operation: ops, source: pkh },\n      protocolConstants\n    );\n    if (isRevealNeeded) {\n      estimateProperties.shift();\n    }\n    return Estimate.createEstimateInstanceFromProperties(estimateProperties);\n  }\n\n  /**\n   *\n   * @description Estimate gasLimit, storageLimit and fees for a delegate operation\n   *\n   * @returns An estimation of gasLimit, storageLimit and fees for the operation\n   *\n   * @param Estimate\n   */\n  async setDelegate({ fee, gasLimit, storageLimit, ...rest }: DelegateParams) {\n    if (rest.source && validateAddress(rest.source) !== ValidationResult.VALID) {\n      throw new InvalidAddressError(`Invalid source address: ${rest.source}`);\n    }\n    if (rest.delegate && validateAddress(rest.delegate) !== ValidationResult.VALID) {\n      throw new InvalidAddressError(`Invalid delegate address: ${rest.delegate}`);\n    }\n\n    const pkh = await this.signer.publicKeyHash();\n    const sourceOrDefault = rest.source || pkh;\n    const protocolConstants = await this.rpc.getConstants();\n    const DEFAULT_PARAMS = await this.getAccountLimits(sourceOrDefault, protocolConstants);\n    const op = await createSetDelegateOperation({\n      ...rest,\n      ...mergeLimits({ fee, storageLimit, gasLimit }, DEFAULT_PARAMS),\n    });\n    const isRevealNeeded = await this.isRevealOpNeeded([op], pkh);\n    const ops = isRevealNeeded ? await this.addRevealOp([op], pkh) : op;\n    const estimateProperties = await this.prepareEstimate(\n      { operation: ops, source: pkh },\n      protocolConstants\n    );\n    if (isRevealNeeded) {\n      estimateProperties.shift();\n    }\n    return Estimate.createEstimateInstanceFromProperties(estimateProperties);\n  }\n\n  /**\n   *\n   * @description Estimate gasLimit, storageLimit and fees for a each operation in the batch\n   *\n   * @returns An array of Estimate objects. If a reveal operation is needed, the first element of the array is the Estimate for the reveal operation.\n   */\n  async batch(params: ParamsWithKind[]) {\n    const pkh = await this.signer.publicKeyHash();\n    let operations: RPCOperation[] = [];\n    const protocolConstants = await this.rpc.getConstants();\n    const DEFAULT_PARAMS = await this.getAccountLimits(pkh, protocolConstants, params.length);\n    for (const param of params) {\n      switch (param.kind) {\n        case OpKind.TRANSACTION:\n          operations.push(\n            await createTransferOperation({\n              ...param,\n              ...mergeLimits(param, DEFAULT_PARAMS),\n            })\n          );\n          break;\n        case OpKind.ORIGINATION:\n          operations.push(\n            await createOriginationOperation(\n              await this.context.parser.prepareCodeOrigination({\n                ...param,\n                ...mergeLimits(param, DEFAULT_PARAMS),\n              })\n            )\n          );\n          break;\n        case OpKind.DELEGATION:\n          operations.push(\n            await createSetDelegateOperation({\n              ...param,\n              ...mergeLimits(param, DEFAULT_PARAMS),\n            })\n          );\n          break;\n        case OpKind.ACTIVATION:\n          operations.push({\n            ...param,\n            ...DEFAULT_PARAMS,\n          });\n          break;\n        case OpKind.REGISTER_GLOBAL_CONSTANT:\n          operations.push(\n            await createRegisterGlobalConstantOperation({\n              ...param,\n              ...mergeLimits(param, DEFAULT_PARAMS),\n            })\n          );\n          break;\n        default:\n          throw new Error(`Unsupported operation kind: ${(param as any).kind}`);\n      }\n    }\n    const isRevealNeeded = await this.isRevealOpNeeded(operations, pkh);\n    operations = isRevealNeeded ? await this.addRevealOp(operations, pkh) : operations;\n    const estimateProperties = await this.prepareEstimate(\n      { operation: operations, source: pkh },\n      protocolConstants\n    );\n\n    return Estimate.createArrayEstimateInstancesFromProperties(estimateProperties);\n  }\n\n  /**\n   *\n   * @description Estimate gasLimit, storageLimit and fees for a delegate operation\n   *\n   * @returns An estimation of gasLimit, storageLimit and fees for the operation\n   *\n   * @param Estimate\n   */\n  async registerDelegate(params: RegisterDelegateParams) {\n    const pkh = await this.signer.publicKeyHash();\n    const protocolConstants = await this.rpc.getConstants();\n    const DEFAULT_PARAMS = await this.getAccountLimits(pkh, protocolConstants);\n    const op = await createRegisterDelegateOperation({ ...params, ...DEFAULT_PARAMS }, pkh);\n    const isRevealNeeded = await this.isRevealOpNeeded([op], pkh);\n    const ops = isRevealNeeded ? await this.addRevealOp([op], pkh) : op;\n    const estimateProperties = await this.prepareEstimate(\n      { operation: ops, source: pkh },\n      protocolConstants\n    );\n    if (isRevealNeeded) {\n      estimateProperties.shift();\n    }\n    return Estimate.createEstimateInstanceFromProperties(estimateProperties);\n  }\n\n  /**\n   *\n   * @description Estimate gasLimit, storageLimit and fees to reveal the current account\n   *\n   * @returns An estimation of gasLimit, storageLimit and fees for the operation or undefined if the account is already revealed\n   *\n   * @param Estimate\n   */\n  async reveal(params?: RevealParams) {\n    const pkh = await this.signer.publicKeyHash();\n    if (await this.isAccountRevealRequired(pkh)) {\n      const protocolConstants = await this.rpc.getConstants();\n      const DEFAULT_PARAMS = await this.getAccountLimits(pkh, protocolConstants);\n      const op = await createRevealOperation(\n        {\n          ...params,\n          ...DEFAULT_PARAMS,\n        },\n        pkh,\n        await this.signer.publicKey()\n      );\n      const estimateProperties = await this.prepareEstimate(\n        { operation: op, source: pkh },\n        protocolConstants\n      );\n      return Estimate.createEstimateInstanceFromProperties(estimateProperties);\n    }\n  }\n\n  /**\n   *\n   * @description Estimate gasLimit, storageLimit and fees for an registerGlobalConstant operation\n   *\n   * @returns An estimation of gasLimit, storageLimit and fees for the operation\n   *\n   * @param params registerGlobalConstant operation parameter\n   */\n  async registerGlobalConstant({\n    fee,\n    storageLimit,\n    gasLimit,\n    ...rest\n  }: RegisterGlobalConstantParams) {\n    const pkh = await this.signer.publicKeyHash();\n    const protocolConstants = await this.rpc.getConstants();\n    const DEFAULT_PARAMS = await this.getAccountLimits(pkh, protocolConstants);\n    const op = await createRegisterGlobalConstantOperation({\n      ...rest,\n      ...mergeLimits({ fee, storageLimit, gasLimit }, DEFAULT_PARAMS),\n    });\n    const isRevealNeeded = await this.isRevealOpNeeded([op], pkh);\n    const ops = isRevealNeeded ? await this.addRevealOp([op], pkh) : op;\n    const estimateProperties = await this.prepareEstimate(\n      { operation: ops, source: pkh },\n      protocolConstants\n    );\n    if (isRevealNeeded) {\n      estimateProperties.shift();\n    }\n    return Estimate.createEstimateInstanceFromProperties(estimateProperties);\n  }\n\n  private async addRevealOp(op: RPCOperation[], pkh: string) {\n    op.unshift(\n      await createRevealOperation(\n        {\n          ...{\n            fee: DEFAULT_FEE.REVEAL,\n            gasLimit: DEFAULT_GAS_LIMIT.REVEAL,\n            storageLimit: DEFAULT_STORAGE_LIMIT.REVEAL,\n          },\n        },\n        pkh,\n        await this.signer.publicKey()\n      )\n    );\n    return op;\n  }\n}\n","import { OperationContentsAndResult, OperationContentsAndResultDelegation } from '@taquito/rpc';\nimport { Context } from '../context';\nimport { Operation } from './operations';\nimport {\n  FeeConsumingOperation,\n  ForgedBytes,\n  GasConsumingOperation,\n  RPCDelegateOperation,\n  StorageConsumingOperation,\n} from './types';\n\n/**\n * @description Delegation operation provide utility function to fetch newly issued delegation\n *\n * @warn Currently support only one delegation per operation\n */\nexport class DelegateOperation extends Operation\n  implements GasConsumingOperation, StorageConsumingOperation, FeeConsumingOperation {\n  constructor(\n    hash: string,\n    private readonly params: RPCDelegateOperation,\n    public readonly source: string,\n    raw: ForgedBytes,\n    results: OperationContentsAndResult[],\n    context: Context\n  ) {\n    super(hash, raw, results, context);\n  }\n\n  get operationResults() {\n    const delegationOp =\n      Array.isArray(this.results) &&\n      (this.results.find(op => op.kind === 'delegation') as OperationContentsAndResultDelegation);\n    const result = delegationOp && delegationOp.metadata && delegationOp.metadata.operation_result;\n    return result ? result : undefined;\n  }\n\n  get status() {\n    const operationResults = this.operationResults;\n    if (operationResults) {\n      return operationResults.status;\n    } else {\n      return 'unknown';\n    }\n  }\n\n  get delegate(): string {\n    return this.delegate;\n  }\n\n  get isRegisterOperation(): boolean {\n    return this.delegate === this.source;\n  }\n\n  get fee() {\n    return this.params.fee;\n  }\n\n  get gasLimit() {\n    return this.params.gas_limit;\n  }\n\n  get storageLimit() {\n    return this.params.storage_limit;\n  }\n\n  get consumedGas() {\n    const consumedGas = this.operationResults && this.operationResults.consumed_gas;\n    return consumedGas ? consumedGas : undefined;\n  }\n\n  get errors() {\n    return this.operationResults && this.operationResults.errors;\n  }\n}\n","import { OperationContentsAndResult, OperationContentsAndResultOrigination } from '@taquito/rpc';\nimport { Context } from '../context';\nimport { DefaultContractType } from '../contract/contract';\nimport { RpcContractProvider } from '../contract/rpc-contract-provider';\nimport { Operation } from './operations';\nimport {\n  FeeConsumingOperation,\n  ForgedBytes,\n  GasConsumingOperation,\n  hasMetadataWithResult,\n  RPCOriginationOperation,\n  StorageConsumingOperation,\n} from './types';\n\n/**\n * @description Origination operation provide utility function to fetch newly originated contract\n *\n * @warn Currently support only one origination per operation\n */\nexport class OriginationOperation<TContract extends DefaultContractType = DefaultContractType> \n  extends Operation\n  implements GasConsumingOperation, StorageConsumingOperation, FeeConsumingOperation {\n  /**\n   * @description Contract address of the newly originated contract\n   */\n  public readonly contractAddress?: string;\n\n  constructor(\n    hash: string,\n    private readonly params: RPCOriginationOperation,\n    raw: ForgedBytes,\n    results: OperationContentsAndResult[],\n    context: Context,\n    private contractProvider: RpcContractProvider\n  ) {\n    super(hash, raw, results, context);\n\n    const originatedContracts = this.operationResults && this.operationResults.originated_contracts;\n    if (Array.isArray(originatedContracts)) {\n      this.contractAddress = originatedContracts[0];\n    }\n  }\n\n  get status() {\n    const operationResults = this.operationResults;\n    if (operationResults) {\n      return operationResults.status;\n    } else {\n      return 'unknown';\n    }\n  }\n\n  get operationResults() {\n    const originationOp =\n      Array.isArray(this.results) &&\n      (this.results.find((op) => op.kind === 'origination') as\n        | OperationContentsAndResultOrigination\n        | undefined);\n\n    const result =\n      originationOp &&\n      hasMetadataWithResult(originationOp) &&\n      originationOp.metadata.operation_result;\n    return result ? result : undefined;\n  }\n\n  get fee() {\n    return this.params.fee;\n  }\n\n  get gasLimit() {\n    return this.params.gas_limit;\n  }\n\n  get storageLimit() {\n    return this.params.storage_limit;\n  }\n\n  get consumedGas() {\n    const consumedGas = this.operationResults && this.operationResults.consumed_gas;\n    return consumedGas ? consumedGas : undefined;\n  }\n\n  get storageDiff() {\n    const storageDiff = this.operationResults && this.operationResults.paid_storage_size_diff;\n    return storageDiff ? storageDiff : undefined;\n  }\n\n  get storageSize() {\n    const storageSize = this.operationResults && this.operationResults.storage_size;\n    return storageSize ? storageSize : undefined;\n  }\n\n  get errors() {\n    return this.operationResults && this.operationResults.errors;\n  }\n\n  /**\n   * @description Provide the contract abstract of the newly originated contract\n   */\n  async contract(confirmations?: number, interval?: number, timeout?: number) {\n    if (!this.contractAddress) {\n      throw new Error('No contract was originated in this operation');\n    }\n\n    await this.confirmation(confirmations, interval, timeout);\n    return this.contractProvider.at<TContract>(this.contractAddress);\n  }\n}\n","import { OperationContentsAndResult, OperationContentsAndResultRegisterGlobalConstant } from '@taquito/rpc';\nimport { Context } from '../context';\nimport { Operation } from './operations';\nimport {\n    FeeConsumingOperation,\n    ForgedBytes,\n    GasConsumingOperation,\n    RPCRegisterGlobalConstantOperation,\n    StorageConsumingOperation,\n} from './types';\n\n/**\n * @description RegisterGlobalConstantOperation provides utility functions to fetch a newly issued operation of kind register_global_constant\n */\nexport class RegisterGlobalConstantOperation extends Operation\n    implements GasConsumingOperation, StorageConsumingOperation, FeeConsumingOperation {\n\n    /**\n     * @description Hash (index) of the newly registered constant\n     */\n    public readonly globalConstantHash?: string;\n    constructor(\n        hash: string,\n        private readonly params: RPCRegisterGlobalConstantOperation,\n        public readonly source: string,\n        raw: ForgedBytes,\n        results: OperationContentsAndResult[],\n        context: Context\n    ) {\n        super(hash, raw, results, context);\n\n        this.globalConstantHash = this.operationResults && this.operationResults.global_address;\n    }\n\n    get operationResults() {\n        const registerGlobalConstantOp =\n            Array.isArray(this.results) &&\n            (this.results.find(op => op.kind === 'register_global_constant') as OperationContentsAndResultRegisterGlobalConstant);\n        const result = registerGlobalConstantOp && registerGlobalConstantOp.metadata && registerGlobalConstantOp.metadata.operation_result;\n        return result ? result : undefined;\n    }\n\n    get status() {\n        const operationResults = this.operationResults;\n        if (operationResults) {\n            return operationResults.status;\n        } else {\n            return 'unknown';\n        }\n    }\n\n    get registeredExpression() {\n        return this.params.value;\n    }\n\n    get fee() {\n        return this.params.fee;\n    }\n\n    get gasLimit() {\n        return this.params.gas_limit;\n    }\n\n    get storageLimit() {\n        return this.params.storage_limit;\n    }\n\n    get errors() {\n        return this.operationResults && this.operationResults.errors;\n    }\n}\n","import { OperationContentsAndResult, OperationContentsAndResultReveal } from '@taquito/rpc';\nimport { Context } from '../context';\nimport { flattenErrors, flattenOperationResult } from './operation-errors';\nimport { Operation } from './operations';\nimport {\n  FeeConsumingOperation,\n  ForgedBytes,\n  GasConsumingOperation,\n  RPCRevealOperation,\n  StorageConsumingOperation,\n} from './types';\n\n/**\n * @description Reveal operation provides utility functions to fetch a newly issued revelation\n */\nexport class RevealOperation extends Operation\n  implements GasConsumingOperation, StorageConsumingOperation, FeeConsumingOperation {\n  constructor(\n    hash: string,\n    private readonly params: RPCRevealOperation,\n    public readonly source: string,\n    raw: ForgedBytes,\n    results: OperationContentsAndResult[],\n    context: Context\n  ) {\n    super(hash, raw, results, context);\n  }\n\n  get operationResults() {\n    const revealOp =\n      Array.isArray(this.results) &&\n      (this.results.find(op => op.kind === 'reveal') as OperationContentsAndResultReveal);\n    return revealOp ? [revealOp] : [];\n  }\n\n  get status() {\n    const operationResults = this.operationResults;\n    const txResult = operationResults[0];\n    if (txResult) {\n      return txResult.metadata.operation_result.status;\n    } else {\n      return 'unknown';\n    }\n  }\n\n  get fee() {\n    return this.params.fee;\n  }\n\n  get gasLimit() {\n    return this.params.gas_limit;\n  }\n\n  get storageLimit() {\n    return this.params.storage_limit;\n  }\n\n  get publicKey() {\n    return this.params.public_key;\n  }\n\n  private sumProp(arr: any[], prop: string) {\n    return arr.reduce((prev, current) => {\n      return prop in current ? Number(current[prop]) + prev : prev;\n    }, 0);\n  }\n\n  get consumedGas() {\n    return String(\n      this.sumProp(flattenOperationResult({ contents: this.operationResults }), 'consumed_gas')\n    );\n  }\n\n  get storageDiff() {\n    return String(\n      this.sumProp(\n        flattenOperationResult({ contents: this.operationResults }),\n        'paid_storage_size_diff'\n      )\n    );\n  }\n\n  get storageSize() {\n    return String(\n      this.sumProp(flattenOperationResult({ contents: this.operationResults }), 'storage_size')\n    );\n  }\n\n  get errors() {\n    return flattenErrors({ contents: this.operationResults });\n  }\n}\n","import { OperationContentsAndResult, OperationContentsAndResultTransaction } from '@taquito/rpc';\nimport BigNumber from 'bignumber.js';\nimport { Context } from '../context';\nimport { flattenErrors, flattenOperationResult } from './operation-errors';\nimport { Operation } from './operations';\nimport {\n  FeeConsumingOperation,\n  ForgedBytes,\n  GasConsumingOperation,\n  RPCTransferOperation,\n  StorageConsumingOperation,\n} from './types';\n\n/**\n * @description Transaction operation provides utility functions to fetch a newly issued transaction\n *\n * @warn Currently supports one transaction per operation\n */\nexport class TransactionOperation extends Operation\n  implements GasConsumingOperation, StorageConsumingOperation, FeeConsumingOperation {\n  constructor(\n    hash: string,\n    private readonly params: RPCTransferOperation,\n    public readonly source: string,\n    raw: ForgedBytes,\n    results: OperationContentsAndResult[],\n    context: Context\n  ) {\n    super(hash, raw, results, context);\n  }\n\n  get operationResults() {\n    const transactionOp =\n      Array.isArray(this.results) &&\n      (this.results.find(op => op.kind === 'transaction') as OperationContentsAndResultTransaction);\n    return transactionOp ? [transactionOp] : [];\n  }\n\n  get status() {\n    const operationResults = this.operationResults;\n    const txResult = operationResults[0];\n    if (txResult) {\n      return txResult.metadata.operation_result.status;\n    } else {\n      return 'unknown';\n    }\n  }\n\n  get amount() {\n    return new BigNumber(this.params.amount);\n  }\n\n  get destination() {\n    return this.params.destination;\n  }\n\n  get fee() {\n    return this.params.fee;\n  }\n\n  get gasLimit() {\n    return this.params.gas_limit;\n  }\n\n  get storageLimit() {\n    return this.params.storage_limit;\n  }\n\n  private sumProp(arr: any[], prop: string) {\n    return arr.reduce((prev, current) => {\n      return prop in current ? Number(current[prop]) + prev : prev;\n    }, 0);\n  }\n\n  get consumedGas() {\n    return String(\n      this.sumProp(flattenOperationResult({ contents: this.operationResults }), 'consumed_gas')\n    );\n  }\n\n  get storageDiff() {\n    return String(\n      this.sumProp(\n        flattenOperationResult({ contents: this.operationResults }),\n        'paid_storage_size_diff'\n      )\n    );\n  }\n\n  get storageSize() {\n    return String(\n      this.sumProp(flattenOperationResult({ contents: this.operationResults }), 'storage_size')\n    );\n  }\n\n  get errors() {\n    return flattenErrors({ contents: this.operationResults });\n  }\n}\n","const setDelegate = (key: string) => {\n  return [\n    { prim: 'DROP' },\n    { prim: 'NIL', args: [{ prim: 'operation' }] },\n    {\n      prim: 'PUSH',\n      args: [{ prim: 'key_hash' }, { string: key }],\n    },\n    { prim: 'SOME' },\n    { prim: 'SET_DELEGATE' },\n    { prim: 'CONS' },\n  ];\n};\n\nconst transferImplicit = (key: string, mutez: number) => {\n  return [\n    { prim: 'DROP' },\n    { prim: 'NIL', args: [{ prim: 'operation' }] },\n    {\n      prim: 'PUSH',\n      args: [{ prim: 'key_hash' }, { string: key }],\n    },\n    { prim: 'IMPLICIT_ACCOUNT' },\n    {\n      prim: 'PUSH',\n      args: [{ prim: 'mutez' }, { int: `${mutez}` }],\n    },\n    { prim: 'UNIT' },\n    { prim: 'TRANSFER_TOKENS' },\n    { prim: 'CONS' },\n  ];\n};\n\nconst removeDelegate = () => {\n  return [\n    { prim: 'DROP' },\n    { prim: 'NIL', args: [{ prim: 'operation' }] },\n    { prim: 'NONE', args: [{ prim: 'key_hash' }] },\n    { prim: 'SET_DELEGATE' },\n    { prim: 'CONS' },\n  ];\n};\n\nconst transferToContract = (key: string, amount: number) => {\n  return [\n    { prim: 'DROP' },\n    { prim: 'NIL', args: [{ prim: 'operation' }] },\n    {\n      prim: 'PUSH',\n      args: [{ prim: 'address' }, { string: key }],\n    },\n    { prim: 'CONTRACT', args: [{ prim: 'unit' }] },\n    [\n      {\n        prim: 'IF_NONE',\n        args: [[[{ prim: 'UNIT' }, { prim: 'FAILWITH' }]], []],\n      },\n    ],\n    {\n      prim: 'PUSH',\n      args: [{ prim: 'mutez' }, { int: `${amount}` }],\n    },\n    { prim: 'UNIT' },\n    { prim: 'TRANSFER_TOKENS' },\n    { prim: 'CONS' },\n  ];\n};\n\nexport const MANAGER_LAMBDA = {\n  setDelegate,\n  removeDelegate,\n  transferImplicit,\n  transferToContract,\n};\n","const code = [\n  {\n    prim: 'parameter',\n    args: [\n      {\n        prim: 'lambda',\n        args: [\n          { prim: 'unit' },\n          {\n            prim: 'pair',\n            args: [{ prim: 'list', args: [{ prim: 'operation' }] }, { prim: 'unit' }],\n          },\n        ],\n      },\n    ],\n  },\n  { prim: 'storage', args: [{ prim: 'unit' }] },\n  { prim: 'code', args: [[{ prim: 'CAR' }, { prim: 'UNIT' }, { prim: 'EXEC' }]] },\n];\n\nconst storage = 'Unit';\n\nexport const VIEW_LAMBDA = {\n  code,\n  storage\n}\n","import { Wallet } from '../wallet/wallet';\nimport { Context } from '../context';\nimport { ContractAbstraction } from './contract';\nimport { ContractProvider } from './interface';\n\nexport function compose<\n    ContractAbsComposer1 extends ContractAbstraction<ContractProvider | Wallet>,\n    ContractAbsComposer2 extends ContractAbstraction<ContractProvider | Wallet>,\n    ContractAbstractionComposed\n>(\n    functioncomposer1: (abs: ContractAbsComposer1, context: Context) => ContractAbsComposer2,\n    functioncomposer2: (abs: ContractAbsComposer2, context: Context) => ContractAbstractionComposed\n): (abs: ContractAbsComposer1, context: Context) => ContractAbstractionComposed {\n    return (contractAbstraction, context) =>\n        functioncomposer2(functioncomposer1(contractAbstraction, context), context);\n}\n","import { TransactionOperation } from '../../operations/transaction-operation';\nimport { TransferParams } from '../../operations/types';\nimport { ContractProvider } from '../interface';\nimport { TransactionWalletOperation, Wallet } from '../../wallet';\nimport { ParameterSchema } from '@taquito/michelson-encoder';\nimport {\n  ContractMethodInterface,\n  ExplicitTransferParams,\n  SendParams,\n} from './contract-method-interface';\nimport { DEFAULT_SMART_CONTRACT_METHOD_NAME } from '../contract';\nimport { InvalidParameterError } from '../errors';\n\n/**\n * @description Utility class to send smart contract operation\n * The format for the arguments is the flattened representation\n */\nexport class ContractMethod<T extends ContractProvider | Wallet>\n  implements ContractMethodInterface\n{\n  constructor(\n    private provider: T,\n    private address: string,\n    private parameterSchema: ParameterSchema,\n    private name: string,\n    private args: any[],\n    private isMultipleEntrypoint = true,\n    private isAnonymous = false\n  ) {}\n\n  private validateArgs(args: any[], schema: ParameterSchema, name: string) {\n    const sigs = schema.ExtractSignatures();\n\n    if (!sigs.find((x: any[]) => x.length === args.length)) {\n      throw new InvalidParameterError(name, sigs, args);\n    }\n  }\n\n  /**\n   * @description Get the schema of the smart contract method\n   */\n  get schema() {\n    return this.isAnonymous\n      ? this.parameterSchema.ExtractSchema()[this.name]\n      : this.parameterSchema.ExtractSchema();\n  }\n\n  /**\n   * @description Get the signature of the smart contract method\n   */\n  getSignature() {\n    if (this.isAnonymous) {\n      const sig = this.parameterSchema.ExtractSignatures().find((x: any[]) => x[0] === this.name);\n      if (sig) {\n        sig.shift();\n        return sig;\n      }\n    } else {\n      const sig = this.parameterSchema.ExtractSignatures();\n      return sig.length == 1 ? sig[0] : sig;\n    }\n  }\n\n  /**\n   *\n   * @description Send the smart contract operation\n   *\n   * @param Options generic operation parameter\n   */\n  send(\n    params: Partial<SendParams> = {}\n  ): Promise<T extends Wallet ? TransactionWalletOperation : TransactionOperation> {\n    if (this.provider instanceof Wallet) {\n      return (this.provider as unknown as Wallet)\n        .transfer(this.toTransferParams(params))\n        .send() as any;\n    } else {\n      return this.provider.transfer(this.toTransferParams(params)) as any;\n    }\n  }\n\n  /**\n   *\n   * @description Create transfer params to be used with TezosToolkit.contract.transfer methods\n   *\n   * @param Options generic transfer operation parameters\n   */\n  toTransferParams({\n    fee,\n    gasLimit,\n    storageLimit,\n    source,\n    amount = 0,\n    mutez = false,\n  }: Partial<SendParams> = {}): TransferParams {\n    const fullTransferParams: ExplicitTransferParams = {\n      to: this.address,\n      amount,\n      fee,\n      mutez,\n      source,\n      gasLimit,\n      storageLimit,\n      parameter: {\n        entrypoint: this.isMultipleEntrypoint ? this.name : DEFAULT_SMART_CONTRACT_METHOD_NAME,\n        value: this.isAnonymous\n          ? this.parameterSchema.Encode(this.name, ...this.args)\n          : this.parameterSchema.Encode(...this.args),\n      },\n    };\n    return fullTransferParams;\n  }\n}\n","import { Protocols } from '../constants';\nimport { Context } from '../context';\nimport { ContractAbstraction, ContractStorageType, DefaultWalletType } from '../contract';\nimport { ContractMethod } from '../contract/contract-methods/contract-method-flat-param';\nimport { ContractMethodObject } from '../contract/contract-methods/contract-method-object-param';\nimport { OpKind, withKind } from '../operations/types';\nimport { OriginationWalletOperation } from './origination-operation';\nimport {\n  WalletDelegateParams,\n  WalletOriginateParams,\n  WalletProvider,\n  WalletTransferParams,\n} from './interface';\n\nimport { \n  validateAddress,\n  validateContractAddress,\n  InvalidContractAddressError,\n  InvalidAddressError, \n  ValidationResult \n} from '@taquito/utils'\n\nexport interface PKHOption {\n  forceRefetch?: boolean;\n}\n\nexport type WalletParamsWithKind =\n  | withKind<WalletTransferParams, OpKind.TRANSACTION>\n  | withKind<WalletOriginateParams, OpKind.ORIGINATION>\n  | withKind<WalletDelegateParams, OpKind.DELEGATION>;\n\nexport class WalletOperationBatch {\n  private operations: WalletParamsWithKind[] = [];\n\n  constructor(private walletProvider: WalletProvider, private context: Context) {}\n\n  /**\n   *\n   * @description Add a transaction operation to the batch\n   *\n   * @param params Transfer operation parameter\n   */\n  withTransfer(params: WalletTransferParams) {\n    if (validateAddress(params.to) !== ValidationResult.VALID) {\n      throw new InvalidAddressError(`Invalid 'to' address: ${params.to}`)\n    }\n    this.operations.push({ kind: OpKind.TRANSACTION, ...params });\n    return this;\n  }\n\n  /**\n   *\n   * @description Add a transaction operation to the batch\n   *\n   * @param params Transfer operation parameter\n   */\n  withContractCall(params: ContractMethod<Wallet> | ContractMethodObject<Wallet>) {\n    return this.withTransfer(params.toTransferParams());\n  }\n\n  /**\n   *\n   * @description Add a delegation operation to the batch\n   *\n   * @param params Delegation operation parameter\n   */\n  withDelegation(params: WalletDelegateParams) {\n    if (params.delegate && validateAddress(params.delegate) !== ValidationResult.VALID) {\n      throw new InvalidAddressError(`Invalid delegate address: ${params.delegate}`);\n    }\n    this.operations.push({ kind: OpKind.DELEGATION, ...params });\n    return this;\n  }\n\n  /**\n   *\n   * @description Add an origination operation to the batch\n   *\n   * @param params Origination operation parameter\n   */\n  withOrigination<TWallet extends DefaultWalletType = DefaultWalletType>(params: WalletOriginateParams<ContractStorageType<TWallet>>) {\n    this.operations.push({ kind: OpKind.ORIGINATION, ...params });\n    return this;\n  }\n\n  private async mapOperation(param: WalletParamsWithKind) {\n    switch (param.kind) {\n      case OpKind.TRANSACTION:\n        return this.walletProvider.mapTransferParamsToWalletParams(async () => param);\n      case OpKind.ORIGINATION:\n        return this.walletProvider.mapOriginateParamsToWalletParams(async () =>\n          this.context.parser.prepareCodeOrigination({\n            ...param,\n          })\n        );\n      case OpKind.DELEGATION:\n        return this.walletProvider.mapDelegateParamsToWalletParams(async () => param);\n      default:\n        throw new Error(`Unsupported operation kind: ${(param as any).kind}`);\n    }\n  }\n\n  /**\n   *\n   * @description Add a group operation to the batch. Operation will be applied in the order they are in the params array\n   *\n   * @param params Operations parameter\n   */\n  with(params: WalletParamsWithKind[]) {\n    for (const param of params) {\n      switch (param.kind) {\n        case OpKind.TRANSACTION:\n          this.withTransfer(param);\n          break;\n        case OpKind.ORIGINATION:\n          this.withOrigination(param);\n          break;\n        case OpKind.DELEGATION:\n          this.withDelegation(param);\n          break;\n        default:\n          throw new Error(`Unsupported operation kind: ${(param as any).kind}`);\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   *\n   * @description Submit batch operation to wallet\n   *\n   */\n  async send() {\n    const ops: WalletParamsWithKind[] = [];\n\n    for (const op of this.operations) {\n      ops.push(await this.mapOperation(op));\n    }\n\n    const opHash = await this.walletProvider.sendOperations(ops);\n\n    return this.context.operationFactory.createBatchOperation(opHash);\n  }\n}\n\nexport class Wallet {\n  constructor(private context: Context) {}\n\n  private get walletProvider() {\n    return this.context.walletProvider;\n  }\n\n  private _pkh?: string;\n\n  /**\n   * @description Retrieve the PKH of the account that is currently in use by the wallet\n   *\n   * @param option Option to use while fetching the PKH.\n   * If forceRefetch is specified the wallet provider implementation will refetch the PKH from the wallet\n   */\n  async pkh({ forceRefetch }: PKHOption = {}) {\n    if (!this._pkh || forceRefetch) {\n      this._pkh = await this.walletProvider.getPKH();\n    }\n\n    return this._pkh;\n  }\n\n  private walletCommand = <T>(send: () => Promise<T>) => {\n    return {\n      send,\n    };\n  };\n\n  /**\n   *\n   * @description Originate a new contract according to the script in parameters.\n   *\n   * @returns An operation handle with the result from the rpc node\n   *\n   * @param originateParams Originate operation parameter\n   */\n  originate<TWallet extends DefaultWalletType = DefaultWalletType>(\n    params: WalletOriginateParams<ContractStorageType<TWallet>>\n  ): { send: () => Promise<OriginationWalletOperation<TWallet>> } {\n    return this.walletCommand(async () => {\n      const mappedParams = await this.walletProvider.mapOriginateParamsToWalletParams(() =>\n        this.context.parser.prepareCodeOrigination({\n          ...params as WalletOriginateParams,\n        })\n      );\n      const opHash = await this.walletProvider.sendOperations([mappedParams]);\n      if (!this.context.proto) {\n        this.context.proto = (await this.context.rpc.getBlock()).protocol as Protocols;\n      }\n      return this.context.operationFactory.createOriginationOperation(opHash) as Promise<OriginationWalletOperation<TWallet>>;\n    });\n  }\n\n  /**\n   *\n   * @description Set the delegate for a contract.\n   *\n   * @returns An operation handle with the result from the rpc node\n   *\n   * @param delegateParams operation parameter\n   */\n  setDelegate(params: WalletDelegateParams) {\n    if (params.delegate && validateAddress(params.delegate) !== ValidationResult.VALID) {\n      throw new InvalidAddressError(`Invalid address error: ${params.delegate}`);\n    }\n    return this.walletCommand(async () => {\n      const mappedParams = await this.walletProvider.mapDelegateParamsToWalletParams(\n        async () => params\n      );\n      const opHash = await this.walletProvider.sendOperations([mappedParams]);\n      return this.context.operationFactory.createDelegationOperation(opHash);\n    });\n  }\n\n  /**\n   *\n   * @description Register the current address as delegate.\n   *\n   * @returns An operation handle with the result from the rpc node\n   *\n   */\n  registerDelegate() {\n    return this.walletCommand(async () => {\n      const mappedParams = await this.walletProvider.mapDelegateParamsToWalletParams(async () => {\n        const delegate = await this.pkh();\n        return { delegate };\n      });\n      const opHash = await this.walletProvider.sendOperations([mappedParams]);\n      return this.context.operationFactory.createDelegationOperation(opHash);\n    });\n  }\n\n  /**\n   *\n   * @description Transfer tezos tokens from current address to a specific address or call a smart contract.\n   *\n   * @returns A wallet command from which we can send the operation to the wallet\n   *\n   * @param params operation parameter\n   */\n  transfer(params: WalletTransferParams) {\n    if (validateAddress(params.to) !== ValidationResult.VALID) {\n      throw new InvalidAddressError(`Invalid 'to' address: ${params.to}`);\n    }\n    return this.walletCommand(async () => {\n      const mappedParams = await this.walletProvider.mapTransferParamsToWalletParams(\n        async () => params\n      );\n      const opHash = await this.walletProvider.sendOperations([mappedParams]);\n      return this.context.operationFactory.createTransactionOperation(opHash);\n    });\n  }\n\n  /**\n   *\n   * @description Create a batch of operation\n   *\n   * @returns A batch object from which we can add more operation or send a command to the wallet to execute the batch\n   *\n   * @param params List of operation to initialize the batch with\n   */\n  batch(params?: Parameters<WalletOperationBatch['with']>[0]) {\n    const batch = new WalletOperationBatch(this.walletProvider, this.context);\n\n    if (Array.isArray(params)) {\n      batch.with(params);\n    }\n\n    return batch;\n  }\n\n  /**\n   *\n   * @description Create an smart contract abstraction for the address specified. Calling entrypoints with the returned\n   * smart contract abstraction will leverage the wallet provider to make smart contract calls\n   *\n   * @param address Smart contract address\n   */\n  async at<T extends ContractAbstraction<Wallet>>(\n    address: string,\n    contractAbstractionComposer: (abs: ContractAbstraction<Wallet>, context: Context) => T = (x) =>\n      x as any\n  ): Promise<T> {\n    if (validateContractAddress(address) !== ValidationResult.VALID) {\n      throw new InvalidContractAddressError(`Invalid contract address: ${address}`);\n    }\n    const rpc = this.context.withExtensions().rpc;\n    const script = await rpc.getNormalizedScript(address);\n    const entrypoints = await rpc.getEntrypoints(address);\n    const blockHeader = await this.context.rpc.getBlockHeader();\n    const chainId = blockHeader.chain_id;\n    const abs = new ContractAbstraction(\n      address,\n      script,\n      this,\n      this.context.contract,\n      entrypoints,\n      chainId,\n      rpc\n    );\n    return contractAbstractionComposer(abs, this.context);\n  }\n}\n","import { Context } from '../context';\nimport { attachKind, OpKind } from '../operations/types';\nimport {\n  WalletDelegateParams,\n  WalletOriginateParams,\n  WalletProvider,\n  WalletTransferParams,\n} from './interface';\nimport { WalletParamsWithKind } from './wallet';\n\nexport class LegacyWalletProvider implements WalletProvider {\n  constructor(private context: Context) {}\n\n  async getPKH(): Promise<string> {\n    return this.context.signer.publicKeyHash();\n  }\n\n  async mapTransferParamsToWalletParams(params: () => Promise<WalletTransferParams>) {\n    return attachKind(await params(), OpKind.TRANSACTION);\n  }\n\n  async mapOriginateParamsToWalletParams(params: () => Promise<WalletOriginateParams>) {\n    return attachKind(await params(), OpKind.ORIGINATION);\n  }\n\n  async mapDelegateParamsToWalletParams(params: () => Promise<WalletDelegateParams>) {\n    return attachKind(await params(), OpKind.DELEGATION);\n  }\n\n  async sendOperations(params: WalletParamsWithKind[]) {\n    const op = await this.context.batch.batch(params as any).send();\n    return op.hash;\n  }\n}\n","import { TransactionOperation } from '../../operations/transaction-operation';\nimport { TransferParams } from '../../operations/types';\nimport { ContractProvider } from '../interface';\nimport { TransactionWalletOperation, Wallet } from '../../wallet';\nimport { ParameterSchema } from \"@taquito/michelson-encoder\";\nimport { ContractMethodInterface, ExplicitTransferParams, SendParams } from './contract-method-interface';\nimport { DEFAULT_SMART_CONTRACT_METHOD_NAME } from '../contract';\n\n/**\n * @description Utility class to send smart contract operation\n * The format for the arguments is the object representation\n */\nexport class ContractMethodObject<T extends ContractProvider | Wallet> implements ContractMethodInterface {\n    constructor(\n        private provider: T,\n        private address: string,\n        private parameterSchema: ParameterSchema,\n        private name: string,\n        private args: any = 'unit',\n        private isMultipleEntrypoint = true,\n        private isAnonymous = false\n    ) { }\n\n    /**\n     * @description Get the signature of the smart contract method\n     */\n    getSignature() {\n        return this.isAnonymous\n            ? this.parameterSchema.ExtractSchema()[this.name]\n            : this.parameterSchema.ExtractSchema();\n    }\n\n    /**\n     *\n     * @description Send the smart contract operation\n     *\n     * @param Options generic operation parameter\n     */\n    send(\n        params: Partial<SendParams> = {}\n    ): Promise<T extends Wallet ? TransactionWalletOperation : TransactionOperation> {\n        if (this.provider instanceof Wallet) {\n            return (this.provider as unknown as Wallet).transfer(this.toTransferParams(params)).send() as any;\n        } else {\n            return this.provider.transfer(this.toTransferParams(params)) as any;\n        }\n    }\n\n    /**\n     *\n     * @description Create transfer params to be used with TezosToolkit.contract.transfer methods\n     *\n     * @param Options generic transfer operation parameters\n     */\n    toTransferParams({\n        fee,\n        gasLimit,\n        storageLimit,\n        source,\n        amount = 0,\n        mutez = false,\n    }: Partial<SendParams> = {}): TransferParams {\n        const fullTransferParams: ExplicitTransferParams = {\n            to: this.address,\n            amount,\n            fee,\n            mutez,\n            source,\n            gasLimit,\n            storageLimit,\n            parameter: {\n                entrypoint: this.isMultipleEntrypoint ? this.name : DEFAULT_SMART_CONTRACT_METHOD_NAME,\n                value: this.isAnonymous\n                    ? this.parameterSchema.EncodeObject({ [this.name]: this.args })\n                    : this.parameterSchema.EncodeObject(this.args),\n            },\n        };\n        return fullTransferParams;\n    }\n}","import { ViewSchema } from '@taquito/michelson-encoder';\nimport {\n  MichelsonV1Expression,\n  MichelsonV1ExpressionExtended,\n  RpcClientInterface,\n  RPCRunCodeParam,\n} from '@taquito/rpc';\nimport { validateAddress, ValidationResult } from '@taquito/utils';\nimport {\n  InvalidViewSimulationContext,\n  InvalidViewParameterError,\n  ViewSimulationError,\n  validateAndExtractFailwith,\n} from '../errors';\n\nconst runCodeHelper = (\n  viewArgsType: MichelsonV1ExpressionExtended,\n  viewReturnType: MichelsonV1ExpressionExtended,\n  contractStorageType: MichelsonV1Expression,\n  viewInstructions: MichelsonV1ExpressionExtended[],\n  viewArgs: MichelsonV1Expression,\n  contractStorageValue: MichelsonV1Expression,\n  balance: string,\n  chain_id: string,\n  source?: string,\n  amount = '0'\n): RPCRunCodeParam => {\n  return {\n    script: [\n      { prim: 'parameter', args: [{ prim: 'pair', args: [viewArgsType, contractStorageType] }] },\n      { prim: 'storage', args: [{ prim: 'option', args: [viewReturnType] }] },\n      {\n        prim: 'code',\n        args: [\n          [\n            { prim: 'CAR' },\n            viewInstructions,\n            { prim: 'SOME' },\n            { prim: 'NIL', args: [{ prim: 'operation' }] },\n            { prim: 'PAIR' },\n          ],\n        ],\n      },\n    ],\n    storage: { prim: 'None' },\n    input: { prim: 'Pair', args: [viewArgs, contractStorageValue] },\n    amount,\n    balance,\n    chain_id,\n    source,\n  };\n};\n\nexport interface ExecutionContextParams {\n  source?: string;\n  viewCaller: string;\n}\n\nexport class OnChainView {\n  constructor(\n    private _rpc: RpcClientInterface,\n    private _contractAddress: string,\n    private _smartContractViewSchema: ViewSchema,\n    private _contractStorageType: MichelsonV1Expression,\n    private _contractStorageValue: MichelsonV1Expression,\n    private _args: any = 'Unit'\n  ) {}\n\n  /**\n   * @description Get the signature of the smart contract view\n   */\n  getSignature() {\n    return {\n      parameter: this._smartContractViewSchema.extractArgsSchema(),\n      result: this._smartContractViewSchema.extractResultSchema(),\n    };\n  }\n\n  /**\n   * @description Get the result of the view simulation\n   * @param executionContext.source the public key hash of the account who initialized this view execution.\n   * @param executionContext.viewCaller the contract address which is the caller of view.\n   */\n  async executeView(executionContext: ExecutionContextParams) {\n    this.verifyContextExecution(executionContext);\n    const balance = (await this._rpc.getBalance(this._contractAddress)).toString();\n    const chainId = await this._rpc.getChainId();\n    return this.executeViewAndDecodeResult(\n      runCodeHelper(\n        this._smartContractViewSchema.viewArgsType,\n        this._smartContractViewSchema.viewReturnType,\n        this._contractStorageType,\n        this.adaptViewCodeToContext(\n          this._smartContractViewSchema.instructions,\n          executionContext.viewCaller,\n          balance\n        ),\n        this.transformArgsToMichelson(),\n        this._contractStorageValue,\n        balance,\n        chainId,\n        executionContext.source\n      )\n    );\n  }\n\n  private verifyContextExecution(executionContext: ExecutionContextParams) {\n    if (\n      executionContext.source &&\n      validateAddress(executionContext.source) !== ValidationResult.VALID\n    ) {\n      throw new InvalidViewSimulationContext(\n        `The source account who initialized the view execution is invalid: ${executionContext.source}.`\n      );\n    }\n    if (\n      !executionContext.viewCaller ||\n      validateAddress(executionContext.viewCaller) !== ValidationResult.VALID\n    ) {\n      throw new InvalidViewSimulationContext(\n        `The contract which is the caller of view is invalid: ${executionContext.viewCaller}.`\n      );\n    }\n  }\n\n  private transformArgsToMichelson() {\n    try {\n      return this._smartContractViewSchema.encodeViewArgs(this._args);\n    } catch (error) {\n      throw new InvalidViewParameterError(\n        this._smartContractViewSchema.viewName,\n        this.getSignature(),\n        this._args,\n        error\n      );\n    }\n  }\n  /**\n   * @description Loops through the view's instructions and replace BALANCE, SENDER, SELF_ADDRESS and AMOUNT with Michelson expressions that match the current context, if applicable.\n   *\n   * Certain specific instructions have different semantics in view:\n   * BALANCE represents the current amount of mutez held by the contract where view is;\n   * SENDER represents the contract which is the caller of view;\n   * SELF_ADDRESS represents the contract where view is;\n   * AMOUNT is always 0 mutez.\n   *\n   */\n  private adaptViewCodeToContext(\n    instructions: MichelsonV1ExpressionExtended[],\n    viewCaller: string,\n    contractBalance: string\n  ) {\n    const instructionsToReplace = {\n      BALANCE: [{ prim: 'PUSH', args: [{ prim: 'mutez' }, { int: contractBalance }] }],\n      SENDER: [{ prim: 'PUSH', args: [{ prim: 'address' }, { string: viewCaller }] }],\n      SELF_ADDRESS: [\n        { prim: 'PUSH', args: [{ prim: 'address' }, { string: this._contractAddress }] },\n      ],\n      AMOUNT: [{ prim: 'PUSH', args: [{ prim: 'mutez' }, { int: '0' }] }],\n    };\n\n    instructions.forEach((inst: any, i: number) => {\n      if (inst.prim in instructionsToReplace) {\n        instructions[i] = Object(instructionsToReplace)[inst.prim];\n      }\n      if (inst.args && inst.args.length !== 0) {\n        this.adaptViewCodeToContext(inst.args, viewCaller, contractBalance);\n      } else if (Array.isArray(inst)) {\n        this.adaptViewCodeToContext(inst, viewCaller, contractBalance);\n      }\n    });\n    return instructions;\n  }\n\n  private async executeViewAndDecodeResult(viewScript: RPCRunCodeParam) {\n    let storage: MichelsonV1ExpressionExtended;\n    try {\n      storage = (await this._rpc.runCode(viewScript)).storage as MichelsonV1ExpressionExtended;\n    } catch (error: any) {\n      const failWith = validateAndExtractFailwith(error);\n      throw failWith\n        ? new ViewSimulationError(\n            `The simulation of the on-chain view named ${\n              this._smartContractViewSchema.viewName\n            } failed with: ${JSON.stringify(failWith)}`,\n            this._smartContractViewSchema.viewName,\n            failWith,\n            error\n          )\n        : error;\n    }\n    if (!storage.args) {\n      throw new ViewSimulationError(\n        `View simulation failed with an invalid result: ${storage}`,\n        this._smartContractViewSchema.viewName\n      );\n    }\n    return this._smartContractViewSchema.decodeViewResult(storage.args[0]);\n  }\n}\n","import { Wallet } from '../../wallet';\nimport { ContractProvider } from '../../contract';\nimport { ContractMethodObject } from './contract-method-object-param';\nimport { ContractMethod } from './contract-method-flat-param';\nimport { ParameterSchema, ViewSchema } from '@taquito/michelson-encoder';\nimport { RpcClientInterface, MichelsonV1Expression } from '@taquito/rpc';\nimport { OnChainView } from './contract-on-chain-view';\n\nexport class ContractMethodFactory<T extends ContractProvider | Wallet> {\n  constructor(private provider: T, private contractAddress: string) {}\n\n  createContractMethodFlatParams(\n    smartContractMethodSchema: ParameterSchema,\n    smartContractMethodName: string,\n    args: any[],\n    isMultipleEntrypoint = true,\n    isAnonymous = false\n  ) {\n    return new ContractMethod<T>(\n      this.provider,\n      this.contractAddress,\n      smartContractMethodSchema,\n      smartContractMethodName,\n      args,\n      isMultipleEntrypoint,\n      isAnonymous\n    );\n  }\n\n  createContractMethodObjectParam(\n    smartContractMethodSchema: ParameterSchema,\n    smartContractMethodName: string,\n    args: any[],\n    isMultipleEntrypoint = true,\n    isAnonymous = false\n  ) {\n    return new ContractMethodObject<T>(\n      this.provider,\n      this.contractAddress,\n      smartContractMethodSchema,\n      smartContractMethodName,\n      args,\n      isMultipleEntrypoint,\n      isAnonymous\n    );\n  }\n\n  createContractViewObjectParam(\n    rpc: RpcClientInterface,\n    smartContractViewSchema: ViewSchema,\n    contractStorageType: MichelsonV1Expression,\n    contractStorageValue: MichelsonV1Expression,\n    viewArgs: any\n  ) {\n    return new OnChainView(\n      rpc,\n      this.contractAddress,\n      smartContractViewSchema,\n      contractStorageType,\n      contractStorageValue,\n      viewArgs\n    );\n  }\n}\n","import { MichelsonV1Expression } from '@taquito/rpc';\nimport { Contract, ContractAbstraction, WalletContract } from './contract';\nimport { TezosOperationError } from '../operations/operation-errors';\nimport { ContractProvider } from './interface';\nimport { Wallet } from '../wallet';\n\nexport default class LambdaView {\n  public readonly voidLambda: object;\n\n  constructor(\n    private lambdaContract: Contract | WalletContract,\n    private viewContract: ContractAbstraction<ContractProvider | Wallet>,\n    public readonly viewMethod: string = 'default',\n    private contractParameter: MichelsonV1Expression = { prim: 'Unit' }\n  ) {\n    this.voidLambda = this.createVoidLambda();\n  }\n\n  async execute(): Promise<any> {\n    try {\n      await this.lambdaContract.methods.default(this.voidLambda).send();\n    } catch (ex) {\n      if (ex instanceof TezosOperationError) {\n        const lastError: any = ex.errors[ex.errors.length - 1];\n\n        const failedWith = lastError.with;\n        return failedWith;\n      } else {\n        throw ex;\n      }\n    }\n  }\n\n  private createVoidLambda(): object {\n    const [parameter, callback] = this.getView();\n\n    let contractArgs: MichelsonV1Expression[] = [\n      {\n        prim: 'pair',\n        args: [parameter, { prim: 'contract', args: [callback] }],\n      },\n    ];\n\n    if (this.viewMethod === 'default') {\n      contractArgs = ([{ string: '%default' }] as MichelsonV1Expression[]).concat(contractArgs);\n    }\n\n    return [\n      { prim: 'PUSH', args: [{ prim: 'mutez' }, { int: '0' }] },\n      { prim: 'NONE', args: [{ prim: 'key_hash' }] },\n      {\n        prim: 'CREATE_CONTRACT',\n        args: [\n          [\n            { prim: 'parameter', args: [callback] },\n            { prim: 'storage', args: [{ prim: 'unit' }] },\n            {\n              prim: 'code',\n              args: [[{ prim: 'CAR' }, { prim: 'FAILWITH' }]],\n            },\n          ],\n        ],\n      },\n      {\n        prim: 'DIP',\n        args: [\n          [\n            {\n              prim: 'DIP',\n              args: [\n                [\n                  {\n                    prim: 'LAMBDA',\n                    args: [\n                      {\n                        prim: 'pair',\n                        args: [{ prim: 'address' }, { prim: 'unit' }],\n                      },\n                      {\n                        prim: 'pair',\n                        args: [{ prim: 'list', args: [{ prim: 'operation' }] }, { prim: 'unit' }],\n                      },\n                      [\n                        { prim: 'CAR' },\n                        { prim: 'CONTRACT', args: [callback] },\n                        {\n                          prim: 'IF_NONE',\n                          args: [\n                            [\n                              {\n                                prim: 'PUSH',\n                                args: [{ prim: 'string' }, { string: `Callback type unmatched` }],\n                              },\n                              { prim: 'FAILWITH' },\n                            ],\n                            [],\n                          ],\n                        },\n                        {\n                          prim: 'PUSH',\n                          args: [parameter, this.contractParameter],\n                        },\n                        { prim: 'PAIR' },\n                        {\n                          prim: 'DIP',\n                          args: [\n                            [\n                              {\n                                prim: 'PUSH',\n                                args: [\n                                  { prim: 'address' },\n                                  { string: `${this.viewContract.address}%${this.viewMethod}` },\n                                ],\n                              },\n                              { prim: 'DUP' },\n                              { prim: 'CONTRACT', args: contractArgs },\n                              {\n                                prim: 'IF_NONE',\n                                args: [\n                                  [\n                                    {\n                                      prim: 'PUSH',\n                                      args: [\n                                        { prim: 'string' },\n                                        { string: `Contract does not exist` },\n                                      ],\n                                    },\n                                    { prim: 'FAILWITH' },\n                                  ],\n                                  [{ prim: 'DIP', args: [[{ prim: 'DROP' }]] }],\n                                ],\n                              },\n                              {\n                                prim: 'PUSH',\n                                args: [{ prim: 'mutez' }, { int: '0' }],\n                              },\n                            ],\n                          ],\n                        },\n                        { prim: 'TRANSFER_TOKENS' },\n                        {\n                          prim: 'DIP',\n                          args: [[{ prim: 'NIL', args: [{ prim: 'operation' }] }]],\n                        },\n                        { prim: 'CONS' },\n                        { prim: 'DIP', args: [[{ prim: 'UNIT' }]] },\n                        { prim: 'PAIR' },\n                      ],\n                    ],\n                  },\n                ],\n              ],\n            },\n            { prim: 'APPLY' },\n            {\n              prim: 'DIP',\n              args: [\n                [\n                  {\n                    prim: 'PUSH',\n                    args: [{ prim: 'address' }, { string: this.lambdaContract.address }],\n                  },\n                  { prim: 'DUP' },\n                  {\n                    prim: 'CONTRACT',\n                    args: [\n                      {\n                        prim: 'lambda',\n                        args: [\n                          { prim: 'unit' },\n                          {\n                            prim: 'pair',\n                            args: [\n                              { prim: 'list', args: [{ prim: 'operation' }] },\n                              { prim: 'unit' },\n                            ],\n                          },\n                        ],\n                      },\n                    ],\n                  },\n                  {\n                    prim: 'IF_NONE',\n                    args: [\n                      [\n                        {\n                          prim: 'PUSH',\n                          args: [{ prim: 'string' }, { string: `Contract does not exists` }],\n                        },\n                        { prim: 'FAILWITH' },\n                      ],\n                      [{ prim: 'DIP', args: [[{ prim: 'DROP' }]] }],\n                    ],\n                  },\n                  { prim: 'PUSH', args: [{ prim: 'mutez' }, { int: '0' }] },\n                ],\n              ],\n            },\n            { prim: 'TRANSFER_TOKENS' },\n            {\n              prim: 'DIP',\n              args: [[{ prim: 'NIL', args: [{ prim: 'operation' }] }]],\n            },\n            { prim: 'CONS' },\n          ],\n        ],\n      },\n      { prim: 'CONS' },\n      { prim: 'DIP', args: [[{ prim: 'UNIT' }]] },\n      { prim: 'PAIR' },\n    ];\n  }\n\n  private getView(): [MichelsonV1Expression, MichelsonV1Expression] {\n    const entrypoints = this.viewContract.entrypoints.entrypoints;\n    const entrypoint = entrypoints[this.viewMethod] as MichelsonV1Expression;\n\n    if (!entrypoint) {\n      throw Error(\n        `Contract at ${this.viewContract.address} does not have entrypoint: ${this.viewMethod}`\n      );\n    }\n\n    if (!('prim' in entrypoint) || !entrypoint.args) {\n      // TODO: Enhance this error message to be more descriptive\n      throw Error('Entrypoint args undefined');\n    }\n\n    const args = Array.from(entrypoint.args) as [MichelsonV1Expression, MichelsonV1Expression];\n    const [parameter, callbackContract] = args;\n    if ('annots' in parameter) {\n      delete parameter['annots'];\n    }\n\n    if (!('prim' in callbackContract) || !callbackContract.args) {\n      // TODO: Enhance this error message to be more descriptive\n      throw Error('Callback contract args undefined');\n    }\n\n    let message;\n    if (entrypoint.prim !== 'pair') {\n      message = `Expected {'prim': 'pair', ..} but found {'prim': ${entrypoint.prim}, ..}`;\n    } else if (args.length !== 2) {\n      message = `Expected an Array of length 2, but found: ${args}`;\n    } else if (callbackContract.prim !== 'contract') {\n      message = `Expected a {prim: 'contract', ...}, but found: ${callbackContract.prim}`;\n    } else if (callbackContract.args && callbackContract.args.length !== 1) {\n      message = `Expected a single argument to 'contract', but found: ${callbackContract.args}`;\n    }\n\n    if (message) throw Error(message);\n\n    return [parameter, callbackContract.args[0]] as [MichelsonV1Expression, MichelsonV1Expression];\n  }\n}\n","import { ParameterSchema, Schema, ViewSchema } from '@taquito/michelson-encoder';\nimport {\n  EntrypointsResponse,\n  MichelsonV1Expression,\n  RpcClientInterface,\n  ScriptResponse,\n} from '@taquito/rpc';\nimport { ChainIds, DefaultLambdaAddresses } from '../constants';\nimport { Wallet } from '../wallet';\nimport { ContractMethodFactory } from './contract-methods/contract-method-factory';\nimport { ContractMethod } from './contract-methods/contract-method-flat-param';\nimport { ContractMethodObject } from './contract-methods/contract-method-object-param';\nimport { OnChainView } from './contract-methods/contract-on-chain-view';\nimport { InvalidParameterError, UndefinedLambdaContractError } from './errors';\nimport { ContractProvider, StorageProvider } from './interface';\nimport LambdaView from './lambda-view';\n\nexport const DEFAULT_SMART_CONTRACT_METHOD_NAME = 'default';\n\n/**\n * @description Utility class to retrieve data from a smart contract's storage without incurring fees via a contract's view method\n */\nexport class ContractView {\n  constructor(\n    private currentContract: ContractAbstraction<ContractProvider | Wallet>,\n    private provider: ContractProvider,\n    private name: string,\n    private chainId: string,\n    private callbackParametersSchema: ParameterSchema,\n    private parameterSchema: ParameterSchema,\n    private args: any[]\n  ) {}\n\n  /**\n   *\n   * @description Find which lambda contract to use based on the current network,\n   * encode parameters to Michelson,\n   * create an instance of Lambdaview to retrieve data, and\n   * Decode Michelson response\n   *\n   * @param Options Address of a lambda contract (sandbox users)\n   */\n  async read(customLambdaAddress?: string) {\n    let lambdaAddress;\n\n    // TODO Verify if the 'customLambdaAdress' is a valid originated contract and if not, return an appropriate error message.  \n    if (customLambdaAddress) {\n      lambdaAddress = customLambdaAddress;\n    } else if (this.chainId === ChainIds.GRANADANET) {\n      lambdaAddress = DefaultLambdaAddresses.GRANADANET;\n    } else if (this.chainId === ChainIds.HANGZHOUNET) {\n      lambdaAddress = DefaultLambdaAddresses.HANGZHOUNET;\n    } else if (this.chainId === ChainIds.ITHACANET) {\n      lambdaAddress = DefaultLambdaAddresses.ITHACANET;\n    } else if (this.chainId === ChainIds.ITHACANET2) {\n      lambdaAddress = DefaultLambdaAddresses.ITHACANET2;\n    } else if (this.chainId === ChainIds.MAINNET) {\n      lambdaAddress = DefaultLambdaAddresses.MAINNET;\n    } else {\n      throw new UndefinedLambdaContractError();\n    }\n\n    const lambdaContract = await this.provider.at(lambdaAddress);\n    const arg = this.parameterSchema.Encode(...this.args);\n    const lambdaView = new LambdaView(lambdaContract, this.currentContract, this.name, arg);\n    const failedWith = await lambdaView.execute();\n    const response = this.callbackParametersSchema.Execute(failedWith);\n    return response;\n  }\n}\n\nconst validateArgs = (args: any[], schema: ParameterSchema, name: string) => {\n  const sigs = schema.ExtractSignatures();\n\n  if (!sigs.find((x: any[]) => x.length === args.length)) {\n    throw new InvalidParameterError(name, sigs, args);\n  }\n};\n\n// lambda view tzip4\nconst isView = (entrypoint: MichelsonV1Expression): boolean => {\n  let isView = false;\n  if ('prim' in entrypoint && entrypoint.prim === 'pair' && entrypoint.args) {\n    const lastElement = entrypoint.args[entrypoint.args.length - 1];\n    if ('prim' in lastElement && lastElement.prim === 'contract') {\n      isView = true;\n    }\n  }\n  return isView;\n};\n\nexport type Contract = ContractAbstraction<ContractProvider>;\nexport type WalletContract = ContractAbstraction<Wallet>;\n\nconst isContractProvider = (variableToCheck: any): variableToCheck is ContractProvider =>\n  variableToCheck.contractProviderTypeSymbol !== undefined;\n\n\ntype DefaultMethods<T extends ContractProvider | Wallet> = Record<string, (...args: any[]) => ContractMethod<T>>;\ntype DefaultMethodsObject<T extends ContractProvider | Wallet> = Record<string, (args?: any) => ContractMethodObject<T>>;\ntype DefaultViews = Record<string, (...args: any[]) => ContractView>;\ntype DefaultContractViews = Record<string, (args?: any) => OnChainView>;\ntype DefaultStorage = unknown; // Record<string, unknown>;\n\ntype PromiseReturnType<T extends (...args: any) => any> = T extends (...args: any) => Promise<infer R> ? R : any;\nexport type ContractStorageType<T extends ContractAbstraction<ContractProvider|Wallet>> = PromiseReturnType<T['storage']>;\nexport type DefaultContractType = ContractAbstraction<ContractProvider>;\nexport type DefaultWalletType = ContractAbstraction<Wallet>;\n\n/**\n * @description Smart contract abstraction\n */\nexport class ContractAbstraction<T extends ContractProvider | Wallet,\n  TMethods extends DefaultMethods<T> = DefaultMethods<T>,\n  TMethodsObject extends DefaultMethodsObject<T> = DefaultMethodsObject<T>,\n  TViews extends DefaultViews = DefaultViews,\n  TContractViews extends DefaultContractViews = DefaultContractViews,\n  TStorage extends DefaultStorage = DefaultStorage\n> {\n  private contractMethodFactory: ContractMethodFactory<T>;\n  /**\n   * @description Contains methods that are implemented by the target Tezos Smart Contract, and offers the user to call the Smart Contract methods as if they were native TS/JS methods.\n   * NB: if the contract contains annotation it will include named properties; if not it will be indexed by a number.\n   *\n   */\n  public methods: TMethods = {} as TMethods;\n  /**\n   * @description Contains methods that are implemented by the target Tezos Smart Contract, and offers the user to call the Smart Contract methods as if they were native TS/JS methods.\n   * `methodsObject` serves the exact same purpose as the `methods` member. The difference is that it allows passing the parameter in an object format when calling the smart contract method (instead of the flattened representation)\n   * NB: if the contract contains annotation it will include named properties; if not it will be indexed by a number.\n   *\n   */\n  public methodsObject: TMethodsObject = {} as TMethodsObject;\n  /**\n   * @description Contains lamda views (tzip4) that are implemented by the target Tezos Smart Contract, and offers the user to call the lambda views as if they were native TS/JS methods.\n   * NB: These are the view defined in the tzip4 standard, not the views introduced by the Hangzhou protocol.\n   */\n  public views: TViews = {} as TViews;\n  /**\n   * @description Contains on-chain views that are defined by the target Tezos Smart Contract, and offers the user to simulate the views execution as if they were native TS/JS methods.\n   * NB: the expected format for the parameter when calling a smart contract view is the object format (same format as for the storage) and not the flattened representation.\n   *\n   */\n  public contractViews: TContractViews = {} as TContractViews;\n\n  public readonly schema: Schema;\n\n  public readonly parameterSchema: ParameterSchema;\n  public readonly viewSchema: ViewSchema[];\n\n  constructor(\n    public readonly address: string,\n    public readonly script: ScriptResponse,\n    provider: T,\n    private storageProvider: StorageProvider,\n    public readonly entrypoints: EntrypointsResponse,\n    private chainId: string,\n    rpc: RpcClientInterface\n  ) {\n    this.contractMethodFactory = new ContractMethodFactory(provider, address);\n    this.schema = Schema.fromRPCResponse({ script: this.script });\n    this.parameterSchema = ParameterSchema.fromRPCResponse({ script: this.script });\n\n    this.viewSchema = ViewSchema.fromRPCResponse({ script: this.script });\n    if (this.viewSchema.length !== 0) {\n      this._initializeOnChainViews(this, rpc, this.viewSchema);\n    }\n    this._initializeMethods(this, provider, this.entrypoints.entrypoints, this.chainId);\n  }\n\n  private _initializeMethods(\n    currentContract: ContractAbstraction<T>,\n    provider: T,\n    entrypoints: {\n      [key: string]: object;\n    },\n    chainId: string\n  ) {\n    const parameterSchema = this.parameterSchema;\n    const keys = Object.keys(entrypoints);\n    if (parameterSchema.isMultipleEntryPoint) {\n      keys.forEach((smartContractMethodName) => {\n        const smartContractMethodSchema = new ParameterSchema(entrypoints[smartContractMethodName]);\n\n        (this.methods as DefaultMethods<T>)[smartContractMethodName] = function (...args: any[]) {\n          return currentContract.contractMethodFactory.createContractMethodFlatParams(\n            smartContractMethodSchema,\n            smartContractMethodName,\n            args\n          );\n        };\n\n        (this.methodsObject as DefaultMethodsObject<T>)[smartContractMethodName] = function (args: any) {\n          return currentContract.contractMethodFactory.createContractMethodObjectParam(\n            smartContractMethodSchema,\n            smartContractMethodName,\n            args\n          );\n        };\n\n        if (isContractProvider(provider)) {\n          if (isView(entrypoints[smartContractMethodName])) {\n            const view = function (...args: any[]) {\n              const entrypointParamWithoutCallback = (entrypoints[smartContractMethodName] as any)\n                .args[0];\n              const smartContractMethodSchemaWithoutCallback = new ParameterSchema(\n                entrypointParamWithoutCallback\n              );\n              const parametersCallback = (entrypoints[smartContractMethodName] as any).args[1]\n                .args[0];\n              const smartContractMethodCallbackSchema = new ParameterSchema(parametersCallback);\n\n              validateArgs(args, smartContractMethodSchemaWithoutCallback, smartContractMethodName);\n              return new ContractView(\n                currentContract,\n                provider,\n                smartContractMethodName,\n                chainId,\n                smartContractMethodCallbackSchema,\n                smartContractMethodSchemaWithoutCallback,\n                args\n              );\n            };\n            (this.views as DefaultViews)[smartContractMethodName] = view;\n          }\n        }\n      });\n\n      // Deal with methods with no annotations which were not discovered by the RPC endpoint\n      // Methods with no annotations are discovered using parameter schema\n      const anonymousMethods = Object.keys(parameterSchema.ExtractSchema()).filter(\n        (key) => Object.keys(entrypoints).indexOf(key) === -1\n      );\n\n      anonymousMethods.forEach((smartContractMethodName) => {\n        (this.methods as DefaultMethods<T>)[smartContractMethodName] = function (...args: any[]) {\n          return currentContract.contractMethodFactory.createContractMethodFlatParams(\n            parameterSchema,\n            smartContractMethodName,\n            args,\n            false,\n            true\n          );\n        };\n\n        (this.methodsObject as DefaultMethodsObject<T>)[smartContractMethodName] = function (args: any) {\n          return currentContract.contractMethodFactory.createContractMethodObjectParam(\n            parameterSchema,\n            smartContractMethodName,\n            args,\n            false,\n            true\n          );\n        };\n      });\n    } else {\n      const smartContractMethodSchema = this.parameterSchema;\n      (this.methods as DefaultMethods<T>)[DEFAULT_SMART_CONTRACT_METHOD_NAME] = function (...args: any[]) {\n        return currentContract.contractMethodFactory.createContractMethodFlatParams(\n          smartContractMethodSchema,\n          DEFAULT_SMART_CONTRACT_METHOD_NAME,\n          args,\n          false\n        );\n      };\n\n      (this.methodsObject as DefaultMethodsObject<T>)[DEFAULT_SMART_CONTRACT_METHOD_NAME] = function (args: any) {\n        return currentContract.contractMethodFactory.createContractMethodObjectParam(\n          smartContractMethodSchema,\n          DEFAULT_SMART_CONTRACT_METHOD_NAME,\n          args,\n          false\n        );\n      };\n    }\n  }\n\n  private _initializeOnChainViews(\n    currentContract: ContractAbstraction<T>,\n    rpc: RpcClientInterface,\n    allContractViews: ViewSchema[]\n  ) {\n    const storageType = this.schema.val;\n    const storageValue = this.script.storage;\n\n    allContractViews.forEach((viewSchema) => {\n      (this.contractViews as DefaultContractViews)[viewSchema.viewName] = function (args: any) {\n        return currentContract.contractMethodFactory.createContractViewObjectParam(\n          rpc,\n          viewSchema,\n          storageType,\n          storageValue,\n          args\n        );\n      };\n    });\n  }\n\n  /**\n   * @description Return a friendly representation of the smart contract storage\n   */\n  public storage<T extends TStorage = TStorage>() {\n    return this.storageProvider.getStorage<T>(this.address, this.schema);\n  }\n\n  /**\n   *\n   * @description Return a friendly representation of the smart contract big map value\n   *\n   * @param key BigMap key to fetch\n   *\n   * @deprecated getBigMapKey has been deprecated in favor of getBigMapKeyByID\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#post-block-id-context-contracts-contract-id-big-map-get\n   */\n  public bigMap(key: string) {\n    return this.storageProvider.getBigMapKey(this.address, key, this.schema);\n  }\n}\n","import { Schema, BigMapKeyType } from '@taquito/michelson-encoder';\nimport BigNumber from 'bignumber.js';\nimport { ContractProvider } from './interface';\nimport { HttpResponseError, STATUS_CODE } from '@taquito/http-utils';\n\nexport class BigMapAbstraction {\n  constructor(private id: BigNumber, private schema: Schema, private provider: ContractProvider) {}\n\n  /**\n   *\n   * @description Fetch one value in a big map\n   *\n   * @param keysToEncode Key to query (will be encoded properly according to the schema)\n   * @param block optional block level to fetch the values from (head will be use by default)\n   * @returns Return a well formatted json object of a big map value or undefined if the key is not found in the big map\n   *\n   */\n  async get<T>(keyToEncode: BigMapKeyType, block?: number) {\n    try {\n      const id = await this.provider.getBigMapKeyByID<T>(\n        this.id.toString(),\n        keyToEncode,\n        this.schema,\n        block\n      );\n      return id;\n    } catch (e) {\n      if (e instanceof HttpResponseError && e.status === STATUS_CODE.NOT_FOUND) {\n        return undefined;\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  /**\n   *\n   * @description Fetch multiple values in a big map\n   * All values will be fetched on the same block level. If a block is specified in the request, the values will be fetched at it.\n   * Otherwise, a first request will be done to the node to fetch the level of the head and all values will be fetched at this level.\n   * If one of the keys does not exist in the big map, its value will be set to undefined.\n   *\n   * @param keysToEncode Array of keys to query (will be encoded properly according to the schema)\n   * @param block optional block level to fetch the values from\n   * @param batchSize optional batch size representing the number of requests to execute in parallel\n   * @returns A MichelsonMap containing the keys queried in the big map and their value in a well-formatted JSON object format\n   *\n   */\n  async getMultipleValues<T>(keysToEncode: Array<BigMapKeyType>, block?: number, batchSize = 5) {\n    return this.provider.getBigMapKeysByID<T>(\n      this.id.toString(),\n      keysToEncode,\n      this.schema,\n      block,\n      batchSize\n    );\n  }\n\n  toJSON() {\n    return this.id.toString();\n  }\n\n  toString() {\n    return this.id.toString();\n  }\n}\n","import BigNumber from 'bignumber.js';\nimport { ContractProvider } from './interface';\n\nexport class SaplingStateAbstraction {\n    constructor(private id: BigNumber, private provider: ContractProvider) { }\n\n    /**\n     *\n     * @description Fetch the sapling state\n     * \n     * @param block optional block level to fetch the values from (head will be use by default)\n     * @returns Return a json object of the sapling_state\n     *\n     */\n    async getSaplingDiff(block?: number) {\n        return this.provider.getSaplingDiffByID(this.id.toString(), block);\n    }\n\n    getId() {\n        return this.id.toString();\n    }\n}\n","import { Schema, Semantic } from '@taquito/michelson-encoder';\nimport { BigMapAbstraction } from './big-map';\nimport { ContractProvider } from './interface';\nimport BigNumber from 'bignumber.js';\nimport { MichelsonV1Expression } from '@taquito/rpc';\nimport { SaplingStateAbstraction } from './sapling-state-abstraction';\n\n// Override the default michelson encoder semantic to provide richer abstraction over storage properties\nexport const smartContractAbstractionSemantic: (p: ContractProvider) => Semantic = (\n  provider: ContractProvider\n) => ({\n  // Provide a specific abstraction for BigMaps\n  big_map: (val: MichelsonV1Expression, code: MichelsonV1Expression) => {\n    if (!val || !('int' in val) || val.int === undefined) {\n      // Return an empty object in case of missing big map ID\n      return {};\n    } else {\n      const schema = new Schema(code);\n      return new BigMapAbstraction(new BigNumber(val.int), schema, provider);\n    }\n  },\n  sapling_state: (val: MichelsonV1Expression) => {\n    if (!val || !('int' in val) || val.int === undefined) {\n      // Return an empty object in case of missing sapling state ID\n      return {};\n    } else {\n      return new SaplingStateAbstraction(new BigNumber(val.int), provider);\n    }\n  }\n  /*\n  // TODO: embed useful other abstractions\n  'contract':  () => {},\n  'address':  () => {}\n  */\n});\n","import { HttpResponseError, STATUS_CODE } from '@taquito/http-utils';\nimport { BigMapKeyType, MichelsonMap, MichelsonMapKey, Schema } from '@taquito/michelson-encoder';\nimport { OpKind, ScriptResponse } from '@taquito/rpc';\nimport { encodeExpr } from '@taquito/utils';\nimport { OperationBatch } from '../batch/rpc-batch-provider';\nimport { Context } from '../context';\nimport { DelegateOperation } from '../operations/delegate-operation';\nimport { OperationEmitter } from '../operations/operation-emitter';\nimport { OriginationOperation } from '../operations/origination-operation';\nimport { RegisterGlobalConstantOperation } from '../operations/register-global-constant-operation';\nimport { RevealOperation } from '../operations/reveal-operation';\nimport { TransactionOperation } from '../operations/transaction-operation';\nimport {\n  DelegateParams,\n  isOpRequireReveal,\n  OriginateParams,\n  ParamsWithKind,\n  RegisterDelegateParams,\n  RegisterGlobalConstantParams,\n  RevealParams,\n  RPCOperation,\n  TransferParams,\n  withKind,\n} from '../operations/types';\nimport { DefaultContractType, ContractStorageType, ContractAbstraction } from './contract';\nimport { InvalidDelegationSource } from './errors';\nimport { ContractProvider, ContractSchema, EstimationProvider, StorageProvider } from './interface';\nimport {\n  createOriginationOperation,\n  createRegisterDelegateOperation,\n  createRegisterGlobalConstantOperation,\n  createRevealOperation,\n  createSetDelegateOperation,\n  createTransferOperation,\n} from './prepare';\nimport { smartContractAbstractionSemantic } from './semantic';\nimport { \n  validateAddress,\n  validateContractAddress,\n  InvalidContractAddressError,\n  InvalidAddressError, \n  ValidationResult \n} from '@taquito/utils';\nexport class RpcContractProvider\n  extends OperationEmitter\n  implements ContractProvider, StorageProvider\n{\n  constructor(context: Context, private estimator: EstimationProvider) {\n    super(context);\n  }\n  contractProviderTypeSymbol = Symbol.for('taquito--provider-type-symbol');\n\n  /**\n   *\n   * @description Return a well formatted json object of the contract storage\n   *\n   * @param contract contract address you want to get the storage from\n   * @param schema optional schema can either be the contract script rpc response or a michelson-encoder schema\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-contracts-contract-id-script\n   */\n  async getStorage<T>(contract: string, schema?: ContractSchema): Promise<T> {\n    if (validateContractAddress(contract) !== ValidationResult.VALID) {\n      throw new InvalidContractAddressError(`Invalid contract address: ${contract}`);\n    }\n    if (!schema) {\n      schema = await this.rpc.getNormalizedScript(contract);\n    }\n\n    let contractSchema: Schema;\n    if (Schema.isSchema(schema)) {\n      contractSchema = schema;\n    } else {\n      contractSchema = Schema.fromRPCResponse({ script: schema as ScriptResponse });\n    }\n\n    const storage = await this.rpc.getStorage(contract);\n\n    return contractSchema.Execute(storage, smartContractAbstractionSemantic(this)) as T; // Cast into T because only the caller can know the true type of the storage\n  }\n\n  /**\n   *\n   * @description Return a well formatted json object of the contract big map storage\n   *\n   * @param contract contract address you want to get the storage from\n   * @param key contract big map key to fetch value from\n   * @param schema optional schema can either be the contract script rpc response or a michelson-encoder schema\n   *\n   * @deprecated Deprecated in favor of getBigMapKeyByID\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#post-block-id-context-contracts-contract-id-big-map-get\n   */\n  async getBigMapKey<T>(contract: string, key: string, schema?: ContractSchema): Promise<T> {\n    if (validateContractAddress(contract) !== ValidationResult.VALID) {\n      throw new InvalidContractAddressError(`Invalid contract address: ${contract}`);\n    }\n    if (!schema) {\n      schema = await this.rpc.getNormalizedScript(contract);\n    }\n\n    let contractSchema: Schema;\n    if (Schema.isSchema(schema)) {\n      contractSchema = schema;\n    } else {\n      contractSchema = Schema.fromRPCResponse({ script: schema as ScriptResponse });\n    }\n\n    const encodedKey = contractSchema.EncodeBigMapKey(key);\n\n    const val = await this.rpc.getBigMapKey(contract, encodedKey);\n\n    return contractSchema.ExecuteOnBigMapValue(val) as T; // Cast into T because only the caller can know the true type of the storage\n  }\n\n  /**\n   *\n   * @description Return a well formatted json object of a big map value\n   *\n   * @param id Big Map ID\n   * @param keyToEncode key to query (will be encoded properly according to the schema)\n   * @param schema Big Map schema (can be determined using your contract type)\n   * @param block optional block level to fetch the values from\n   *\n   * @see https://tezos.gitlab.io/api/rpc.html#get-block-id-context-big-maps-big-map-id-script-expr\n   */\n  async getBigMapKeyByID<T>(\n    id: string,\n    keyToEncode: BigMapKeyType,\n    schema: Schema,\n    block?: number\n  ): Promise<T> {\n    const { key, type } = schema.EncodeBigMapKey(keyToEncode);\n    const { packed } = await this.context.packer.packData({ data: key, type });\n\n    const encodedExpr = encodeExpr(packed);\n\n    const bigMapValue = block\n      ? await this.context.rpc.getBigMapExpr(id.toString(), encodedExpr, { block: String(block) })\n      : await this.context.rpc.getBigMapExpr(id.toString(), encodedExpr);\n\n    return schema.ExecuteOnBigMapValue(bigMapValue, smartContractAbstractionSemantic(this)) as T;\n  }\n\n  /**\n   *\n   * @description Fetch multiple values in a big map\n   * All values will be fetched on the same block level. If a block is specified in the request, the values will be fetched at it.\n   * Otherwise, a first request will be done to the node to fetch the level of the head and all values will be fetched at this level.\n   * If one of the keys does not exist in the big map, its value will be set to undefined.\n   *\n   * @param id Big Map ID\n   * @param keys Array of keys to query (will be encoded properly according to the schema)\n   * @param schema Big Map schema (can be determined using your contract type)\n   * @param block optional block level to fetch the values from\n   * @param batchSize optional batch size representing the number of requests to execute in parallel\n   * @returns A MichelsonMap containing the keys queried in the big map and their value in a well-formatted JSON object format\n   *\n   */\n  async getBigMapKeysByID<T>(\n    id: string,\n    keys: Array<BigMapKeyType>,\n    schema: Schema,\n    block?: number,\n    batchSize = 5\n  ): Promise<MichelsonMap<MichelsonMapKey, T | undefined>> {\n    const level = await this.getBlockForRequest(keys, block);\n    const bigMapValues = new MichelsonMap<MichelsonMapKey, T | undefined>();\n\n    // Execute batch of promises in series\n    let position = 0;\n    let results: Array<T | undefined> = [];\n\n    while (position < keys.length) {\n      const keysBatch = keys.slice(position, position + batchSize);\n      const batch = keysBatch.map((keyToEncode) =>\n        this.getBigMapValueOrUndefined<T>(keyToEncode, id, schema, level)\n      );\n      results = [...results, ...(await Promise.all(batch))];\n      position += batchSize;\n    }\n\n    for (let i = 0; i < results.length; i++) {\n      bigMapValues.set(keys[i], results[i]);\n    }\n\n    return bigMapValues;\n  }\n\n  private async getBlockForRequest(keys: Array<BigMapKeyType>, block?: number) {\n    return keys.length === 1 || typeof block !== 'undefined'\n      ? block\n      : (await this.rpc.getBlock())?.header.level;\n  }\n\n  private async getBigMapValueOrUndefined<T>(\n    keyToEncode: BigMapKeyType,\n    id: string,\n    schema: Schema,\n    level?: number\n  ) {\n    try {\n      return await this.getBigMapKeyByID<T>(id, keyToEncode, schema, level);\n    } catch (ex) {\n      if (ex instanceof HttpResponseError && ex.status === STATUS_CODE.NOT_FOUND) {\n        return;\n      } else {\n        throw ex;\n      }\n    }\n  }\n\n  /**\n   *\n   * @description Return a well formatted json object of a sapling state\n   *\n   * @param id Sapling state ID\n   * @param block optional block level to fetch the value from\n   *\n   */\n  async getSaplingDiffByID(id: string, block?: number) {\n    const saplingState = block\n      ? await this.context.rpc.getSaplingDiffById(id.toString(), { block: String(block) })\n      : await this.context.rpc.getSaplingDiffById(id.toString());\n    return saplingState;\n  }\n\n  private async addRevealOperationIfNeeded(operation: RPCOperation, publicKeyHash: string) {\n    if (isOpRequireReveal(operation)) {\n      const ops: RPCOperation[] = [operation];\n      const publicKey = await this.signer.publicKey();\n      const estimateReveal = await this.estimator.reveal();\n      if (estimateReveal) {\n        const reveal: withKind<RevealParams, OpKind.REVEAL> = { kind: OpKind.REVEAL };\n        const estimatedReveal = await this.estimate(reveal, async () => estimateReveal);\n        ops.unshift(await createRevealOperation({ ...estimatedReveal }, publicKeyHash, publicKey));\n        return ops;\n      }\n    }\n    return operation;\n  }\n\n  /**\n   *\n   * @description Originate a new contract according to the script in parameters. Will sign and inject an operation using the current context\n   *\n   * @returns An operation handle with the result from the rpc node\n   *\n   * @warn You cannot specify storage and init at the same time (use init to pass the raw michelson representation of storage)\n   *\n   * @param OriginationOperation Originate operation parameter\n   */\n  async originate<TContract extends DefaultContractType = DefaultContractType>(params: OriginateParams<ContractStorageType<TContract>>) {\n    const estimate = await this.estimate(params, this.estimator.originate.bind(this.estimator));\n\n    const publicKeyHash = await this.signer.publicKeyHash();\n    const operation = await createOriginationOperation(\n      await this.context.parser.prepareCodeOrigination({\n        ...params,\n        ...estimate,\n      })\n    );\n    const ops = await this.addRevealOperationIfNeeded(operation, publicKeyHash);\n    const preparedOrigination = await this.prepareOperation({\n      operation: ops,\n      source: publicKeyHash,\n    });\n    const forgedOrigination = await this.forge(preparedOrigination);\n    const { hash, context, forgedBytes, opResponse } = await this.signAndInject(forgedOrigination);\n    return new OriginationOperation<TContract>(hash, operation, forgedBytes, opResponse, context, this);\n  }\n\n  /**\n   *\n   * @description Set the delegate for a contract. Will sign and inject an operation using the current context\n   *\n   * @returns An operation handle with the result from the rpc node\n   *\n   * @param SetDelegate operation parameter\n   */\n  async setDelegate(params: DelegateParams) {\n    if ( params.source && validateAddress(params.source) !== ValidationResult.VALID) {\n      throw new InvalidAddressError(`Invalid source Address: ${params.source}`);\n    }\n    if (params.delegate && validateAddress(params.delegate) !== ValidationResult.VALID) {\n      throw new InvalidAddressError(`Invalid delegate Address: ${params.delegate}`);\n    }\n\n    // Since babylon delegation source cannot smart contract\n    if (/kt1/i.test(params.source)) {\n      throw new InvalidDelegationSource(params.source);\n    }\n\n    const estimate = await this.estimate(params, this.estimator.setDelegate.bind(this.estimator));\n    const publicKeyHash = await this.signer.publicKeyHash();\n    const operation = await createSetDelegateOperation({ ...params, ...estimate });\n    const sourceOrDefault = params.source || publicKeyHash;\n    const ops = await this.addRevealOperationIfNeeded(operation, publicKeyHash);\n    const prepared = await this.prepareOperation({\n      operation: ops,\n      source: sourceOrDefault,\n    });\n    const opBytes = await this.forge(prepared);\n    const { hash, context, forgedBytes, opResponse } = await this.signAndInject(opBytes);\n    return new DelegateOperation(\n      hash,\n      operation,\n      sourceOrDefault,\n      forgedBytes,\n      opResponse,\n      context\n    );\n  }\n\n  /**\n   *\n   * @description Register the current address as delegate. Will sign and inject an operation using the current context\n   *\n   * @returns An operation handle with the result from the rpc node\n   *\n   * @param RegisterDelegate operation parameter\n   */\n  async registerDelegate(params: RegisterDelegateParams) {\n    const estimate = await this.estimate(\n      params,\n      this.estimator.registerDelegate.bind(this.estimator)\n    );\n    const source = await this.signer.publicKeyHash();\n    const operation = await createRegisterDelegateOperation({ ...params, ...estimate }, source);\n    const ops = await this.addRevealOperationIfNeeded(operation, source);\n    const prepared = await this.prepareOperation({ operation: ops });\n    const opBytes = await this.forge(prepared);\n    const { hash, context, forgedBytes, opResponse } = await this.signAndInject(opBytes);\n    return new DelegateOperation(hash, operation, source, forgedBytes, opResponse, context);\n  }\n\n  /**\n   *\n   * @description Transfer tz from current address to a specific address. Will sign and inject an operation using the current context\n   *\n   * @returns An operation handle with the result from the rpc node\n   *\n   * @param Transfer operation parameter\n   */\n  async transfer(params: TransferParams) {\n    if (validateAddress(params.to) !== ValidationResult.VALID) {\n      throw new InvalidAddressError(`Invalid address passed in 'to' parameter: ${params.to}`);\n    }\n    if (params.source && validateAddress(params.source) !== ValidationResult.VALID) {\n      throw new InvalidAddressError(`Invalid address passed in 'source' parameter: ${params.source}`);\n    }\n\n    const publickKeyHash = await this.signer.publicKeyHash();\n    const estimate = await this.estimate(params, this.estimator.transfer.bind(this.estimator));\n    const operation = await createTransferOperation({\n      ...params,\n      ...estimate,\n    });\n    const source = params.source || publickKeyHash;\n    const ops = await this.addRevealOperationIfNeeded(operation, publickKeyHash);\n    const prepared = await this.prepareOperation({ operation: ops, source: params.source });\n    const opBytes = await this.forge(prepared);\n    const { hash, context, forgedBytes, opResponse } = await this.signAndInject(opBytes);\n    return new TransactionOperation(hash, operation, source, forgedBytes, opResponse, context);\n  }\n\n  /**\n   *\n   * @description Reveal the current address. Will throw an error if the address is already revealed.\n   *\n   * @returns An operation handle with the result from the rpc node\n   *\n   * @param RevealParams operation parameter\n   */\n  async reveal(params: RevealParams) {\n    const publicKeyHash = await this.signer.publicKeyHash();\n    const estimateReveal = await this.estimator.reveal(params);\n    if (estimateReveal) {\n      const estimated = await this.estimate(params, async () => estimateReveal);\n      const operation = await createRevealOperation(\n        {\n          ...estimated,\n        },\n        publicKeyHash,\n        await this.signer.publicKey()\n      );\n      const prepared = await this.prepareOperation({ operation, source: publicKeyHash });\n      const opBytes = await this.forge(prepared);\n      const { hash, context, forgedBytes, opResponse } = await this.signAndInject(opBytes);\n      return new RevealOperation(hash, operation, publicKeyHash, forgedBytes, opResponse, context);\n    } else {\n      throw new Error('The current address is already revealed.');\n    }\n  }\n\n  /**\n   *\n   * @description Register a Micheline expression in a global table of constants. Will sign and inject an operation using the current context\n   *\n   * @returns An operation handle with the result from the rpc node\n   *\n   * @param params registerGlobalConstant operation parameter\n   */\n  async registerGlobalConstant(params: RegisterGlobalConstantParams) {\n    const publickKeyHash = await this.signer.publicKeyHash();\n    const estimate = await this.estimate(\n      params,\n      this.estimator.registerGlobalConstant.bind(this.estimator)\n    );\n    const operation = await createRegisterGlobalConstantOperation({\n      ...params,\n      ...estimate,\n    });\n    const ops = await this.addRevealOperationIfNeeded(operation, publickKeyHash);\n    const prepared = await this.prepareOperation({ operation: ops, source: publickKeyHash });\n    const opBytes = await this.forge(prepared);\n    const { hash, context, forgedBytes, opResponse } = await this.signAndInject(opBytes);\n    return new RegisterGlobalConstantOperation(\n      hash,\n      operation,\n      publickKeyHash,\n      forgedBytes,\n      opResponse,\n      context\n    );\n  }\n\n  async at<T extends DefaultContractType = DefaultContractType>(\n    address: string,\n    contractAbstractionComposer: ContractAbstractionComposer<T> = (x) => x as any\n  ): Promise<T> {\n    if (validateContractAddress(address) !== ValidationResult.VALID) {\n      throw new InvalidContractAddressError(`Invalid contract address: ${address}`);\n    }\n    const rpc = this.context.withExtensions().rpc;\n    const script = await rpc.getNormalizedScript(address);\n    const entrypoints = await rpc.getEntrypoints(address);\n    const blockHeader = await this.rpc.getBlockHeader();\n    const chainId = blockHeader.chain_id;\n    const abs = new ContractAbstraction(address, script, this, this, entrypoints, chainId, rpc);\n    return contractAbstractionComposer(abs, this.context);\n  }\n\n  /**\n   *\n   * @description Batch a group of operation together. Operations will be applied in the order in which they are added to the batch\n   *\n   * @returns A batch object from which we can add more operation or send a command to execute the batch\n   *\n   * @param params List of operation to batch together\n   */\n  batch(params?: ParamsWithKind[]) {\n    const batch = new OperationBatch(this.context, this.estimator);\n\n    if (Array.isArray(params)) {\n      batch.with(params);\n    }\n\n    return batch;\n  }\n}\n\ntype ContractAbstractionComposer<T> = (\n  abs: ContractAbstraction<ContractProvider>,\n  context: Context\n) => T;\n","import { Context } from '../context';\nimport { ParserProvider } from './interface';\nimport { Expr, GlobalConstantHashAndValue, Parser, Prim, ProtocolID } from '@taquito/michel-codec';\nimport { OriginateParams } from '../operations/types';\nimport { InvalidInitParameter, InvalidCodeParameter } from '../contract/errors';\nimport { Schema } from '@taquito/michelson-encoder';\nimport { MichelsonV1Expression } from '@taquito/rpc';\n\nexport class MichelCodecParser implements ParserProvider {\n  constructor(private context: Context) {}\n\n  private async getNextProto(): Promise<ProtocolID> {\n    const { next_protocol } = await this.context.rpc.getBlockMetadata();\n    return next_protocol as ProtocolID;\n  }\n\n  async parseScript(src: string): Promise<Expr[] | null> {\n    const parser = new Parser({ protocol: await this.getNextProto() });\n    return parser.parseScript(src);\n  }\n\n  async parseMichelineExpression(src: string): Promise<Expr | null> {\n    const parser = new Parser({ protocol: await this.getNextProto() });\n    return parser.parseMichelineExpression(src);\n  }\n\n  async parseJSON(src: object): Promise<Expr> {\n    const parser = new Parser({ protocol: await this.getNextProto() });\n    return parser.parseJSON(src);\n  }\n\n  async prepareCodeOrigination(params: OriginateParams): Promise<OriginateParams> {\n    const parsedParams = params;\n    parsedParams.code = await this.formatCodeParam(params.code);\n    if (params.init) {\n      parsedParams.init = await this.formatInitParam(params.init);\n    } else if (params.storage) {\n      const storageType = (parsedParams.code as Expr[]).find(\n        (p): p is Prim => 'prim' in p && p.prim === 'storage'\n      );\n      if (!storageType?.args) {\n        throw new InvalidCodeParameter(\n          'The storage section is missing from the script',\n          params.code\n        );\n      }\n      const schema = new Schema(storageType.args[0] as MichelsonV1Expression);\n      const globalconstantsHashAndValue = await this.findGlobalConstantsHashAndValue(schema);\n\n      if (Object.keys(globalconstantsHashAndValue).length !== 0) {\n        // If there are global constants in the storage part of the contract code,\n        // they need to be locally expanded in order to encode the storage arguments\n        const p = new Parser({ expandGlobalConstant: globalconstantsHashAndValue });\n        const storageTypeNoGlobalConst = p.parseJSON(storageType.args[0]);\n        const schemaNoGlobalConst = new Schema(storageTypeNoGlobalConst);\n        parsedParams.init = schemaNoGlobalConst.Encode(params.storage);\n      } else {\n        parsedParams.init = schema.Encode(params.storage);\n      }\n      delete parsedParams.storage;\n    }\n    return parsedParams;\n  }\n\n  private async formatCodeParam(code: string | object[]) {\n    let parsedCode: Expr[];\n    if (typeof code === 'string') {\n      const c = await this.parseScript(code);\n      if (c === null) {\n        throw new InvalidCodeParameter('Invalid code parameter', code);\n      }\n      parsedCode = c;\n    } else {\n      const c = await this.parseJSON(code);\n      const order = ['parameter', 'storage', 'code'];\n      // Ensure correct ordering for RPC\n      parsedCode = (c as Prim[]).sort((a, b) => order.indexOf(a.prim) - order.indexOf(b.prim));\n    }\n    return parsedCode;\n  }\n\n  private async formatInitParam(init: string | object) {\n    let parsedInit: Expr;\n    if (typeof init === 'string') {\n      const c = await this.parseMichelineExpression(init);\n      if (c === null) {\n        throw new InvalidInitParameter('Invalid init parameter', init);\n      }\n      parsedInit = c;\n    } else {\n      parsedInit = await this.parseJSON(init);\n    }\n    return parsedInit;\n  }\n\n  private async findGlobalConstantsHashAndValue(schema: Schema) {\n    const globalConstantTokens = schema.findToken('constant');\n    const globalConstantsHashAndValue: GlobalConstantHashAndValue = {};\n\n    if (globalConstantTokens.length !== 0) {\n      for (const token of globalConstantTokens) {\n        const tokenArgs = token.tokenVal.args;\n        if (tokenArgs) {\n          const hash: string = tokenArgs[0]['string'];\n          const michelineValue = await this.context.globalConstantsProvider.getGlobalConstantByHash(\n            hash\n          );\n          Object.assign(globalConstantsHashAndValue, {\n            [hash]: michelineValue,\n          });\n        }\n      }\n    }\n    return globalConstantsHashAndValue;\n  }\n}\n","import { Packer } from './interface';\nimport { Context } from '../context';\nimport { PackDataParams, PackDataResponse } from '@taquito/rpc';\n\nexport class RpcPacker implements Packer {\n  constructor(private context: Context) {}\n  \n  async packData(data: PackDataParams): Promise<PackDataResponse> {\n    return this.context.rpc.packData(data);\n  }\n}\n","export class GlobalConstantNotFound extends Error {\n  name = 'GlobalConstantNotFound';\n\n  constructor(public hash: string) {\n    super(\n      `Please load the value associated with the constant ${hash} using the loadGlobalConstant method of the DefaultGlobalConstantsProvider.`\n    );\n  }\n}\n\nexport class UnconfiguredGlobalConstantsProviderError extends Error {\n  name = 'UnconfiguredGlobalConstantsProviderError';\n\n  constructor() {\n    super(\n      'No global constants provider has been configured. Please configure one by calling setGlobalConstantsProvider({globalConstantsProvider}) on your TezosToolkit instance.'\n    );\n  }\n}\n","import { Expr } from \"@taquito/michel-codec\";\nimport { UnconfiguredGlobalConstantsProviderError } from \"./error\";\nimport { GlobalConstantHash, GlobalConstantsProvider } from \"./interface-global-constants-provider\";\n\nexport class NoopGlobalConstantsProvider implements GlobalConstantsProvider {\n    async getGlobalConstantByHash(_hash: GlobalConstantHash): Promise<Expr> {\n        throw new UnconfiguredGlobalConstantsProviderError();\n    }\n}","import { RpcClient, RpcClientInterface } from '@taquito/rpc';\nimport { Protocols } from './constants';\nimport { Forger } from './forger/interface';\nimport { RpcForger } from './forger/rpc-forger';\nimport { Injector } from './injector/interface';\nimport { RpcInjector } from './injector/rpc-injector';\nimport { Signer } from './signer/interface';\nimport { NoopSigner } from './signer/noop';\nimport { OperationFactory } from './wallet/operation-factory';\nimport { RpcTzProvider } from './tz/rpc-tz-provider';\nimport { RPCEstimateProvider } from './contract/rpc-estimate-provider';\nimport { RpcContractProvider } from './contract/rpc-contract-provider';\nimport { RPCBatchProvider } from './batch/rpc-batch-provider';\n\nimport { Wallet, LegacyWalletProvider, WalletProvider } from './wallet';\nimport { ParserProvider } from './parser/interface';\nimport { MichelCodecParser } from './parser/michel-codec-parser';\nimport { Packer } from './packer/interface';\nimport { RpcPacker } from './packer/rpc-packer';\nimport BigNumber from 'bignumber.js';\nimport { retry } from 'rxjs/operators';\nimport { BehaviorSubject, OperatorFunction } from 'rxjs';\nimport { GlobalConstantsProvider } from './global-constants/interface-global-constants-provider';\nimport { NoopGlobalConstantsProvider } from './global-constants/noop-global-constants-provider';\n\nexport interface TaquitoProvider<T, K extends Array<any>> {\n  new (context: Context, ...rest: K): T;\n}\n\nexport interface ConfigConfirmation {\n  confirmationPollingIntervalSecond?: number;\n  confirmationPollingTimeoutSecond: number;\n  defaultConfirmationCount: number;\n}\n\nexport const defaultConfigConfirmation: ConfigConfirmation = {\n  defaultConfirmationCount: 1,\n  confirmationPollingTimeoutSecond: 180,\n};\n\n// The shouldObservableSubscriptionRetry parameter is related to the observable in ObservableSubsription class.\n// When set to true, the observable won't die when getBlock rpc call fails; the error will be reported via the error callback,\n// and it will continue to poll for new blocks.\nexport interface ConfigStreamer {\n  streamerPollingIntervalMilliseconds: number;\n  shouldObservableSubscriptionRetry: boolean;\n  observableSubscriptionRetryFunction: OperatorFunction<any, any>;\n}\n\nexport const defaultConfigStreamer: ConfigStreamer = {\n  streamerPollingIntervalMilliseconds: 20000,\n  shouldObservableSubscriptionRetry: false,\n  observableSubscriptionRetryFunction: retry(),\n};\n\n/**\n * @description Encapsulate common service used throughout different part of the library\n */\nexport class Context {\n  private _rpcClient: RpcClientInterface;\n  private _forger: Forger;\n  private _parser: ParserProvider;\n  private _injector: Injector;\n  private _walletProvider: WalletProvider;\n  public readonly operationFactory: OperationFactory;\n  private _packer: Packer;\n  private providerDecorator: Array<(context: Context) => Context> = [];\n  private _globalConstantsProvider: GlobalConstantsProvider;\n  public readonly tz = new RpcTzProvider(this);\n  public readonly estimate = new RPCEstimateProvider(this);\n  public readonly contract = new RpcContractProvider(this, this.estimate);\n  public readonly batch = new RPCBatchProvider(this, this.estimate);\n  public readonly wallet = new Wallet(this);\n\n  constructor(\n    private _rpc: RpcClientInterface | string,\n    private _signer: Signer = new NoopSigner(),\n    private _proto?: Protocols,\n    public readonly _config = new BehaviorSubject({\n      ...defaultConfigStreamer,\n      ...defaultConfigConfirmation,\n    }),\n    forger?: Forger,\n    injector?: Injector,\n    packer?: Packer,\n    wallet?: WalletProvider,\n    parser?: ParserProvider,\n    globalConstantsProvider?: GlobalConstantsProvider\n  ) {\n    if (typeof this._rpc === 'string') {\n      this._rpcClient = new RpcClient(this._rpc);\n    } else {\n      this._rpcClient = this._rpc;\n    }\n    this._forger = forger ? forger : new RpcForger(this);\n    this._injector = injector ? injector : new RpcInjector(this);\n    this.operationFactory = new OperationFactory(this);\n    this._walletProvider = wallet ? wallet : new LegacyWalletProvider(this);\n    this._parser = parser ? parser : new MichelCodecParser(this);\n    this._packer = packer ? packer : new RpcPacker(this);\n    this._globalConstantsProvider = globalConstantsProvider\n      ? globalConstantsProvider\n      : new NoopGlobalConstantsProvider();\n  }\n\n  get config(): ConfigConfirmation & ConfigStreamer {\n    return this._config.getValue();\n  }\n\n  set config(value: ConfigConfirmation & ConfigStreamer) {\n    this._config.next({\n      ...value,\n    });\n  }\n\n  setPartialConfig(value: Partial<ConfigConfirmation> & Partial<ConfigStreamer>) {\n    this._config.next({\n      ...this._config.getValue(),\n      ...value,\n    });\n  }\n\n  get rpc(): RpcClientInterface {\n    return this._rpcClient;\n  }\n\n  set rpc(value: RpcClientInterface) {\n    this._rpcClient = value;\n  }\n\n  get injector() {\n    return this._injector;\n  }\n\n  set injector(value: Injector) {\n    this._injector = value;\n  }\n\n  get forger() {\n    return this._forger;\n  }\n\n  set forger(value: Forger) {\n    this._forger = value;\n  }\n\n  get signer() {\n    return this._signer;\n  }\n\n  set signer(value: Signer) {\n    this._signer = value;\n  }\n\n  get walletProvider() {\n    return this._walletProvider;\n  }\n\n  set walletProvider(value: WalletProvider) {\n    this._walletProvider = value;\n  }\n\n  set proto(value: Protocols | undefined) {\n    this._proto = value;\n  }\n\n  get proto() {\n    return this._proto;\n  }\n\n  get parser() {\n    return this._parser;\n  }\n\n  set parser(value: ParserProvider) {\n    this._parser = value;\n  }\n\n  get packer() {\n    return this._packer;\n  }\n\n  set packer(value: Packer) {\n    this._packer = value;\n  }\n\n  get globalConstantsProvider() {\n    return this._globalConstantsProvider;\n  }\n\n  set globalConstantsProvider(value: GlobalConstantsProvider) {\n    this._globalConstantsProvider = value;\n  }\n\n  async isAnyProtocolActive(protocol: string[] = []) {\n    if (this._proto) {\n      return protocol.includes(this._proto);\n    } else {\n      const { next_protocol } = await this.rpc.getBlockMetadata();\n      return protocol.includes(next_protocol);\n    }\n  }\n\n  async getConfirmationPollingInterval() {\n    // Granada will generally halve the time between blocks, from 60 seconds to 30 seconds (mainnet).\n    // We reduce the default value in the same proportion, from 10 to 5.\n    const defaultInterval = 5;\n    try {\n      const constants = await this.rpc.getConstants();\n      let blockTime = constants.time_between_blocks[0];\n      if (constants.minimal_block_delay !== undefined) {\n        blockTime = constants.minimal_block_delay;\n      }\n      let confirmationPollingInterval = BigNumber.sum(\n        blockTime,\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        new BigNumber(constants.delay_per_missing_endorsement!).multipliedBy(\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          Math.max(0, constants.initial_endorsers! - constants.endorsers_per_block)\n        )\n      );\n\n      // Divide the polling interval by a constant 3\n      // to improvise for polling time to work in prod,\n      // testnet and sandbox enviornment.\n      confirmationPollingInterval = confirmationPollingInterval.dividedBy(3);\n\n      this.config.confirmationPollingIntervalSecond =\n        confirmationPollingInterval.toNumber() === 0 ? 0.1 : confirmationPollingInterval.toNumber();\n      return this.config.confirmationPollingIntervalSecond;\n    } catch (exception) {\n      // Return default value if there is\n      // an issue returning from constants\n      // file.\n      return defaultInterval;\n    }\n  }\n\n  /**\n   * @description Create a copy of the current context. Useful when you have long running operation and you do not want a context change to affect the operation\n   */\n  clone(): Context {\n    return new Context(\n      this.rpc,\n      this.signer,\n      this.proto,\n      this._config,\n      this.forger,\n      this._injector,\n      this.packer\n    );\n  }\n\n  /**\n   * @description Allows extensions set on the TezosToolkit to inject logic into the context\n   */\n  registerProviderDecorator(fx: (context: Context) => Context) {\n    this.providerDecorator.push(fx);\n  }\n\n  /**\n   * @description Applies the decorators on a cloned instance of the context and returned this cloned instance.\n   * The decorators are functions that inject logic into the context.\n   * They are provided by the extensions set on the TezosToolkit by calling the registerProviderDecorator method.\n   */\n  withExtensions = (): Context => {\n    let clonedContext = this.clone();\n    this.providerDecorator.forEach((decorator) => {\n      clonedContext = decorator(clonedContext);\n    });\n\n    return clonedContext;\n  };\n}\n","import { OpFilter, FilterExpression, Filter, OpHashFilter, SourceFilter, KindFilter, DestinationFilter, OperationContent } from './interface';\n\nconst opHashFilter = (op: OperationContent, filter: OpHashFilter) => op.hash === filter.opHash;\n\nconst sourceFilter = (x: OperationContent, filter: SourceFilter) => {\n  switch (x.kind) {\n    case 'endorsement':\n      return 'metadata' in x && x.metadata.delegate === filter.source\n    case 'activate_account':\n      return 'metadata' in x && x.pkh === filter.source\n    default:\n      return 'source' in x && x.source === filter.source\n  }\n}\n\nconst kindFilter = (x: OperationContent, filter: KindFilter) => 'kind' in x && x.kind === filter.kind;\n\nconst destinationFilter = (x: OperationContent, filter: DestinationFilter) => {\n  switch (x.kind) {\n    case 'delegation':\n      return x.delegate === filter.destination;\n    case 'origination':\n      if (\n        'metadata' in x &&\n        'operation_result' in x.metadata &&\n        'originated_contracts' in x.metadata.operation_result &&\n        Array.isArray(x.metadata.operation_result.originated_contracts)\n      ) {\n        return x.metadata.operation_result.originated_contracts.some(\n          contract => contract === filter.destination\n        );\n      }\n      break;\n    case 'transaction':\n      return x.destination === filter.destination;\n    default:\n      return false;\n  }\n};\n\nexport const evaluateOpFilter = (op: OperationContent, filter: OpFilter) => {\n  if ('opHash' in filter) {\n    return opHashFilter(op, filter);\n  } else if ('source' in filter) {\n    return sourceFilter(op, filter)\n  } else if ('kind' in filter) {\n    return kindFilter(op, filter);\n  } else if ('destination' in filter) {\n    return destinationFilter(op, filter)\n  }\n\n  return false;\n};\n\nexport const evaluateExpression = (op: OperationContent, exp: FilterExpression): boolean => {\n  if (Array.isArray(exp.and)) {\n    return exp.and.every((x: OpFilter | FilterExpression) => evaluateFilter(op, x));\n  } else if (Array.isArray(exp.or)) {\n    return exp.or.some((x: OpFilter | FilterExpression) => evaluateFilter(op, x));\n  } else {\n    throw new Error('Filter expression must contains either and/or property');\n  }\n};\n\nexport const evaluateFilter = (op: OperationContent, filter: Filter): boolean => {\n  const filters: OpFilter[] | FilterExpression[] = [];\n  if (!Array.isArray(filter)) {\n    filters.push(filter as any);\n  } else {\n    filters.push(...(filter as any));\n  }\n\n  return (filters as any[]).every((filterOrExp: OpFilter | FilterExpression) => {\n    if ('and' in filterOrExp || 'or' in filterOrExp) {\n      return evaluateExpression(op, filterOrExp);\n    } else {\n      return evaluateOpFilter(op, filterOrExp as OpFilter);\n    }\n  });\n};\n","/* eslint-disable no-dupe-class-members */\nimport { Observable, Subject, NEVER, OperatorFunction } from 'rxjs';\nimport { Subscription } from './interface';\nimport { takeUntil, tap, catchError, retry } from 'rxjs/operators';\n\nexport class ObservableSubscription<T> implements Subscription<T> {\n  private errorListeners: Array<(error: Error) => void> = [];\n  private messageListeners: Array<(data: T) => void> = [];\n  private closeListeners: Array<() => void> = [];\n  private completed$ = new Subject();\n\n  constructor(\n    obs: Observable<T>,\n    private shouldRetry: boolean = false,\n    private operatorFunction: OperatorFunction<T, T> = retry<T>()\n  ) {\n    obs\n      .pipe(\n        takeUntil(this.completed$),\n        tap(\n          (data: T) => {\n            this.call(this.messageListeners, data);\n          },\n          (error) => {\n            this.call(this.errorListeners, error);\n          },\n          () => {\n            this.call(this.closeListeners);\n          }\n        ),\n        this.shouldRetry ? operatorFunction : tap(),\n        catchError(() => NEVER)\n      )\n      .subscribe();\n  }\n\n  private call<K>(listeners: Array<(val: K) => void>, value?: K) {\n    for (const l of listeners) {\n      try {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        l(value!);\n      } catch (ex) {\n        console.error(ex);\n      }\n    }\n  }\n\n  private remove(listeners: Array<any>, value: any) {\n    const idx = listeners.indexOf(value);\n    if (idx !== -1) {\n      listeners.splice(idx, 1);\n    }\n  }\n\n  public on(type: 'error', cb: (error: Error) => void): void;\n  public on(type: 'data', cb: (data: T) => void): void;\n  public on(type: 'close', cb: () => void): void;\n\n  public on(type: 'data' | 'error' | 'close', cb: any): void {\n    switch (type) {\n      case 'data':\n        this.messageListeners.push(cb);\n        break;\n      case 'error':\n        this.errorListeners.push(cb);\n        break;\n      case 'close':\n        this.closeListeners.push(cb);\n        break;\n      default:\n        throw new Error(`Trying to register on an unsupported event: ${type}`);\n    }\n  }\n\n  public off(type: 'error', cb: (error: Error) => void): void;\n  public off(type: 'data', cb: (data: T) => void): void;\n  public off(type: 'close', cb: () => void): void;\n\n  public off(type: 'data' | 'error' | 'close', cb: any): void {\n    switch (type) {\n      case 'data':\n        this.remove(this.messageListeners, cb);\n        break;\n      case 'error':\n        this.remove(this.errorListeners, cb);\n        break;\n      case 'close':\n        this.remove(this.closeListeners, cb);\n        break;\n      default:\n        throw new Error(`Trying to unregister on an unsupported event: ${type}`);\n    }\n  }\n\n  public close() {\n    this.completed$.next();\n  }\n}\n","import { BlockResponse } from '@taquito/rpc';\nimport { from, Observable, ObservableInput, timer } from 'rxjs';\nimport {\n  concatMap,\n  distinctUntilKeyChanged,\n  first,\n  map,\n  pluck,\n  publish,\n  refCount,\n  switchMap,\n} from 'rxjs/operators';\nimport { Context } from '../context';\nimport { evaluateFilter } from './filters';\nimport { Filter, SubscribeProvider, Subscription, OperationContent } from './interface';\nimport { ObservableSubscription } from './observable-subscription';\n\nconst getLastBlock = (context: Context) => {\n  return from(context.rpc.getBlock()).pipe(first());\n};\n\nconst applyFilter = (filter: Filter) =>\n  concatMap<BlockResponse, ObservableInput<OperationContent>>(block => {\n    return new Observable<OperationContent>(sub => {\n      for (const ops of block.operations) {\n        for (const op of ops) {\n          for (const content of op.contents) {\n            if (evaluateFilter({hash: op.hash, ...content}, filter)) {\n              sub.next({hash: op.hash, ...content});\n            }\n          }\n        }\n      }\n      sub.complete();\n    });\n  });\n\nexport class PollingSubscribeProvider implements SubscribeProvider {\n  // Map the changing polling interval to a timer, which will automatically terminate the previous timer when the next one starts.\n  private timer$ = this.context._config.pipe(\n    switchMap((val) => timer(0, val.streamerPollingIntervalMilliseconds)),\n  )\n\n  private newBlock$ = this.timer$.pipe(\n    map(() => this.context),\n    switchMap(getLastBlock),\n    distinctUntilKeyChanged('hash'),\n    publish(),\n    refCount()\n  );\n\n  constructor(private context: Context) { }\n\n  subscribe(_filter: 'head'): Subscription<string> {\n    return new ObservableSubscription(this.newBlock$.pipe(pluck('hash')), \n                                      this.context.config.shouldObservableSubscriptionRetry,\n                                      this.context.config.observableSubscriptionRetryFunction);\n  }\n\n  subscribeOperation(filter: Filter): Subscription<OperationContent> {\n    return new ObservableSubscription(this.newBlock$.pipe(applyFilter(filter)),\n                                      this.context.config.shouldObservableSubscriptionRetry,\n                                      this.context.config.observableSubscriptionRetryFunction);\n  }\n}\n","\n// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!\nexport const VERSION = {\n    \"commitHash\": \"81f0a5b103f867f57fbe5d526315c375a3788346\",\n    \"version\": \"11.2.0\"\n};\n","import { Forger, ForgeParams, ForgeResponse } from './interface';\n\nexport class ForgingMismatchError extends Error {\n  name = 'ForgingMismatchError';\n  constructor(public results: string[]) {\n    super('Forging mismatch error');\n  }\n}\n\nexport class CompositeForger implements Forger {\n  constructor(private forgers: Forger[]) {\n    if (forgers.length === 0) {\n      throw new Error('At least one forger must be specified');\n    }\n  }\n\n  async forge({ branch, contents }: ForgeParams): Promise<ForgeResponse> {\n    const results = await Promise.all(\n      this.forgers.map((forger) => {\n        return forger.forge({ branch, contents });\n      })\n    );\n\n    if (results.length === 0) {\n      throw new Error('At least one forger must be specified');\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    let lastResult: string = results.pop()!; // Assumed to be more than one since we\n    while (results.length) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const currentResult = results.pop()!;\n\n      if (currentResult !== lastResult) {\n        throw new ForgingMismatchError([lastResult, currentResult]);\n      }\n      lastResult = currentResult;\n    }\n\n    return lastResult;\n  }\n}\n","import { OriginateParams } from \"../operations/types\";\nimport { ParserProvider } from \"./interface\";\n\nexport class NoopParser implements ParserProvider {\n    async prepareCodeOrigination(params: OriginateParams): Promise<OriginateParams> {\n        return params;\n    }\n}","import { Packer } from './interface';\nimport { packDataBytes, MichelsonData, MichelsonType } from '@taquito/michel-codec'\nimport { PackDataResponse, PackDataParams } from '@taquito/rpc';\n\nexport class MichelCodecPacker implements Packer {\n\n  async packData(data: PackDataParams): Promise<PackDataResponse> {\n    const { bytes } = packDataBytes(data.data as MichelsonData, data.type as MichelsonType);\n    return { packed: bytes }\n  }\n}\n","import { GlobalConstantHashAndValue } from '@taquito/michel-codec';\nimport { GlobalConstantNotFound } from './error';\nimport { GlobalConstantHash, GlobalConstantsProvider } from './interface-global-constants-provider';\n\nexport class DefaultGlobalConstantsProvider implements GlobalConstantsProvider {\n  private _globalConstantsLibrary: GlobalConstantHashAndValue = {};\n\n  /**\n   *\n   * @description Allows to load global constant hashes and their corresponding Michelson JSON values\n   */\n  loadGlobalConstant(globalConstant: GlobalConstantHashAndValue) {\n    for (const hash in globalConstant) {\n      Object.assign(this._globalConstantsLibrary, {\n        [hash]: globalConstant[hash],\n      });\n    }\n  }\n\n  /**\n   *\n   * @description Retrieve the Michelson value of a global constant based on its hash\n   *\n   * @param hash a string representing the global constant hash\n   * @returns Expr, the JSON Michelson value\n   */\n  async getGlobalConstantByHash(hash: GlobalConstantHash) {\n    const value = this._globalConstantsLibrary[hash];\n    if (!value) {\n      throw new GlobalConstantNotFound(hash);\n    }\n    return value;\n  }\n}\n","/**\n * @packageDocumentation\n * @module @taquito/taquito\n */\n\nimport { RpcClient, RpcClientInterface } from '@taquito/rpc';\nimport { RPCBatchProvider } from './batch/rpc-batch-provider';\nimport { Protocols } from './constants';\nimport { ConfigConfirmation, ConfigStreamer, Context, TaquitoProvider } from './context';\nimport { ContractProvider, EstimationProvider } from './contract/interface';\nimport { Extension } from './extension/extension';\nimport { Forger } from './forger/interface';\nimport { RpcForger } from './forger/rpc-forger';\nimport { format } from './format';\nimport { GlobalConstantsProvider } from './global-constants/interface-global-constants-provider';\nimport { NoopGlobalConstantsProvider } from './global-constants/noop-global-constants-provider';\nimport { Packer } from './packer/interface';\nimport { RpcPacker } from './packer/rpc-packer';\nimport { Signer } from './signer/interface';\nimport { NoopSigner } from './signer/noop';\nimport { SubscribeProvider } from './subscribe/interface';\nimport { PollingSubscribeProvider } from './subscribe/polling-provider';\nimport { TzProvider } from './tz/interface';\nimport { VERSION } from './version';\nimport { LegacyWalletProvider, Wallet, WalletProvider } from './wallet';\nimport { OperationFactory } from './wallet/operation-factory';\n\nexport { MichelsonMap, UnitValue } from '@taquito/michelson-encoder';\nexport * from './constants';\nexport * from './context';\nexport { TaquitoProvider } from './context';\nexport * from './contract';\nexport * from './contract/big-map';\nexport { CompositeForger } from './forger/composite-forger';\nexport * from './forger/interface';\nexport { RpcForger } from './forger/rpc-forger';\nexport * from './operations';\nexport { OperationBatch } from './batch/rpc-batch-provider';\nexport * from './signer/interface';\nexport * from './subscribe/interface';\nexport { SubscribeProvider } from './subscribe/interface';\nexport { PollingSubscribeProvider } from './subscribe/polling-provider';\nexport { ObservableSubscription } from './subscribe/observable-subscription';\nexport * from './tz/interface';\nexport * from './wallet';\nexport { Extension } from './extension/extension';\nexport * from './parser/interface';\nexport * from './parser/michel-codec-parser';\nexport * from './parser/noop-parser';\nexport * from './packer/interface';\nexport * from './packer/michel-codec-packer';\nexport * from './packer/rpc-packer';\nexport * from './global-constants/default-global-constants-provider';\nexport * from './global-constants/error';\nexport * from './global-constants/interface-global-constants-provider';\n\nexport interface SetProviderOptions {\n  forger?: Forger;\n  wallet?: WalletProvider;\n  rpc?: string | RpcClientInterface;\n  stream?: string | SubscribeProvider;\n  signer?: Signer;\n  protocol?: Protocols;\n  config?: Partial<ConfigConfirmation> & Partial<ConfigStreamer>;\n  packer?: Packer;\n  globalConstantsProvider?: GlobalConstantsProvider;\n}\n\nexport interface VersionInfo {\n  commitHash: string;\n  version: string;\n}\n\n/**\n * @description Facade class that surfaces all of the libraries capability and allow it's configuration\n *\n * @param _rpc The RPC server to use\n */\nexport class TezosToolkit {\n  private _stream!: SubscribeProvider;\n  private _options: SetProviderOptions = {};\n  private _rpcClient: RpcClientInterface;\n  private _wallet: Wallet;\n  private _context: Context;\n  /**\n   * @deprecated TezosToolkit.batch has been deprecated in favor of TezosToolkit.contract.batch\n   *\n   */\n  public batch: RPCBatchProvider['batch'];\n\n  public readonly format = format;\n\n  constructor(private _rpc: RpcClientInterface | string) {\n    if (typeof this._rpc === 'string') {\n      this._rpcClient = new RpcClient(this._rpc);\n    } else {\n      this._rpcClient = this._rpc;\n    }\n    this._context = new Context(_rpc);\n    this._wallet = new Wallet(this._context);\n    this.setProvider({ rpc: this._rpcClient });\n    this.batch = this._context.batch.batch.bind(this._context.batch);\n  }\n\n  /**\n   * @description Sets configuration on the Tezos Taquito instance. Allows user to choose which signer, rpc client, rpc url, forger and so forth\n   *\n   * @param options rpc url or rpcClient to use to interact with the Tezos network\n   *\n   * @example Tezos.setProvider({rpc: 'https://mainnet.api.tez.ie/', signer: new InMemorySigner.fromSecretKey(“edsk...”)})\n   * @example Tezos.setProvider({ config: { confirmationPollingTimeoutSecond: 300 }})\n   *\n   */\n\n  setProvider({\n    rpc,\n    stream,\n    signer,\n    protocol,\n    config,\n    forger,\n    wallet,\n    packer,\n    globalConstantsProvider,\n  }: SetProviderOptions) {\n    this.setRpcProvider(rpc);\n    this.setStreamProvider(stream);\n    this.setSignerProvider(signer);\n    this.setForgerProvider(forger);\n    this.setWalletProvider(wallet);\n    this.setPackerProvider(packer);\n    this.setGlobalConstantsProvider(globalConstantsProvider);\n\n    this._context.proto = protocol;\n    if (config) {\n      this._context.setPartialConfig(config);\n    }\n  }\n\n  /**\n   * @description Sets signer provider on the Tezos Taquito instance.\n   *\n   * @param options signer to use to interact with the Tezos network\n   *\n   * @example Tezos.setSignerProvider(new InMemorySigner.fromSecretKey('edsk...'))\n   *\n   */\n  setSignerProvider(signer?: SetProviderOptions['signer']) {\n    if (!this._options.signer && typeof signer === 'undefined') {\n      this._context.signer = new NoopSigner();\n      this._options.signer = signer;\n    } else if (typeof signer !== 'undefined') {\n      this._context.signer = signer;\n      this._options.signer = signer;\n    }\n  }\n\n  /**\n   * @description Sets rpc provider on the Tezos Taquito instance\n   *\n   * @param options rpc url or rpcClient to use to interact with the Tezos network\n   *\n   * @example Tezos.setRpcProvider('https://mainnet.api.tez.ie/')\n   *\n   */\n  setRpcProvider(rpc?: SetProviderOptions['rpc']) {\n    if (typeof rpc === 'string') {\n      this._rpcClient = new RpcClient(rpc);\n    } else if (rpc === undefined) {\n      // do nothing, RPC is required in the constructor, do not override it\n    } else {\n      this._rpcClient = rpc;\n    }\n    this._options.rpc = this._rpcClient;\n    this._context.rpc = this._rpcClient;\n  }\n\n  /**\n   * @description Sets forger provider on the Tezos Taquito instance\n   *\n   * @param options forger to use to interact with the Tezos network\n   *\n   * @example Tezos.setForgerProvider(localForger)\n   *\n   */\n  setForgerProvider(forger?: SetProviderOptions['forger']) {\n    const f = typeof forger === 'undefined' ? this.getFactory(RpcForger)() : forger;\n    this._options.forger = f;\n    this._context.forger = f;\n  }\n\n  /**\n   * @description Sets stream provider on the Tezos Taquito instance\n   *\n   * @param options stream to use to interact with the Tezos network\n   *\n   * @example Tezos.setStreamProvider(...)\n   *\n   */\n  setStreamProvider(stream?: SetProviderOptions['stream']) {\n    if (typeof stream === 'string') {\n      this._stream = new PollingSubscribeProvider(new Context(new RpcClient(stream)));\n    } else if (typeof stream !== 'undefined') {\n      this._stream = stream;\n    } else if (this._options.stream === undefined) {\n      this._stream = this.getFactory(PollingSubscribeProvider)();\n    }\n    this._options.stream = stream;\n  }\n\n  /**\n   * @description Sets wallet provider on the Tezos Taquito instance\n   *\n   * @param options wallet to use to interact with the Tezos network\n   *\n   * @example Tezos.setWalletProvider(...)\n   *\n   */\n  setWalletProvider(wallet?: SetProviderOptions['wallet']) {\n    if (!this._options.wallet && typeof wallet === 'undefined') {\n      const w = this.getFactory(LegacyWalletProvider)();\n      this._options.wallet = w;\n      this._context.walletProvider = w;\n    } else if (typeof wallet !== 'undefined') {\n      this._options.wallet = wallet;\n      this._context.walletProvider = wallet;\n    }\n  }\n\n  /**\n   * @description Sets Packer provider on the Tezos Taquito instance\n   *\n   * @param options packer to use to interact with the Tezos network\n   *\n   * @example Tezos.setPackerProvider(new MichelCodecPacker())\n   *\n   */\n  setPackerProvider(packer?: SetProviderOptions['packer']) {\n    const p = typeof packer === 'undefined' ? this.getFactory(RpcPacker)() : packer;\n    this._options.packer = p;\n    this._context.packer = p;\n  }\n\n  /**\n   * @description Sets global constants provider on the Tezos Taquito instance\n   *\n   * @param options globalConstantsProvider to use to interact with the Tezos network\n   *\n   * @example\n   * ```\n   * const globalConst = new DefaultGlobalConstantsProvider();\n   * globalConst.loadGlobalConstant({\n   *  \"expruu5BTdW7ajqJ9XPTF3kgcV78pRiaBW3Gq31mgp3WSYjjUBYxre\": { prim: \"int\" },\n   *  // ...\n   * })\n   * Tezos.setGlobalConstantsProvider(globalConst);\n   * ```\n   *\n   */\n  setGlobalConstantsProvider(\n    globalConstantsProvider?: SetProviderOptions['globalConstantsProvider']\n  ) {\n    const g =\n      typeof globalConstantsProvider === 'undefined'\n        ? new NoopGlobalConstantsProvider()\n        : globalConstantsProvider;\n    this._options.globalConstantsProvider = g;\n    this._context.globalConstantsProvider = g;\n  }\n\n  /**\n   * @description Provide access to tezos account management\n   */\n  get tz(): TzProvider {\n    return this._context.tz;\n  }\n\n  /**\n   * @description Provide access to smart contract utilities\n   */\n  get contract(): ContractProvider {\n    return this._context.contract;\n  }\n\n  get wallet(): Wallet {\n    return this._wallet;\n  }\n\n  get operation(): OperationFactory {\n    return this._context.operationFactory;\n  }\n\n  /**\n   * @description Provide access to operation estimation utilities\n   */\n  get estimate(): EstimationProvider {\n    return this._context.estimate;\n  }\n\n  /**\n   * @description Provide access to streaming utilities backed by an streamer implementation\n   */\n  get stream(): SubscribeProvider {\n    return this._stream;\n  }\n\n  /**\n   * @description Provide access to the currently used rpc client\n   */\n  get rpc(): RpcClientInterface {\n    return this._context.rpc;\n  }\n\n  /**\n   * @description Provide access to the currently used signer\n   */\n  get signer() {\n    return this._context.signer;\n  }\n\n  /**\n   * @description Provide access to the currently used globalConstantsProvider\n   */\n  get globalConstants() {\n    return this._context.globalConstantsProvider;\n  }\n\n  /**\n   * @description Allow to add a module to the TezosToolkit instance. This method adds the appropriate Providers(s) required by the module to the internal context.\n   *\n   * @param module extension to add to the TezosToolkit instance\n   *\n   * @example Tezos.addExtension(new Tzip16Module());\n   */\n  addExtension(module: Extension | Extension[]) {\n    if (Array.isArray(module)) {\n      module.forEach((extension) => extension.configureContext(this._context));\n    } else {\n      module.configureContext(this._context);\n    }\n  }\n\n  getFactory<T, K extends Array<any>>(ctor: TaquitoProvider<T, K>) {\n    return (...args: K) => {\n      return new ctor(this._context, ...args);\n    };\n  }\n\n  /**\n   * @description Gets an object containing the version of Taquito library and git sha of the commit this library is compiled from\n   */\n  getVersionInfo(): VersionInfo {\n    return VERSION;\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAGa,SAAS;IACpB,YAAoB,OAAgB;QAAhB,YAAO,GAAP,OAAO,CAAS;KAAI;IAExC,KAAK,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAe;QACrC,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC,CAAC;KAC/D;;;MCLU,WAAW;IACtB,YAAoB,OAAgB;QAAhB,YAAO,GAAP,OAAO,CAAS;KAAI;IACxC,MAAM,CAAC,oBAA4B;QACjC,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,oBAAoB,CAAC,CAAC;KAC/D;;;MCLU,uBAAwB,SAAQ,KAAK;IAGhD;QACE,KAAK,CACH,qHAAqH,CACtH,CAAC;QALJ,SAAI,GAAG,yBAAyB,CAAC;KAMhC;CACF;AAED;;;MAGa,UAAU;IACf,SAAS;;YACb,MAAM,IAAI,uBAAuB,EAAE,CAAC;SACrC;KAAA;IACK,aAAa;;YACjB,MAAM,IAAI,uBAAuB,EAAE,CAAC;SACrC;KAAA;IACK,SAAS;;YACb,MAAM,IAAI,uBAAuB,EAAE,CAAC;SACrC;KAAA;IACK,IAAI,CAAC,MAAc,EAAE,UAAuB;;YAChD,MAAM,IAAI,uBAAuB,EAAE,CAAC;SACrC;KAAA;;;IC3BS;AAAZ,WAAY,iBAAiB;IAC3B,yEAAkB,CAAA;IAClB,2EAAmB,CAAA;IACnB,qEAAgB,CAAA;IAChB,gEAAa,CAAA;AACf,CAAC,EALW,iBAAiB,KAAjB,iBAAiB,QAK5B;IACW;AAAZ,WAAY,WAAW;IACrB,4DAAiB,CAAA;IACjB,+DAAmB,CAAA;IACnB,yDAAgB,CAAA;IAChB,mDAAY,CAAA;AACd,CAAC,EALW,WAAW,KAAX,WAAW,QAKtB;IACW;AAAZ,WAAY,qBAAqB;IAC/B,6EAAc,CAAA;IACd,iFAAiB,CAAA;IACjB,2EAAc,CAAA;IACd,qEAAU,CAAA;AACZ,CAAC,EALW,qBAAqB,KAArB,qBAAqB,QAKhC;IAEW;AAAZ,WAAY,SAAS;IACnB,6EAAgE,CAAA;IAChE,6EAAgE,CAAA;IAChE,6EAAgE,CAAA;IAChE,6EAAgE,CAAA;IAChE,6EAAgE,CAAA;IAChE,6EAAgE,CAAA;IAChE,8EAAiE,CAAA;IACjE,8EAAiE,CAAA;IACjE,6EAAgE,CAAA;IAChE,6EAAgE,CAAA;IAChE,8EAAiE,CAAA;IACjE,+EAAkE,CAAA;AACpE,CAAC,EAbW,SAAS,KAAT,SAAS,QAapB;MAEY,SAAS,GAAG;IACvB,KAAK,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC;IAC3B,KAAK,EAAE,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC,QAAQ,CAAC;IAC/C,KAAK,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC;IAC3B,KAAK,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC;IAC3B,KAAK,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC;IAC3B,KAAK,EAAE,CAAC,SAAS,CAAC,SAAS,CAAC;IAC5B,KAAK,EAAE,CAAC,SAAS,CAAC,SAAS,CAAC;IAC5B,KAAK,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC;IAC3B,KAAK,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC;IAC3B,KAAK,EAAE,CAAC,SAAS,CAAC,SAAS,CAAC;IAC5B,KAAK,EAAE,CAAC,SAAS,CAAC,UAAU,CAAC;EAC7B;IAEU;AAAZ,WAAY,sBAAsB;IAChC,0EAAgD,CAAA;IAChD,8EAAoD,CAAA;IACpD,4EAAkD,CAAA;IAClD,yEAA+C,CAAA;IAC/C,8EAAoD,CAAA;IACpD,6EAAmD,CAAA;IACnD,8EAAoD,CAAA;IACpD,4EAAkD,CAAA;IAClD,6EAAmD,CAAA;AACrD,CAAC,EAVW,sBAAsB,KAAtB,sBAAsB,QAUjC;IAEW;AAAZ,WAAY,QAAQ;IAClB,uCAA2B,CAAA;IAC3B,2CAA+B,CAAA;IAC/B,yCAA6B,CAAA;IAC7B,sCAA0B,CAAA;IAC1B,2CAA+B,CAAA;IAC/B,0CAA8B,CAAA;IAC9B,2CAA+B,CAAA;IAC/B,yCAA6B,CAAA;IAC7B,0CAA8B,CAAA;AAChC,CAAC,EAVW,QAAQ,KAAR,QAAQ;;AC1DpB,MAAM,WAAW,GAAG,CAAC,CAAC;AACtB,MAAM,YAAY,GAAG,CAAC,CAAC;AAIvB,SAAS,UAAU,CAAC,MAAc;IAChC,QAAQ,MAAM;QACZ,KAAK,IAAI;YACP,OAAO,WAAW,CAAC;QACrB,KAAK,KAAK;YACR,OAAO,YAAY,CAAC;QACtB,KAAK,OAAO,CAAC;QACb;YACE,OAAO,CAAC,CAAC;KACZ;AACH,CAAC;SAEe,MAAM,CACpB,OAAe,OAAO,EACtB,KAAa,OAAO,EACpB,MAAmC;IAEnC,MAAM,MAAM,GAAG,IAAI,SAAS,CAAC,MAAM,CAAC,CAAC;IACrC,IAAI,MAAM,CAAC,KAAK,EAAE,EAAE;QAClB,OAAO,MAAM,CAAC;KACf;IAED,OAAO,MAAM;SACV,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;SAC5C,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAC7C;;MC7Ba,qBAAsB,SAAQ,KAAK;IAE9C,YAAmB,uBAA+B,EAAS,IAAW,EAAS,IAAW;QACxF,KAAK,CACH,GAAG,uBAAuB,aACxB,IAAI,CAAC,MACP,+DAA+D,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CACvF,CAAC;QALe,4BAAuB,GAAvB,uBAAuB,CAAQ;QAAS,SAAI,GAAJ,IAAI,CAAO;QAAS,SAAI,GAAJ,IAAI,CAAO;QAD1F,SAAI,GAAG,0BAA0B,CAAC;KAOjC;CACF;MAEY,4BAA6B,SAAQ,KAAK;IAErD;QACE,KAAK,CACH,kIAAkI,CACnI,CAAC;QAJJ,SAAI,GAAG,gCAAgC,CAAC;KAKvC;CACF;MACY,uBAAwB,SAAQ,KAAK;IAGhD,YAAmB,MAAc;QAC/B,KAAK,CACH,uEAAuE,MAAM,mEAAmE,CACjJ,CAAC;QAHe,WAAM,GAAN,MAAM,CAAQ;QAFjC,SAAI,GAAG,iCAAiC,CAAC;KAMxC;CACF;MAEY,oBAAqB,SAAQ,KAAK;IAE7C,YAAmB,OAAe,EAAkB,IAAS;QAC3D,KAAK,CAAC,OAAO,CAAC,CAAC;QADE,YAAO,GAAP,OAAO,CAAQ;QAAkB,SAAI,GAAJ,IAAI,CAAK;QADtD,SAAI,GAAG,sBAAsB,CAAC;KAGpC;CACF;MAEY,oBAAqB,SAAQ,KAAK;IAE7C,YAAmB,OAAe,EAAkB,IAAS;QAC3D,KAAK,CAAC,OAAO,CAAC,CAAC;QADE,YAAO,GAAP,OAAO,CAAQ;QAAkB,SAAI,GAAJ,IAAI,CAAK;QADtD,SAAI,GAAG,sBAAsB,CAAC;KAGpC;CACF;MAEY,yBAA0B,SAAQ,KAAK;IAGlD,YACS,qBAA6B,EAC7B,IAAS,EACT,IAAS,EACT,aAAkB;QAEzB,KAAK,CACH,+CAA+C,qBAAqB,cAAc,IAAI,kEAAkE,IAAI,CAAC,SAAS,CACpK,IAAI,CACL,GAAG,CACL,CAAC;QATK,0BAAqB,GAArB,qBAAqB,CAAQ;QAC7B,SAAI,GAAJ,IAAI,CAAK;QACT,SAAI,GAAJ,IAAI,CAAK;QACT,kBAAa,GAAb,aAAa,CAAK;QAN3B,SAAI,GAAG,+BAA+B,CAAC;QAarC,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC;KAC5B;CACF;MAEY,mBAAoB,SAAQ,KAAK;IAE5C,YACS,OAAe,EACf,QAAgB,EAChB,QAAgC,EAChC,aAAmB;QAE1B,KAAK,CAAC,OAAO,CAAC,CAAC;QALR,YAAO,GAAP,OAAO,CAAQ;QACf,aAAQ,GAAR,QAAQ,CAAQ;QAChB,aAAQ,GAAR,QAAQ,CAAwB;QAChC,kBAAa,GAAb,aAAa,CAAM;QAL5B,SAAI,GAAG,qBAAqB,CAAC;KAQ5B;CACF;MAEY,0BAA0B,GAAG,CACxC,KAAwB;IAExB,IAAI,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;QAC5B,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAC3C,IAAI,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,MAAM,IAAI,WAAW,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE;YAC/E,OAAO,WAAW,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC;SACjD;KACF;AACH,EAAE;AAEF,MAAM,YAAY,GAAG,CAAC,GAAW;IAC/B,IAAI;QACF,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;KACjB;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,KAAK,CAAC;KACd;IACD,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;MAEW,4BAA6B,SAAQ,KAAK;IAErD,YAAmB,IAAY;QAC7B,KAAK,CAAC,GAAG,IAAI,gFAAgF,CAAC,CAAC;QAD9E,SAAI,GAAJ,IAAI,CAAQ;QADxB,SAAI,GAAG,8BAA8B,CAAC;KAG5C;;;MChFU,0BAA0B,GAAG,CAAO,EAC/C,IAAI,EACJ,IAAI,EACJ,OAAO,GAAG,GAAG,EACb,QAAQ,EACR,OAAO,EACP,GAAG,GAAG,WAAW,CAAC,WAAW,EAC7B,QAAQ,GAAG,iBAAiB,CAAC,WAAW,EACxC,YAAY,GAAG,qBAAqB,CAAC,WAAW,EAChD,KAAK,GAAG,KAAK,GACG;IAChB,IAAI,OAAO,KAAK,SAAS,IAAI,IAAI,KAAK,SAAS,EAAE;QAC/C,MAAM,IAAI,KAAK,CACb,iGAAiG,CAClG,CAAC;KACH;IAED,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;QACxB,MAAM,IAAI,oBAAoB,CAAC,8CAA8C,EAAE,IAAI,CAAC,CAAC;KACtF;IAED,IAAI,eAAiC,CAAC;IACtC,IAAI,OAAO,KAAK,SAAS,EAAE;QACzB,MAAM,WAAW,GAAI,IAAe,CAAC,IAAI,CACvC,CAAC,CAAC,KAAgB,MAAM,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,SAAS,CACtD,CAAC;QACF,IAAI,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,IAAI,MAAK,SAAS,EAAE;YACnC,MAAM,IAAI,oBAAoB,CAAC,gDAAgD,EAAE,IAAI,CAAC,CAAC;SACxF;QACD,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAA0B,CAAC,CAAC;QACxE,eAAe,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;KAC1C;SAAM,IAAI,IAAI,KAAK,SAAS,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;QACzD,eAAe,GAAG,IAAY,CAAC;KAChC;SAAM;QACL,MAAM,IAAI,oBAAoB,CAAC,oDAAoD,EAAE,IAAI,CAAC,CAAC;KAC5F;IAED,MAAM,MAAM,GAAG;QACb,IAAI;QACJ,OAAO,EAAE,eAAe;KACzB,CAAC;IAEF,MAAM,SAAS,GAA4B;QACzC,IAAI,EAAE,MAAM,CAAC,WAAW;QACxB,GAAG;QACH,SAAS,EAAE,QAAQ;QACnB,aAAa,EAAE,YAAY;QAC3B,OAAO,EAAE,KAAK,GAAG,OAAO,CAAC,QAAQ,EAAE,GAAG,MAAM,CAAC,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC,QAAQ,EAAE;QAC/E,MAAM;KACP,CAAC;IAEF,IAAI,QAAQ,EAAE;QACZ,SAAS,CAAC,QAAQ,GAAG,QAAQ,CAAC;KAC/B;IACD,OAAO,SAAS,CAAC;AACnB,CAAC,EAAC;MAEW,uBAAuB,GAAG,CAAO,EAC5C,EAAE,EACF,MAAM,EACN,SAAS,EACT,GAAG,GAAG,WAAW,CAAC,QAAQ,EAC1B,QAAQ,GAAG,iBAAiB,CAAC,QAAQ,EACrC,YAAY,GAAG,qBAAqB,CAAC,QAAQ,EAC7C,KAAK,GAAG,KAAK,GACE;IACf,MAAM,SAAS,GAAyB;QACtC,IAAI,EAAE,MAAM,CAAC,WAAW;QACxB,GAAG;QACH,SAAS,EAAE,QAAQ;QACnB,aAAa,EAAE,YAAY;QAC3B,MAAM,EAAE,KAAK,GAAG,MAAM,CAAC,QAAQ,EAAE,GAAG,MAAM,CAAC,IAAI,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC,QAAQ,EAAE;QAC5E,WAAW,EAAE,EAAE;QACf,UAAU,EAAE,SAAS;KACtB,CAAC;IACF,OAAO,SAAS,CAAC;AACnB,CAAC,EAAC;MAEW,0BAA0B,GAAG,CAAO,EAC/C,QAAQ,EACR,MAAM,EACN,GAAG,GAAG,WAAW,CAAC,UAAU,EAC5B,QAAQ,GAAG,iBAAiB,CAAC,UAAU,EACvC,YAAY,GAAG,qBAAqB,CAAC,UAAU,GAChC;IACf,MAAM,SAAS,GAAyB;QACtC,IAAI,EAAE,MAAM,CAAC,UAAU;QACvB,MAAM;QACN,GAAG;QACH,SAAS,EAAE,QAAQ;QACnB,aAAa,EAAE,YAAY;QAC3B,QAAQ;KACT,CAAC;IACF,OAAO,SAAS,CAAC;AACnB,CAAC,EAAC;MAEW,+BAA+B,GAAG,CAC7C,EACE,GAAG,GAAG,WAAW,CAAC,UAAU,EAC5B,QAAQ,GAAG,iBAAiB,CAAC,UAAU,EACvC,YAAY,GAAG,qBAAqB,CAAC,UAAU,GACxB,EACzB,MAAc;IAEd,OAAO;QACL,IAAI,EAAE,MAAM,CAAC,UAAU;QACvB,GAAG;QACH,SAAS,EAAE,QAAQ;QACnB,aAAa,EAAE,YAAY;QAC3B,QAAQ,EAAE,MAAM;KACO,CAAC;AAC5B,CAAC,EAAC;MAEW,qBAAqB,GAAG,CACnC,EACE,GAAG,GAAG,WAAW,CAAC,MAAM,EACxB,QAAQ,GAAG,iBAAiB,CAAC,MAAM,EACnC,YAAY,GAAG,qBAAqB,CAAC,MAAM,GAC9B,EACf,MAAc,EACd,SAAiB;IAEjB,OAAO;QACL,IAAI,EAAE,MAAM,CAAC,MAAM;QACnB,GAAG;QACH,UAAU,EAAE,SAAS;QACrB,MAAM;QACN,SAAS,EAAE,QAAQ;QACnB,aAAa,EAAE,YAAY;KACN,CAAC;AAC1B,CAAC,EAAC;MAEW,qCAAqC,GAAG,CAAO,EAC1D,KAAK,EACL,MAAM,EACN,GAAG,EACH,QAAQ,EACR,YAAY,GACiB;IAC7B,OAAO;QACL,IAAI,EAAE,MAAM,CAAC,wBAAwB;QACrC,KAAK;QACL,GAAG;QACH,SAAS,EAAE,QAAQ;QACnB,aAAa,EAAE,YAAY;QAC3B,MAAM;KAC+B,CAAC;AAC1C,CAAC;;AChJM,MAAM,UAAU,GAAG,CAAsB,EAAK,EAAE,IAAO;IAC5D,OAAO,gCAAK,EAAE,KAAE,IAAI,GAAoB,CAAC;AAC3C,CAAC,CAAC;AAEK,MAAM,YAAY,GAAG,CAC1B,GAAQ,EACR,IAAO;IAEP,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;QACtB,MAAM,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC;QAE/C,IAAI,KAAK,IAAI,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE;YAChC,OAAO,KAAK,CAAC;SACd;KACF;AACH,CAAC,CAAC;AAEK,MAAM,MAAM,GAAG,CACpB,EAAK,EACL,IAAO;IAEP,OAAO,EAAE,CAAC,IAAI,KAAK,IAAI,CAAC;AAC1B,CAAC,CAAC;AAeK,MAAM,WAAW,GAAG,CACzB,EAAK;IAEL,OAAO,CAAC,aAAa,EAAE,YAAY,EAAE,aAAa,EAAE,QAAQ,EAAE,0BAA0B,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;AACpH,CAAC,CAAC;AAEK,MAAM,iBAAiB,GAAG,CAC/B,EAAK;IAEL,OAAO,CAAC,aAAa,EAAE,YAAY,EAAE,aAAa,EAAE,0BAA0B,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;AAC1G,CAAC,CAAC;AAQK,MAAM,WAAW,GAAG,CACzB,EAAK;IAIL,OAAO,UAAU,IAAI,EAAE,CAAC;AAC1B,CAAC,CAAC;AAEK,MAAM,qBAAqB,GAAG,CACnC,EAAK;IAML,OAAO,WAAW,CAAS,EAAE,CAAC,IAAI,kBAAkB,IAAI,EAAE,CAAC,QAAQ,CAAC;AACtE,CAAC,CAAC;AAEK,MAAM,sCAAsC,GAAG,CACpD,EAAK;IAML,OAAO,WAAW,CAAS,EAAE,CAAC,IAAI,4BAA4B,IAAI,EAAE,CAAC,QAAQ,CAAC;AAChF,CAAC;;ACpFD,MAAM,kBAAkB,GAAG,CAAC,KAAU;IACpC,OAAO,MAAM,IAAI,KAAK,CAAC;AACzB,CAAC,CAAC;MAEW,mBAAoB,SAAQ,KAAK;IAK5C,YAAmB,MAAoC;QACrD,KAAK,EAAE,CAAC;QADS,WAAM,GAAN,MAAM,CAA8B;QAJvD,SAAI,GAAG,qBAAqB,CAAC;;QAO3B,MAAM,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAE5C,IAAI,CAAC,EAAE,GAAG,SAAS,CAAC,EAAE,CAAC;QACvB,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC;QAE3B,IAAI,CAAC,OAAO,GAAG,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,EAAE,EAAE,CAAC;QAE3C,IAAI,kBAAkB,CAAC,SAAS,CAAC,IAAI,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE;YAC1D,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC;SACtC;KACF;CACF;MAEY,yBAA0B,SAAQ,KAAK;IAGlD,YAAmB,MAAW;QAC5B,KAAK,CAAC,wCAAwC,CAAC,CAAC;QAD/B,WAAM,GAAN,MAAM,CAAK;QAF9B,SAAI,GAAG,2BAA2B,CAAC;KAIlC;CACF;AAUD;AACA;AACA;AACA;AACA;AACO,MAAM,sBAAsB,GAAG,CAAC,QAA+C;IACpF,MAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,QAAQ,GAAG,CAAC,QAAQ,CAAC,CAAC;IAEhE,MAAM,eAAe,GAA4B,EAAE,CAAC;IACpD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACvC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACnD,MAAM,OAAO,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YACvC,IAAI,qBAAqB,CAAC,OAAO,CAAC,EAAE;gBAClC,eAAe,CAAC,IAAI,iBAClB,GAAG,EAAE,OAAO,CAAC,GAAG,IACb,OAAO,CAAC,QAAQ,CAAC,gBAAgB,EACpC,CAAC;gBAEH,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,0BAA0B,CAAC,EAAE;oBAC9D,OAAO,CAAC,QAAQ,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC,CAAC,KACpD,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAC/B,CAAC;iBACH;aACF;SACF;KACF;IAED,OAAO,eAAe,CAAC;AACzB,CAAC,CAAC;AAEF;;;AAGO,MAAM,aAAa,GAAG,CAC3B,QAA+C,EAC/C,MAAM,GAAG,QAAQ;IAEjB,MAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,QAAQ,GAAG,CAAC,QAAQ,CAAC,CAAC;IAEhE,IAAI,MAAM,GAAiC,EAAE,CAAC;;IAE9C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACvC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACnD,MAAM,OAAO,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YACvC,IAAI,WAAW,CAAC,OAAO,CAAC,EAAE;gBACxB,IAAI,qBAAqB,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC,QAAQ,CAAC,gBAAgB,CAAC,MAAM,KAAK,MAAM,EAAE;oBACzF,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,gBAAgB,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC;iBACxE;gBACD,IACE,sCAAsC,CAAC,OAAO,CAAC;oBAC/C,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,0BAA0B,CAAC,EAC1D;oBACA,KAAK,MAAM,cAAc,IAAI,OAAO,CAAC,QAAQ,CAAC,0BAA0B,EAAE;wBACxE,IAAI,QAAQ,IAAI,cAAc,IAAI,cAAc,CAAC,MAAM,CAAC,MAAM,KAAK,MAAM,EAAE;4BACzE,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC;yBAC5D;qBACF;iBACF;aACF;SACF;KACF;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;;AClGD;;;MAGa,SAAS;;;;;;;IA4EpB,YACkB,IAAY,EACZ,GAAgB,EAChB,OAAqC,EAClC,OAAgB;QAHnB,SAAI,GAAJ,IAAI,CAAQ;QACZ,QAAG,GAAH,GAAG,CAAa;QAChB,YAAO,GAAP,OAAO,CAA8B;QAClC,YAAO,GAAP,OAAO,CAAS;QA/E7B,oBAAe,GAAG,IAAI,aAAa,CAAgB,CAAC,CAAC,CAAC;QAEtD,wBAAmB,GAAuC,SAAS,CAAC;;QAGpE,iBAAY,GAAG,KAAK,CAAC;YAC3B,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;gBAC7B,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;gBACvD,KAAK,CAAC,IAAI,CAAC;qBACR,IAAI,CAAC,KAAK,EAAE,CAAC;qBACb,SAAS,CAAC;oBACT,IAAI,CAAC,mBAAmB,GAAG,SAAS,CAAC;iBACtC,CAAC,CAAC;aACN;YACD,OAAO,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;SACvC,CAAC,CAAC;;QAGK,aAAQ,GAAG,KAAK,CAAC,MACvB,IAAI,CAAC,eAAe,CAAC,IAAI,CACvB,GAAG,CAAC,CAAC,EAAE,OAAO,EAAE,QAAQ,EAAE;YACxB,IAAI,OAAO,IAAI,CAAC,EAAE;gBAChB,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;aAChD;YAED,IAAI,QAAQ,IAAI,CAAC,EAAE;gBACjB,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;aACjD;SACF,CAAC,EACF,GAAG,CAAC,CAAC,MAAM,sCACN,MAAM,KACT,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,EAC1D,KAAK,EAAE,CAAC,IACR,CAAC,EACH,SAAS,CAAC,CAAC,MAAM,KAAK,KAAK,CAAC,CAAC,EAAE,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAC3E,GAAG,CAAC,CAAC,MAAM;YACT,MAAM,CAAC,KAAK,EAAE,CAAC;YACf,IAAI,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,SAAS,EAAE;gBACnC,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;aACnD;SACF,CAAC,CACH,CACF,CAAC;;QAGM,eAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CACrC,WAAW,CAAC,IAAI,CAAC,YAAY,CAAC,EAC9B,GAAG,CAAC,CAAC,IAAI;YACP,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;gBAC3B,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE;oBAC5B,IAAI,EAAE,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,EAAE;wBACzB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;qBACnC;iBACF,CAAC,CAAC;aACJ;YAED,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,IAAI,CAAC,EAAE;gBAC1C,OAAO,IAAI,CAAC,QAAQ,CAAC;aACtB;SACF,CAAC,EACF,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,SAAS,CAAC,EAC9B,KAAK,EAAE,EACP,WAAW,EAAE,CACd,CAAC;QAEQ,aAAQ,GAAG,MAAM,CAAC,iBAAiB,CAAC;QAgB5C,IAAI,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,gBAAgB,CAAC,KAAK,EAAE;YAC3D,MAAM,IAAI,yBAAyB,CAAC,2BAA2B,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;SAC7E;QAED,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,EAAE,EAC1B,UAAU,CAAC;YACT,OAAO,EAAE,CAAC,KAAK,CAAC,CAAA;SACjB,CAAC,CACH,CAAC,SAAS,EAAE,CAAC;KACf;IAxBD,IAAI,eAAe;QACjB,OAAO,IAAI,CAAC,QAAQ,CAAC;KACtB;IAwBD,IAAI,eAAe;QACjB,QACE,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC;YAC1B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,IAAI,KAAK,QAAQ,CAEjC,EACd;KACH;IAED,IAAW,YAAY;QACrB,IAAI,IAAI,CAAC,eAAe,EAAE;YACxB,OAAO,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,gBAAgB,CAAC,MAAM,CAAC;SAC9D;aAAM;YACL,OAAO,SAAS,CAAC;SAClB;KACF;IAED,IAAW,MAAM;QACf,QACE,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM;YACtB,IAAI,qBAAqB,CAAC,MAAM,CAAC,EAAE;gBACjC,OAAO,MAAM,CAAC,QAAQ,CAAC,gBAAgB,CAAC,MAAM,CAAC;aAChD;iBAAM;gBACL,OAAO,SAAS,CAAC;aAClB;SACF,CAAC,CAAC,CAAC,CAAC,IAAI,SAAS,EAClB;KACH;;;;;;;IAQK,YAAY,CAAC,aAAsB,EAAE,QAAiB,EAAE,OAAgB;;YAC5E,IAAI,OAAO,aAAa,KAAK,WAAW,IAAI,aAAa,GAAG,CAAC,EAAE;gBAC7D,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;aAC1D;YAED,MAAM,iCAAiC,GACrC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,iCAAiC,KAAK,SAAS;kBAC/D,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,iCAAiC;kBACrD,MAAM,IAAI,CAAC,OAAO,CAAC,8BAA8B,EAAE,CAAC;YAE1D,MAAM,EAAE,wBAAwB,EAAE,gCAAgC,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;YAC3F,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;gBACxB,QAAQ,EAAE,QAAQ,IAAI,iCAAiC;gBACvD,OAAO,EAAE,OAAO,IAAI,gCAAgC;aAC1B,CAAC,CAAC;YAE9B,MAAM,IAAI,GAAG,aAAa,KAAK,SAAS,GAAG,aAAa,GAAG,wBAAwB,CAAC;YAEpF,OAAO,IAAI,OAAO,CAAS,CAAC,OAAO,EAAE,MAAM;gBACzC,IAAI,CAAC,UAAU;qBACZ,IAAI,CACH,SAAS,CAAC,MAAM,IAAI,CAAC,QAAQ,CAAC,EAC9B,SAAS,CAAC,MAAM,IAAI,CAAC,YAAY,CAAC,EAClC,MAAM,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,IAAI,IAAI,GAAG,CAAC,CAAC,EAC/D,KAAK,EAAE,CACR;qBACA,SAAS,CAAC,CAAC,CAAC;oBACX,OAAO,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;iBACrC,EAAE,MAAM,CAAC,CAAC;aACd,CAAC,CAAC;SACJ;KAAA;;;MC7KU,cACX,SAAQ,SAAS;IAGjB,YACE,IAAY,EACK,MAAsB,EACvB,MAAc,EAC9B,GAAgB,EAChB,OAAqC,EACrC,OAAgB;QAEhB,KAAK,CAAC,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;QANlB,WAAM,GAAN,MAAM,CAAgB;QACvB,WAAM,GAAN,MAAM,CAAQ;KAM/B;IAEO,OAAO,CAAC,GAAU,EAAE,IAAY;QACtC,OAAO,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,OAAO;YAC9B,OAAO,IAAI,IAAI,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC;SAC9D,EAAE,CAAC,CAAC,CAAC;KACP;IAED,IAAW,MAAM;QACf,QACE,IAAI,CAAC,OAAO;aACT,MAAM,CAAC,CAAC,MAAM,KAAK,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;aAC3D,GAAG,CAAC,CAAC,MAAM;YACV,IAAI,qBAAqB,CAAC,MAAM,CAAC,EAAE;gBACjC,OAAO,MAAM,CAAC,QAAQ,CAAC,gBAAgB,CAAC,MAAM,CAAC;aAChD;iBAAM;gBACL,OAAO,SAAS,CAAC;aAClB;SACF,CAAC,CAAC,CAAC,CAAC,IAAI,SAAS,EACpB;KACH;IAED,IAAI,GAAG;QACL,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;KACzC;IAED,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;KAC/C;IAED,IAAI,YAAY;QACd,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;KACnD;IAED,IAAI,WAAW;QACb,OAAO,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,sBAAsB,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,cAAc,CAAC,CAAC,CAAC;KACjG;IAED,IAAI,WAAW;QACb,OAAO,MAAM,CACX,IAAI,CAAC,OAAO,CAAC,sBAAsB,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,wBAAwB,CAAC,CAC3F,CAAC;KACH;IAED,IAAI,MAAM;QACR,OAAO,aAAa,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;KAClD;;;MC1CmB,gBAAgB;IASpC,YAAsB,OAAgB;QAAhB,YAAO,GAAP,OAAO,CAAS;KAAI;IAR1C,IAAI,GAAG;QACL,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC;KACzB;IAED,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;KAC5B;IAIe,gBAAgB,CAAC,EAAqC,EAAE,GAAW;;YACjF,OAAO,EAAE,MAAM,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,yBAAyB,CAAC,EAAE,CAAC;kBACpF,KAAK;kBACL,IAAI,CAAC;SACV;KAAA;IAEe,uBAAuB,CAAC,aAAqB;;YAC3D,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;YAC5D,MAAM,WAAW,GAAG,OAAO,IAAI,OAAO,OAAO,KAAK,QAAQ,GAAG,CAAC,CAAC,OAAO,CAAC,GAAG,GAAG,CAAC,CAAC,OAAO,CAAC;YACvF,OAAO,CAAC,WAAW,CAAC;SACrB;KAAA;IAES,yBAAyB,CAAC,EAAqC;QACvE,IAAI,eAAe,GAAG,KAAK,CAAC;QAC5B,KAAK,MAAM,SAAS,IAAI,EAAE,EAAE;YAC1B,IAAI,iBAAiB,CAAC,SAAS,CAAC,EAAE;gBAChC,eAAe,GAAG,IAAI,CAAC;aACxB;SACF;QACD,OAAO,eAAe,CAAC;KACxB;;IAGe,gBAAgB,CAAC,EAC/B,SAAS,EACT,MAAM,GACiB;;YACvB,MAAM,QAAQ,GAA8B,EAAE,CAAC;YAC/C,IAAI,GAAG,GAAmB,EAAE,CAAC;YAE7B,MAAM,kBAAkB,GAAG,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC;YACxE,MAAM,gBAAgB,GAAG,IAAI,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;YAErD,IAAI,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;gBAC5B,GAAG,GAAG,CAAC,GAAG,SAAS,CAAC,CAAC;aACtB;iBAAM;gBACL,GAAG,GAAG,CAAC,SAAS,CAAC,CAAC;aACnB;;YAGD,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC;YACxD,IAAI,cAAc,GAAgC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YAE7E,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACnC,IAAI,iBAAiB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,QAAQ,EAAE;oBACzD,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;oBAC9D,cAAc,GAAG,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;oBAC1C,MAAM;iBACP;aACF;YAED,MAAM,CAAC,MAAM,EAAE,QAAQ,EAAE,WAAW,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;gBACxD,kBAAkB;gBAClB,gBAAgB;gBAChB,cAAc;aACf,CAAC,CAAC;YAEH,IAAI,CAAC,MAAM,EAAE;gBACX,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;aACxD;YAED,IAAI,CAAC,QAAQ,EAAE;gBACb,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;aACpD;YAED,MAAM,IAAI,GAAG,MAAM,CAAC;YAEpB,MAAM,OAAO,GAAG,QAAQ,CAAC,WAAW,IAAI,GAAG,EAAE,EAAE,CAAC,CAAC;YACjD,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,QAAQ,CAAC,aAAa,CAAC,GAAG,OAAO,EAAE;gBACjE,QAAQ,CAAC,aAAa,CAAC,GAAG,OAAO,CAAC;aACnC;YAED,MAAM,MAAM,GAAG,CAAC,EAAgB;gBAC9B,MAAM,SAAS,GAAG,EAAE,QAAQ,CAAC,aAAa,CAAC,CAAC;gBAC5C,OAAO;oBACL,OAAO,EAAE,GAAG,SAAS,EAAE;oBACvB,GAAG,EAAE,OAAO,EAAE,CAAC,GAAG,KAAK,WAAW,GAAG,GAAG,GAAG,GAAG,EAAE,CAAC,GAAG,EAAE;oBACtD,SAAS,EAAE,OAAO,EAAE,CAAC,SAAS,KAAK,WAAW,GAAG,GAAG,GAAG,GAAG,EAAE,CAAC,SAAS,EAAE;oBACxE,aAAa,EAAE,OAAO,EAAE,CAAC,aAAa,KAAK,WAAW,GAAG,GAAG,GAAG,GAAG,EAAE,CAAC,aAAa,EAAE;iBACrF,CAAC;aACH,CAAC;YAEF,MAAM,SAAS,GAAG,CAAC,EAAmB;gBACpC,OAAO;oBACL,MAAM,EAAE,OAAO,EAAE,CAAC,MAAM,KAAK,WAAW,GAAG,MAAM,IAAI,aAAa,GAAG,EAAE,CAAC,MAAM;iBAC/E,CAAC;aACH,CAAC;YAEF,MAAM,YAAY,GAAG,CAAC,IAAoB,KACxC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAgB;gBACxB,QAAQ,EAAE,CAAC,IAAI;oBACb,KAAK,MAAM,CAAC,UAAU;wBACpB,yBACK,EAAE,EACL;oBACJ,KAAK,MAAM,CAAC,MAAM;wBAChB,qDACK,EAAE,GACF,SAAS,CAAC,EAAE,CAAC,GACb,MAAM,CAAC,EAAE,CAAC,EACb;oBACJ,KAAK,MAAM,CAAC,WAAW;wBACrB,mEACK,EAAE,KACL,OAAO,EAAE,OAAO,EAAE,CAAC,OAAO,KAAK,WAAW,GAAG,GAAG,EAAE,CAAC,OAAO,EAAE,GAAG,GAAG,KAC/D,SAAS,CAAC,EAAE,CAAC,GACb,MAAM,CAAC,EAAE,CAAC,EACb;oBACJ,KAAK,MAAM,CAAC,WAAW,EAAE;wBACvB,MAAM,IAAI,+DACL,EAAE,KACL,MAAM,EAAE,OAAO,EAAE,CAAC,MAAM,KAAK,WAAW,GAAG,GAAG,EAAE,CAAC,MAAM,EAAE,GAAG,GAAG,KAC5D,SAAS,CAAC,EAAE,CAAC,GACb,MAAM,CAAC,EAAE,CAAC,CACd,CAAC;wBACF,IAAI,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;4BAC/C,MAAM,IAAI,KAAK,CACb,mDAAmD,SAAS,CAAC,QAAQ,EAAE,CACxE,CAAC;yBACH;wBACD,OAAO,IAAI,CAAC;qBACb;oBACD,KAAK,MAAM,CAAC,UAAU;wBACpB,qDACK,EAAE,GACF,SAAS,CAAC,EAAE,CAAC,GACb,MAAM,CAAC,EAAE,CAAC,EACb;oBACJ,KAAK,MAAM,CAAC,wBAAwB;wBAClC,qDACK,EAAE,GACF,SAAS,CAAC,EAAE,CAAC,GACb,MAAM,CAAC,EAAE,CAAC,EACb;oBACJ;wBACE,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;iBAC5C;aACF,CAAC,CAAC;YAEL,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC;YACzB,MAAM,QAAQ,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC;YACnC,MAAM,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC;YAExC,OAAO;gBACL,IAAI,EAAE;oBACJ,MAAM;oBACN,QAAQ;oBACR,QAAQ;iBACT;gBACD,OAAO;aACR,CAAC;SACH;KAAA;IAEe,KAAK,CAAC,EAAE,IAAI,EAAE,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,EAAE,OAAO,EAAqB;;YACxF,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC,CAAC;YAE1E,OAAO;gBACL,OAAO,EAAE,WAAW;gBACpB,IAAI,EAAE;oBACJ,MAAM;oBACN,QAAQ;oBACR,QAAQ;iBACT;gBACD,OAAO;aACR,CAAC;SACH;KAAA;IAEe,QAAQ,CAAC,EAAwB;;YAC/C,OAAO;gBACL,UAAU,EAAE,MAAM,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE,CAAC;gBAC3C,EAAE;gBACF,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE;aAC9B,CAAC;SACH;KAAA;IAEe,QAAQ,CACtB,EAA2C,EAC3C,SAA0C;YAD1C,EAAE,GAAG,EAAE,QAAQ,EAAE,YAAY,OAAc,EAAT,IAAI,cAAtC,mCAAwC,CAAF;;YAGtC,IAAI,aAAa,GAAG,GAAG,CAAC;YACxB,IAAI,aAAa,GAAG,QAAQ,CAAC;YAC7B,IAAI,iBAAiB,GAAG,YAAY,CAAC;YAErC,IAAI,GAAG,KAAK,SAAS,IAAI,QAAQ,KAAK,SAAS,IAAI,YAAY,KAAK,SAAS,EAAE;gBAC7E,MAAM,UAAU,GAAG,MAAM,SAAS,iBAAG,GAAG,EAAE,QAAQ,EAAE,YAAY,IAAM,IAAY,EAAG,CAAC;gBAEtF,IAAI,aAAa,KAAK,SAAS,EAAE;oBAC/B,aAAa,GAAG,UAAU,CAAC,iBAAiB,CAAC;iBAC9C;gBAED,IAAI,aAAa,KAAK,SAAS,EAAE;oBAC/B,aAAa,GAAG,UAAU,CAAC,QAAQ,CAAC;iBACrC;gBAED,IAAI,iBAAiB,KAAK,SAAS,EAAE;oBACnC,iBAAiB,GAAG,UAAU,CAAC,YAAY,CAAC;iBAC7C;aACF;YAED,OAAO;gBACL,GAAG,EAAE,aAAa;gBAClB,QAAQ,EAAE,aAAa;gBACvB,YAAY,EAAE,iBAAiB;aAChC,CAAC;;KACH;IAEe,aAAa,CAAC,WAAwB;;YACpD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAChF,WAAW,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC;YACpC,WAAW,CAAC,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC;YAE9C,MAAM,UAAU,GAAiC,EAAE,CAAC;YACpD,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;YAEtE,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;gBAC3B,MAAM,IAAI,yBAAyB,CAAC,OAAO,CAAC,CAAC;aAC9C;YAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACvC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBACnD,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;iBACzC;aACF;YAED,MAAM,MAAM,GAAG,aAAa,CAAC,OAAO,CAAC,CAAC;YAEtC,IAAI,MAAM,CAAC,MAAM,EAAE;gBACjB,MAAM,IAAI,mBAAmB,CAAC,MAAM,CAAC,CAAC;aACvC;YAED,OAAO;gBACL,IAAI,EAAE,MAAM,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC;gBAC7D,WAAW;gBACX,UAAU;gBACV,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE;aAC9B,CAAC;SACH;KAAA;;;ACnPI,MAAM,WAAW,GAAG;IACzB,MAAM,CAAC,UAAU;IACjB,MAAM,CAAC,WAAW;IAClB,MAAM,CAAC,WAAW;IAClB,MAAM,CAAC,UAAU;CAClB,CAAC;MAOW,cAAe,SAAQ,gBAAgB;IAGlD,YAAY,OAAgB,EAAU,SAA6B;QACjE,KAAK,CAAC,OAAO,CAAC,CAAC;QADqB,cAAS,GAAT,SAAS,CAAoB;QAF3D,eAAU,GAAqB,EAAE,CAAC;KAIzC;;;;;;;IAQD,YAAY,CAAC,MAAsB;QACjC,IAAI,eAAe,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,gBAAgB,CAAC,KAAK,EAAE;YACzD,MAAM,IAAI,mBAAmB,CAAC,yBAAyB,MAAM,CAAC,EAAE,EAAE,CAAC,CAAA;SACpE;QACD,IAAI,CAAC,UAAU,CAAC,IAAI,iBAAG,IAAI,EAAE,MAAM,CAAC,WAAW,IAAK,MAAM,EAAG,CAAC;QAC9D,OAAO,IAAI,CAAC;KACb;;;;;;;IAQD,gBAAgB,CAAC,MAAiF;QAChG,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC;KACrD;;;;;;;IAQD,cAAc,CAAC,MAAsB;QACnC,IAAI,MAAM,CAAC,MAAM,IAAI,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,gBAAgB,CAAC,KAAK,EAAE;YAC9E,MAAM,IAAI,mBAAmB,CAAC,2BAA2B,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC;SAC3E;QACD,IAAI,MAAM,CAAC,QAAQ,IAAI,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,gBAAgB,CAAC,KAAK,EAAE;YAClF,MAAM,IAAI,mBAAmB,CAAC,6BAA6B,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;SAC/E;QACD,IAAI,CAAC,UAAU,CAAC,IAAI,iBAAG,IAAI,EAAE,MAAM,CAAC,UAAU,IAAK,MAAM,EAAG,CAAC;QAC7D,OAAO,IAAI,CAAC;KACb;;;;;;;IAQD,cAAc,CAAC,EAAE,GAAG,EAAE,MAAM,EAAoB;QAC9C,IAAI,eAAe,CAAC,GAAG,CAAC,KAAK,gBAAgB,CAAC,KAAK,EAAE;YACnD,MAAM,IAAI,mBAAmB,CAAC,qBAAqB,GAAG,EAAE,CAAC,CAAC;SAC3D;QACD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,UAAU,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC,CAAC;QAC/D,OAAO,IAAI,CAAC;KACb;;;;;;;IAQD,eAAe,CAA8D,MAAuD;QAClI,IAAI,CAAC,UAAU,CAAC,IAAI,iBAAG,IAAI,EAAE,MAAM,CAAC,WAAW,IAAK,MAAM,EAAG,CAAC;QAC9D,OAAO,IAAI,CAAC;KACb;;;;;;;IAQA,0BAA0B,CAAC,MAAoC;QAC9D,IAAI,CAAC,UAAU,CAAC,IAAI,iBAAG,IAAI,EAAE,MAAM,CAAC,wBAAwB,IAAK,MAAM,EAAG,CAAC;QAC3E,OAAO,IAAI,CAAC;KACb;IAEa,QAAQ,CAAC,KAAqB;;YAC1C,QAAQ,KAAK,CAAC,IAAI;gBAChB,KAAK,MAAM,CAAC,WAAW;oBACrB,OAAO,uBAAuB,mBACzB,KAAK,EACR,CAAC;gBACL,KAAK,MAAM,CAAC,WAAW;oBACrB,OAAO,0BAA0B,CAC/B,MAAM,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,sBAAsB,mBAC7C,KAAK,EACR,CAAC,CAAC;gBACN,KAAK,MAAM,CAAC,UAAU;oBACpB,OAAO,0BAA0B,mBAC5B,KAAK,EACR,CAAC;gBACL,KAAK,MAAM,CAAC,UAAU;oBACpB,yBACK,KAAK,EACR;gBACJ,KAAK,MAAM,CAAC,wBAAwB;oBAClC,OAAO,qCAAqC,mBACvC,KAAK,EACR,CAAC;gBACL;oBACE,MAAM,IAAI,KAAK,CAAC,+BAAgC,KAAa,CAAC,IAAI,EAAE,CAAC,CAAC;aACzE;SACF;KAAA;;;;;;;IAQD,IAAI,CAAC,MAAwB;QAC3B,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;YAC1B,QAAQ,KAAK,CAAC,IAAI;gBAChB,KAAK,MAAM,CAAC,WAAW;oBACrB,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;oBACzB,MAAM;gBACR,KAAK,MAAM,CAAC,WAAW;oBACrB,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;oBAC5B,MAAM;gBACR,KAAK,MAAM,CAAC,UAAU;oBACpB,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;oBAC3B,MAAM;gBACR,KAAK,MAAM,CAAC,UAAU;oBACpB,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;oBAC3B,MAAM;gBACR,KAAK,MAAM,CAAC,wBAAwB;oBAClC,IAAI,CAAC,0BAA0B,CAAC,KAAK,CAAC,CAAC;oBACvC,MAAM;gBACR;oBACE,MAAM,IAAI,KAAK,CAAC,+BAAgC,KAAa,CAAC,IAAI,EAAE,CAAC,CAAC;aACzE;SACF;QAED,OAAO,IAAI,CAAC;KACb;;;;;;;IAQK,IAAI,CAAC,MAA4B;;YACrC,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC;YACxD,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC;YAChD,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAE9D,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC;YACjF,IAAI,CAAC,GAAG,YAAY,GAAG,CAAC,GAAG,CAAC,CAAC;YAE7B,MAAM,GAAG,GAAmB,EAAE,CAAC;YAC/B,KAAK,MAAM,EAAE,IAAI,IAAI,CAAC,UAAU,EAAE;gBAChC,IAAI,WAAW,CAAC,EAAE,CAAC,EAAE;oBACnB,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,qDAAY,OAAA,SAAS,CAAC,CAAC,CAAC,CAAA,GAAA,CAAC,CAAC;oBACpE,GAAG,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,QAAQ,iCAAM,EAAE,GAAK,SAAS,EAAG,CAAC,CAAC;iBACxD;qBAAM;oBACL,GAAG,CAAC,IAAI,mBAAM,EAAE,EAAG,CAAC;iBACrB;gBACD,CAAC,EAAE,CAAC;aACL;YACD,IAAI,YAAY,EAAE;gBAChB,MAAM,MAAM,GAA0C,EAAE,IAAI,EAAE,MAAM,CAAC,MAAM,EAAE,CAAA;gBAC7E,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,qDAAY,OAAA,SAAS,CAAC,CAAC,CAAC,CAAA,GAAA,CAAC,CAAC;gBAC9E,GAAG,CAAC,OAAO,CAAC,MAAM,qBAAqB,mBAAM,eAAe,GAAI,aAAa,EAAE,SAAS,CAAC,CAAC,CAAA;aAC3F;YAED,MAAM,MAAM,GAAG,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,KAAK,aAAa,CAAC;YAC1D,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC;gBAC3C,SAAS,EAAE,GAAG;gBACd,MAAM;aACP,CAAC,CAAC;YACH,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YAC3C,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,WAAW,EAAE,UAAU,EAAE,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YACrF,OAAO,IAAI,cAAc,CAAC,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE,WAAW,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;SAChF;KAAA;CACF;MAEY,gBAAgB;IAC3B,YAAoB,OAAgB,EAAU,SAA6B;QAAvD,YAAO,GAAP,OAAO,CAAS;QAAU,cAAS,GAAT,SAAS,CAAoB;KAAK;;;;;;;IAQhF,KAAK,CAAC,MAAyB;QAC7B,MAAM,KAAK,GAAG,IAAI,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QAE/D,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YACzB,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACpB;QAED,OAAO,KAAK,CAAC;KACd;;;AC3OI,MAAM,oBAAoB,GAAG,CAClC,EAAgC,EAChC,EAAE,eAAe,EAAE,gBAAgB,EAAE,GAAG;IACtC,eAAe,EAAE,GAAG;IACpB,gBAAgB,EAAE,GAAG;CACtB;IAED,MAAM,gBAAgB,GAAG,sBAAsB,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,CAAC;IAClE,IAAI,QAAQ,GAAG,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC;IAChC,IAAI,YAAY,GAAG,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC;IACpC,IAAI,QAAQ,GAAG,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC;IAChC,IAAI,oBAAoB,GAAG,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC;IAC5C,IAAI,mBAAmB,GAAG,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC;IAC3C,IAAI,oBAAoB,GAAG,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC;IAC5C,gBAAgB,CAAC,OAAO,CAAC,MAAM;QAC7B,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;QAC1C,oBAAoB,GAAG,oBAAoB,CAAC,IAAI,CAC9C,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,oBAAoB,CAAC;cACtC,MAAM,CAAC,oBAAoB,CAAC,MAAM,GAAG,gBAAgB;cACrD,CAAC,CACN,CAAC;QACF,mBAAmB,GAAG,mBAAmB,CAAC,IAAI,CAC5C,gCAAgC,IAAI,MAAM,GAAG,eAAe,GAAG,CAAC,CACjE,CAAC;QACF,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,IAAI,CAAC,CAAC,CAAC;QACnD,oBAAoB,GAAG,oBAAoB,CAAC,IAAI,CAC9C,wBAAwB,IAAI,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,sBAAsB,CAAC,IAAI,CAAC,GAAG,CAAC,CACpF,CAAC;KACH,CAAC,CAAC;IAEH,YAAY,GAAG,YAAY;SACxB,IAAI,CAAC,mBAAmB,CAAC;SACzB,IAAI,CAAC,oBAAoB,CAAC;SAC1B,IAAI,CAAC,oBAAoB,CAAC,CAAC;IAE9B,OAAO;QACL,QAAQ;QACR,QAAQ;QACR,YAAY;QACZ,mBAAmB;QACnB,oBAAoB;QACpB,oBAAoB;QACpB,gBAAgB,EAAE,IAAI,SAAS,CAAC,YAAY,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;KACjE,CAAC;AACJ,CAAC;;MCxCY,kCAAmC,SAAQ,KAAK;IAG3D;QACE,KAAK,CACH,wGAAwG,CACzG,CAAC;QALJ,SAAI,GAAG,oCAAoC,CAAC;KAM3C;CACF;AAED,MAAM,oBAAoB,GAAG,EAAE,CAAC;AAEhC;;;MAGa,eAAe;;;;;;;IA8D1B,YACkB,MAAc,EACX,OAAgB,EAC3B,SAAoC;QAF5B,WAAM,GAAN,MAAM,CAAQ;QACX,YAAO,GAAP,OAAO,CAAS;QAC3B,cAAS,GAAT,SAAS,CAA2B;QAhEpC,qBAAgB,GAAG,IAAI,aAAa,CAA+B,CAAC,CAAC,CAAC;QACtE,qBAAgB,GAAG,IAAI,aAAa,CAAgB,CAAC,CAAC,CAAC;QACvD,cAAS,GAAG,KAAK,CAAC;QAGlB,aAAQ,GAA8B,IAAI,CAAC,SAAS,CAAC,IAAI,CACjE,GAAG,CAAC,CAAC,OAAO;YACV,IACE,CAAC,IAAI,CAAC,SAAS;gBACf,IAAI,CAAC,QAAQ;gBACb,OAAO,CAAC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,EACrD;gBACA,MAAM,IAAI,kCAAkC,EAAE,CAAC;aAChD;YAED,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;SACzB,CAAC,EACF,WAAW,CAAC,EAAE,UAAU,EAAE,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAC/C,CAAC;;QAGM,eAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CACrC,GAAG,CAAC,CAAC,IAAI;YACP,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,UAAU,EAAE;gBACrC,KAAK,MAAM,EAAE,IAAI,OAAO,EAAE;oBACxB,IAAI,EAAE,CAAC,IAAI,KAAK,IAAI,CAAC,MAAM,EAAE;wBAC3B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;wBACtB,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBACjC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE,CAAC,QAAwC,CAAC,CAAC;;wBAGxE,OAAO,IAAI,CAAC;qBACb;iBACF;aACF;SACF,CAAC,EACF,MAAM,CAA2C,CAAC,CAAC;YACjD,OAAO,OAAO,CAAC,KAAK,WAAW,CAAC;SACjC,CAAC,EACF,KAAK,EAAE,EACP,WAAW,CAAC,EAAE,UAAU,EAAE,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAC/C,CAAC;QAyBA,IAAI,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,gBAAgB,CAAC,KAAK,EAAE;YAC7D,MAAM,IAAI,yBAAyB,CAAC,2BAA2B,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;SAC/E;QACD,IAAI,CAAC,UAAU;aACZ,IAAI,CACH,KAAK,EAAE,EACP,UAAU,CAAC,MAAM,EAAE,CAAC,SAAS,CAAC,CAAC,CAChC;aACA,SAAS,EAAE,CAAC;KAChB;IAhCK,gBAAgB;;YACpB,OAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,SAAS,EAAE,CAAC;SACxD;KAAA;;;;;IAMK,OAAO;;YACX,OAAO,oBAAoB,CAAC,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC;SAC5D;KAAA;IAwBK,sBAAsB;;YAC1B,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;gBACnB,OAAO,CAAC,CAAC;aACV;YAED,OAAO,aAAa,CAAC,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;iBAC7E,IAAI,CACH,GAAG,CAAC,CAAC,CAAC,YAAY,EAAE,IAAI,CAAC;gBACvB,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,YAAY,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC;aAC1D,CAAC,EACF,KAAK,EAAE,CACR;iBACA,SAAS,EAAE,CAAC;SAChB;KAAA;IAEK,iBAAiB,CAAC,kBAAkB,GAAG,MAAM;;;YAEjD,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;gBACnB,OAAO,IAAI,CAAC;aACb;YAED,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,EAAE,KAAK,EAAE,kBAAkB,EAAE,CAAC,CAAC;YAC5F,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,SAAS,EAAE,CAAC;YAE7E,MAAM,SAAS,GAAG,cAAc,CAAC,KAAK,GAAG,cAAc,CAAC,MAAM,CAAC,KAAK,CAAC;;YAGrE,IAAI,SAAS,IAAI,CAAC,EAAE;gBAClB,OAAO,IAAI,CAAC;aACb;YAED,MAAM,aAAa,GAAG,IAAI,CAAC,GAAG,CAC5B,cAAc,CAAC,MAAM,CAAC,KAAK,GAAG,SAAS,EACvC,cAAc,CAAC,MAAM,CAAC,KAAK,GAAG,oBAAoB,CACnD,CAAC;YAEF,MAAM,MAAM,GAAG,IAAI,GAAG,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC;YAC/F,OAAO,MAAM,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;SACxC;KAAA;IAED,sBAAsB,CAAC,aAAsB;QAC3C,IAAI,OAAO,aAAa,KAAK,WAAW,IAAI,aAAa,GAAG,CAAC,EAAE;YAC7D,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;SAC1D;QAED,MAAM,EAAE,wBAAwB,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;QAEzD,MAAM,IAAI,GAAG,aAAa,KAAK,SAAS,GAAG,aAAa,GAAG,wBAAwB,CAAC;QAEpF,IAAI,IAAI,KAAK,SAAS,EAAE;YACtB,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;SACrE;QAED,OAAO,aAAa,CAAC,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAC/D,oBAAoB,CAAC,CAAC,GAAG,YAAY,CAAC,EAAE,GAAG,OAAO,CAAC;YACjD,OAAO,YAAY,CAAC,IAAI,KAAK,OAAO,CAAC,IAAI,CAAC;SAC3C,CAAC,EACF,GAAG,CAAC,CAAC,CAAC,YAAY,EAAE,IAAI,CAAC;YACvB,OAAO;gBACL,KAAK,EAAE,IAAI;gBACX,oBAAoB,EAAE,IAAI;gBAC1B,mBAAmB,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,YAAY,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC;gBACtE,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,YAAY,CAAC,MAAM,CAAC,KAAK,IAAI,IAAI,GAAG,CAAC;gBACpE,iBAAiB,EAAE,MAAM,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC;aAC3D,CAAC;SACH,CAAC,EACF,SAAS,CAAC,CAAC,EAAE,SAAS,EAAE,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,CAC/C,CAAC;KACH;;;;;IAMD,YAAY,CAAC,aAAsB;QACjC,OAAO,IAAI,CAAC,sBAAsB,CAAC,aAAa,CAAC,CAAC,SAAS,EAAE,CAAC;KAC/D;;;MCpLU,oBAAqB,SAAQ,eAAe;IACvD,YACkB,MAAc,EACX,OAAgB,EACnC,QAAmC;QAEnC,KAAK,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;QAJjB,WAAM,GAAN,MAAM,CAAQ;QACX,YAAO,GAAP,OAAO,CAAS;KAIpC;IAEY,eAAe;;YAC1B,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACtD,OAAO,eAAe,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,MAAM,CAAC,MAAM,CAE5C,CAAC;SACf;KAAA;IAEK,MAAM;;YACV,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;gBACnB,OAAO,SAAS,CAAC;aAClB;YAED,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAC;YAEzC,QACE,EAAE;iBACC,MAAM,CAAC,CAAC,MAAM,KAAK,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;iBAC3D,GAAG,CAAC,CAAC,MAAM;gBACV,IAAI,qBAAqB,CAAC,MAAM,CAAC,EAAE;oBACjC,OAAO,MAAM,CAAC,QAAQ,CAAC,gBAAgB,CAAC,MAAM,CAAC;iBAChD;qBAAM;oBACL,OAAO,SAAS,CAAC;iBAClB;aACF,CAAC,CAAC,CAAC,CAAC,IAAI,SAAS,EACpB;SACH;KAAA;;;MCpCU,yBAA0B,SAAQ,eAAe;IAC5D,YACkB,MAAc,EACX,OAAgB,EACnC,QAAmC;QAEnC,KAAK,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;QAJjB,WAAM,GAAN,MAAM,CAAQ;QACX,YAAO,GAAP,OAAO,CAAS;KAIpC;IAEY,eAAe;;YAC1B,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACtD,OAAO,eAAe,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,MAAM,CAAC,MAAM,CAE5C,CAAC;SACf;KAAA;IAEY,mBAAmB;;YAC9B,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACtD,OAAO,eAAe,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,MAAM,CAAC,UAAU,CAEhD,CAAC;SACf;KAAA;IAEY,MAAM;;YACjB,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;gBACnB,OAAO,SAAS,CAAC;aAClB;YAED,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAC5C,IAAI,CAAC,EAAE,EAAE;gBACP,OAAO,SAAS,CAAC;aAClB;YAED,OAAO,EAAE,CAAC,QAAQ,CAAC,gBAAgB,CAAC,MAAM,CAAC;SAC5C;KAAA;;;MC3BU,0BAAkF,SAAQ,eAAe;IACpH,YACkB,MAAc,EACX,OAAgB,EACnC,QAAmC;QAEnC,KAAK,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;QAJjB,WAAM,GAAN,MAAM,CAAQ;QACX,YAAO,GAAP,OAAO,CAAS;KAIpC;IAEY,oBAAoB;;YAC/B,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACtD,OAAO,YAAY,CAAC,eAAe,EAAE,MAAM,CAAC,WAAW,CAE1C,CAAC;SACf;KAAA;IAEY,eAAe;;YAC1B,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACtD,OAAO,YAAY,CAAC,eAAe,EAAE,MAAM,CAAC,MAAM,CAErC,CAAC;SACf;KAAA;IAEY,MAAM;;YACjB,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;gBACnB,OAAO,SAAS,CAAC;aAClB;YAED,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,oBAAoB,EAAE,CAAC;YAC7C,IAAI,CAAC,EAAE,EAAE;gBACP,OAAO,SAAS,CAAC;aAClB;YAED,OAAO,EAAE,CAAC,QAAQ,CAAC,gBAAgB,CAAC,MAAM,CAAC;SAC5C;KAAA;IAEY,QAAQ;;YACnB,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,oBAAoB,EAAE,CAAC;YAC7C,MAAM,OAAO,GAAG,CAAC,CAAA,EAAE,aAAF,EAAE,uBAAF,EAAE,CAAE,QAAQ,CAAC,gBAAgB,CAAC,oBAAoB,KAAI,EAAE,EAAE,CAAC,CAAC,CAAC;YAC9E,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAU,OAAO,CAAC,CAAC;SACjD;KAAA;;;MC1CU,0BAA2B,SAAQ,eAAe;IAC7D,YACkB,MAAc,EACX,OAAgB,EACnC,QAAmC;QAEnC,KAAK,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;QAJjB,WAAM,GAAN,MAAM,CAAQ;QACX,YAAO,GAAP,OAAO,CAAS;KAIpC;IAEY,eAAe;;YAC1B,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACtD,OAAO,eAAe,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,MAAM,CAAC,MAAM,CAE5C,CAAC;SACf;KAAA;IAEY,oBAAoB;;YAC/B,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACtD,OAAO,eAAe,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,MAAM,CAAC,WAAW,CAEjD,CAAC;SACf;KAAA;IAEY,MAAM;;YACjB,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;gBACnB,OAAO,SAAS,CAAC;aAClB;YAED,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,oBAAoB,EAAE,CAAC;YAC7C,IAAI,CAAC,EAAE,EAAE;gBACP,OAAO,SAAS,CAAC;aAClB;YAED,OAAO,EAAE,CAAC,QAAQ,CAAC,gBAAgB,CAAC,MAAM,CAAC;SAC5C;KAAA;;;ACdI,MAAM,UAAU,GACrB,CAAI,aAA8B,KAClC,CAAC,MAAM;IACL,IAAI,OAAO,GAA4B,IAAI,CAAC;IAE5C,OAAO,KAAK,CAAC;QACX,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO,GAAG,IAAI,aAAa,EAAK,CAAC;YACjC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;YACxC,aAAa,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,SAAS,CAAC;gBACpC,OAAO,GAAG,IAAI,CAAC;aAChB,CAAC,CAAC;SACJ;QAED,OAAO,OAAO,CAAC;KAChB,CAAC,CAAC;AACL,CAAC,CAAC;AAEG,MAAM,mCAAmC,GAAG,CACjD,YAAgC,EAChC,YAAuC,EACvC,OAAgB,EAChB,SAAyB;IAEzB,OAAO,YAAY,CAAC,IAAI,CACtB,SAAS,CAAC,MAAM,YAAY,CAAC,EAC7B,uBAAuB,CAAC,MAAM,CAAC,EAC/B,WAAW,CACT,OAAO,CAAC,MAAM,CAAC,gCAAgC,GAAG,IAAI,EACtD,UAAU,CAAC,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC,EACvD,SAAS,CACV,EACD,WAAW,CAAC;QACV,QAAQ,EAAE,IAAI;QACd,SAAS;KACV,CAAC,CACH,CAAC;AACJ,CAAC,CAAC;MAMW,gBAAgB;IAC3B,YAAoB,OAAgB;QAAhB,YAAO,GAAP,OAAO,CAAS;;QAG5B,kBAAa,GAAG,KAAK,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,IAAI,CACzE,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAC3B,CAAC;KALsC;IAO1B,uBAAuB;;YACnC,MAAM,iCAAiC,GACrC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,iCAAiC,KAAK,SAAS;kBAC/D,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,iCAAiC;kBACrD,MAAM,IAAI,CAAC,OAAO,CAAC,8BAA8B,EAAE,CAAC;YAC1D,OAAO,mCAAmC,CACxC,KAAK,CAAC,CAAC,EAAE,iCAAiC,GAAG,IAAI,CAAC,EAClD,IAAI,CAAC,aAAa,EAClB,IAAI,CAAC,OAAO,CACb,CAAC;SACH;KAAA;IAEO,qBAAqB,CAAC,UAAkB,EAAE,KAAK,GAAG,CAAC;QACzD,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC,IAAI,CAChE,SAAS,CAAC,CAAC,KAAK;YACd,IAAI,KAAK,KAAK,CAAC,EAAE;gBACf,OAAO,EAAE,CAAC,KAAK,CAAC,CAAC;aAClB;YAED,OAAO,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC,IAAI,CAC9C,SAAS,CAAC,KAAK,CAAC,EAChB,SAAS,CAAC,CAAO,KAAK;gBACpB,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;aAC5D,CAAA,CAAC,CACH,CAAC;SACH,CAAC,CACH,CAAC;KACH;IAEa,8BAA8B,CAAC,EAAE,eAAe,EAA0B;;YACtF,MAAM,kBAAkB,GAAgC,EAAE,CAAC;YAE3D,IAAI,eAAe,EAAE;gBACnB,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,eAAe,CAAC,CAAC,CAAC;aACtE;YAED,kBAAkB,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,uBAAuB,EAAE,CAAC,CAAC;YAE9D,OAAO,MAAM,CAAC,GAAG,kBAAkB,CAAC,CAAC;SACtC;KAAA;IAEK,eAAe,CACnB,IAAY,EACZ,SAAiC,EAAE;;YAEnC,OAAO,IAAI,eAAe,CACxB,IAAI,EACJ,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,EACpB,MAAM,IAAI,CAAC,8BAA8B,CAAC,MAAM,CAAC,CAClD,CAAC;SACH;KAAA;IAEK,oBAAoB,CACxB,IAAY,EACZ,SAAiC,EAAE;;YAEnC,OAAO,IAAI,oBAAoB,CAC7B,IAAI,EACJ,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,EACpB,MAAM,IAAI,CAAC,8BAA8B,CAAC,MAAM,CAAC,CAClD,CAAC;SACH;KAAA;IAEK,0BAA0B,CAC9B,IAAY,EACZ,SAAiC,EAAE;;YAEnC,OAAO,IAAI,0BAA0B,CACnC,IAAI,EACJ,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,EACpB,MAAM,IAAI,CAAC,8BAA8B,CAAC,MAAM,CAAC,CAClD,CAAC;SACH;KAAA;IAEK,yBAAyB,CAC7B,IAAY,EACZ,SAAiC,EAAE;;YAEnC,OAAO,IAAI,yBAAyB,CAClC,IAAI,EACJ,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,EACpB,MAAM,IAAI,CAAC,8BAA8B,CAAC,MAAM,CAAC,CAClD,CAAC;SACH;KAAA;IAEK,0BAA0B,CAC9B,IAAY,EACZ,SAAiC,EAAE;;YAEnC,OAAO,IAAI,0BAA0B,CACnC,IAAI,EACJ,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,EACpB,MAAM,IAAI,CAAC,8BAA8B,CAAC,MAAM,CAAC,CAClD,CAAC;SACH;KAAA;;;MCtKU,aAAc,SAAQ,gBAAgB;IACjD,YAAY,OAAgB;QAC1B,KAAK,CAAC,OAAO,CAAC,CAAC;KAChB;IAEK,UAAU,CAAC,OAAe;;YAC9B,IAAI,eAAe,CAAC,OAAO,CAAC,KAAK,gBAAgB,CAAC,KAAK,EAAE;gBACvD,MAAM,IAAI,mBAAmB,CAAC,oBAAoB,OAAO,EAAE,CAAC,CAAC;aAC9D;YACD,OAAO,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;SACrC;KAAA;IAEK,WAAW,CAAC,OAAe;;YAC/B,IAAI,eAAe,CAAC,OAAO,CAAC,KAAK,gBAAgB,CAAC,KAAK,EAAE;gBACvD,MAAM,IAAI,mBAAmB,CAAC,oBAAoB,OAAO,EAAE,CAAC,CAAC;aAC9D;YACD,OAAO,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;SACtC;KAAA;IAEK,QAAQ,CAAC,GAAW,EAAE,MAAc;;YACxC,IAAI,eAAe,CAAC,GAAG,CAAC,KAAK,gBAAgB,CAAC,KAAK,EAAE;gBACnD,MAAM,IAAI,mBAAmB,CAAC,4BAA4B,GAAG,EAAE,CAAC,CAAC;aAClE;YACD,MAAM,SAAS,GAAyB;gBACtC,IAAI,EAAE,MAAM,CAAC,UAAU;gBACvB,GAAG;gBACH,MAAM;aACP,CAAC;YAEF,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,EAAE,SAAS,EAAE,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;YACtF,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YAC/C,MAAM,KAAK,GAAG,GAAG,WAAW,CAAC,OAAO,kIAAkI,CAAC;YACvK,OAAO,IAAI,SAAS,CAClB,MAAM,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,KAAK,CAAC,kCAChC,WAAW,KAAE,OAAO,EAAE,KAAK,KAChC,EAAE,EACF,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CACrB,CAAC;SACH;KAAA;;;AC/CH,MAAM,iBAAiB,GAAG,GAAG,CAAC;AAC9B,MAAM,0BAA0B,GAAG,CAAC,CAAC;AACrC,MAAM,yBAAyB,GAAG,GAAG,CAAC;AAEtC,MAAM,UAAU,GAAG,GAAG,CAAC;AAUvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAoCa,QAAQ;IACnB,YACmB,cAA+B,EAC/B,aAA8B,EAC/B,MAAuB,EACtB,6BAA8C;;;;IAI9C,eAAgC,iBAAiB;QAPjD,mBAAc,GAAd,cAAc,CAAiB;QAC/B,kBAAa,GAAb,aAAa,CAAiB;QAC/B,WAAM,GAAN,MAAM,CAAiB;QACtB,kCAA6B,GAA7B,6BAA6B,CAAiB;QAI9C,iBAAY,GAAZ,YAAY,CAAqC;KAChE;;;;IAKJ,IAAI,YAAY;QACd,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC,CAAC;KAC7F;;;;IAKD,IAAI,YAAY;QACd,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC;QACtD,OAAO,KAAK,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;KAC9B;;;;IAKD,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,GAAC,IAAI,GAAG,UAAU,CAAC,CAAC;KACpE;IAED,IAAY,iBAAiB;QAC3B,QACE,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,GAAC,IAAI,GAAG,UAAU,IAAI,yBAAyB,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,0BAA0B,EAC5H;KACL;IAEO,OAAO,CAAC,OAAe;QAC7B,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;KACnC;;;;IAKD,IAAI,eAAe;QACjB,OAAO,IAAI,CAAC,OAAO,CAAC,iBAAiB,GAAG,IAAI,CAAC,iBAAiB,CAAC,CAAC;KACjE;;;;IAKD,IAAI,iBAAiB;QACnB,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,GAAG,CAAC,CAAC,CAAC;KACrE;;;;IAKD,IAAI,iBAAiB;QACnB,QACE,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,iBAAiB,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,iBAAiB,CAAC,EAC7F;KACH;;;;IAKD,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,YAAY,CAAC;KACjD;;;;;IAMD,IAAI,gBAAgB;QAClB,OAAO,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;KACpC;IAED,OAAO,oCAAoC,CAAC,kBAAwC;QAClF,IAAI,aAAa,GAAG,CAAC,CAAC;QACtB,IAAI,YAAY,GAAG,CAAC,CAAC;QACrB,IAAI,MAAM,GAAG,CAAC,CAAC;QACf,IAAI,6BAA6B,GAAG,CAAC,CAAC;QACtC,IAAI,YAAgC,CAAC;QAErC,kBAAkB,CAAC,OAAO,CAAC,QAAQ;YACjC,aAAa,IAAI,QAAQ,CAAC,aAAa,CAAC;YACxC,YAAY,IAAI,QAAQ,CAAC,YAAY,CAAC;YACtC,MAAM,IAAI,QAAQ,CAAC,MAAM,CAAC;YAC1B,6BAA6B,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,6BAA6B,EAAE,6BAA6B,CAAC,CAAC;YAChH,IAAI,QAAQ,CAAC,YAAY,EAAE;gBACzB,YAAY,GAAG,YAAY,GAAG,YAAY,GAAG,QAAQ,CAAC,YAAY,GAAG,QAAQ,CAAC,YAAY,CAAC;aAC5F;SACF,CAAC,CAAA;QACF,OAAO,IAAI,QAAQ,CAAC,aAAa,EAAE,YAAY,EAAE,MAAM,EAAE,6BAA6B,EAAE,YAAY,CAAC,CAAC;KACvG;IAED,OAAO,0CAA0C,CAAC,kBAAwC;QACxF,OAAO,kBAAkB,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,QAAQ,CAAC,CAAC,CAAC,aAAa,EAAE,CAAC,CAAC,YAAY,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,6BAA6B,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAA;KAC7I;;;AClHH,MAAM,WAAW,GAAG,CAClB,gBAAwB,EACxB,aAA+B;IAE/B,OAAO;QACL,GAAG,EAAE,OAAO,gBAAgB,CAAC,GAAG,KAAK,WAAW,GAAG,aAAa,CAAC,GAAG,GAAG,gBAAgB,CAAC,GAAG;QAC3F,QAAQ,EACN,OAAO,gBAAgB,CAAC,QAAQ,KAAK,WAAW;cAC5C,aAAa,CAAC,QAAQ;cACtB,gBAAgB,CAAC,QAAQ;QAC/B,YAAY,EACV,OAAO,gBAAgB,CAAC,YAAY,KAAK,WAAW;cAChD,aAAa,CAAC,YAAY;cAC1B,gBAAgB,CAAC,YAAY;KACpC,CAAC;AACJ,CAAC,CAAC;AAEF;AACA,MAAM,cAAc,GAClB,qGAAqG,CAAC;MAE3F,mBAAoB,SAAQ,gBAAgB;IAAzD;;QACmB,uBAAkB,GAAG,GAAG,CAAC;QACzB,wBAAmB,GAAG,GAAG,CAAC;QAC1B,mBAAc,GAAG,GAAG,CAAC;KA2YvC;;IAxYe,gBAAgB,CAAC,GAAW,EAAE,SAA4B,EAAE,WAAoB;;YAC5F,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;YAC/C,MAAM,EACJ,4BAA4B,EAC5B,wBAAwB,EACxB,gCAAgC,EAChC,aAAa,GACd,GAAG,SAAS,CAAC;YACd,OAAO;gBACL,GAAG,EAAE,CAAC;gBACN,QAAQ,EAAE,WAAW;sBACjB,IAAI,CAAC,KAAK,CACR,IAAI,CAAC,yBAAyB,CAC5B,wBAAwB,EACxB,4BAA4B,EAC5B,WAAW,CACZ,CAAC,QAAQ,EAAE,CACb;sBACD,4BAA4B,CAAC,QAAQ,EAAE;gBAC3C,YAAY,EAAE,IAAI,CAAC,KAAK,CACtB,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,SAAS,CAAC,aAAa,CAAC,EAAE,gCAAgC,CAAC,CAAC,QAAQ,EAAE,CAC7F;aACF,CAAC;SACH;KAAA;;;;;IAMO,yBAAyB,CAC/B,aAAwB,EACxB,UAAqB,EACrB,WAAmB;QAEnB,OAAO,SAAS,CAAC,GAAG,CAAC,UAAU,EAAE,aAAa,CAAC,GAAG,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC;KACtE;IAEO,2CAA2C,CACjD,OAAwC,EACxC,IAAY,EACZ,WAAsB;QAEtB,MAAM,gBAAgB,GAAG,sBAAsB,CAAC,EAAE,QAAQ,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QACzE,IAAI,QAAQ,GAAG,CAAC,CAAC;QACjB,IAAI,aAAa,GAAG,CAAC,CAAC;QACtB,IAAI,YAAY,GAAG,CAAC,CAAC;QACrB,gBAAgB,CAAC,OAAO,CAAC,CAAC,MAAM;YAC9B,YAAY;gBACV,sBAAsB,IAAI,MAAM,IAAI,OAAO,MAAM,CAAC,oBAAoB,KAAK,WAAW;sBAClF,MAAM,CAAC,oBAAoB,CAAC,MAAM,GAAG,IAAI,CAAC,mBAAmB;sBAC7D,CAAC,CAAC;YACR,YAAY,IAAI,gCAAgC,IAAI,MAAM,GAAG,IAAI,CAAC,kBAAkB,GAAG,CAAC,CAAC;YACzF,QAAQ,IAAI,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;YAC7C,aAAa,IAAI,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YACvD,YAAY;gBACV,wBAAwB,IAAI,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,sBAAsB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACtF,YAAY;gBACV,cAAc,IAAI,MAAM,IAAI,gBAAgB,IAAI,MAAM;sBAClD,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC;sBAChC,CAAC,CAAC;SACT,CAAC,CAAC;QAEH,IAAI,QAAQ,KAAK,CAAC,IAAI,aAAa,KAAK,CAAC,EAAE;;YAEzC,aAAa,GAAG,QAAQ,GAAG,IAAI,CAAC;SACjC;QAED,IAAI,WAAW,CAAC,OAAO,CAAC,EAAE;YACxB,OAAO;gBACL,aAAa,EAAE,aAAa,IAAI,CAAC;gBACjC,YAAY,EAAE,MAAM,CAAC,YAAY,IAAI,CAAC,CAAC;gBACvC,MAAM,EAAE,IAAI;gBACZ,6BAA6B,EAAE,WAAW,CAAC,QAAQ,EAAE;aACtD,CAAC;SACH;aAAM;YACL,OAAO;gBACL,aAAa,EAAE,CAAC;gBAChB,YAAY,EAAE,CAAC;gBACf,MAAM,EAAE,IAAI;gBACZ,6BAA6B,EAAE,WAAW,CAAC,QAAQ,EAAE;gBACrD,YAAY,EAAE,CAAC;aAChB,CAAC;SACH;KACF;IAEa,eAAe,CAAC,MAA8B,EAAE,SAA4B;;YACxF,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;YACrD,MAAM,EACJ,OAAO,EACP,IAAI,EAAE,EAAE,MAAM,EAAE,QAAQ,EAAE,GAC3B,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YAC/B,MAAM,SAAS,GAAyB;gBACtC,SAAS,EAAE,EAAE,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,cAAc,EAAE;gBAC1D,QAAQ,EAAE,MAAM,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE;aACtC,CAAC;YAEF,MAAM,EAAE,UAAU,EAAE,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YACtD,MAAM,EAAE,aAAa,EAAE,GAAG,SAAS,CAAC;YACpC,MAAM,MAAM,GAAG,CAAC,GAAG,aAAa,CAAC,UAAU,EAAE,aAAa,CAAC,EAAE,GAAG,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC;;YAG3F,IAAI,MAAM,CAAC,MAAM,EAAE;gBACjB,MAAM,IAAI,mBAAmB,CAAC,MAAM,CAAC,CAAC;aACvC;YAED,IAAI,WAAW,GAAG,CAAC,CAAC;YACpB,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,MAAM,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;gBAClE,WAAW;oBACT,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,QAAQ;0BACpC,MAAM,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC;0BAC3B,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC;aAC/B;YAED,OAAO,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;gBAC/B,OAAO,IAAI,CAAC,2CAA2C,CACrD,CAAC;;gBAED,CAAC,CAAC,IAAI,KAAK,QAAQ,GAAG,IAAI,CAAC,cAAc,GAAG,CAAC,GAAG,OAAO,CAAC,MAAM,GAAG,CAAC,GAAG,WAAW,EAChF,aAAa,CACd,CAAC;aACH,CAAC,CAAC;SACJ;KAAA;;;;;;;;;IAUK,SAAS,CAAC,EAAyD;YAAzD,EAAE,GAAG,EAAE,YAAY,EAAE,QAAQ,OAA4B,EAAvB,IAAI,cAAtC,mCAAwC,CAAF;;YACpD,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC;YAC9C,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;YACxD,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC;YAC3E,MAAM,EAAE,GAAG,MAAM,0BAA0B,CACzC,MAAM,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,sBAAsB,iCAC3C,IAAI,GACJ,WAAW,CAAC,EAAE,GAAG,EAAE,YAAY,EAAE,QAAQ,EAAE,EAAE,cAAc,CAAC,EAC/D,CACH,CAAC;YACF,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;YAC9D,MAAM,GAAG,GAAG,cAAc,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;YACpE,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,eAAe,CACnD,EAAE,SAAS,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,EAC/B,iBAAiB,CAClB,CAAC;YACF,IAAI,cAAc,EAAE;gBAClB,kBAAkB,CAAC,KAAK,EAAE,CAAC;aAC5B;YACD,OAAO,QAAQ,CAAC,oCAAoC,CAAC,kBAAkB,CAAC,CAAC;;KAC1E;;;;;;;;;IASK,QAAQ,CAAC,EAAwD;YAAxD,EAAE,GAAG,EAAE,YAAY,EAAE,QAAQ,OAA2B,EAAtB,IAAI,cAAtC,mCAAwC,CAAF;;YACnD,IAAI,eAAe,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,gBAAgB,CAAC,KAAK,EAAE;gBACvD,MAAM,IAAI,mBAAmB,CAAC,yBAAyB,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;aACnE;YACD,IAAI,IAAI,CAAC,MAAM,IAAI,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,gBAAgB,CAAC,KAAK,EAAE;gBAC1E,MAAM,IAAI,mBAAmB,CAAC,6BAA6B,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;aAC3E;YACD,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC;YAC9C,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;YACxD,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC;YAC3E,MAAM,EAAE,GAAG,MAAM,uBAAuB,iCACnC,IAAI,GACJ,WAAW,CAAC,EAAE,GAAG,EAAE,YAAY,EAAE,QAAQ,EAAE,EAAE,cAAc,CAAC,EAC/D,CAAC;YACH,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;YAC9D,MAAM,GAAG,GAAG,cAAc,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;YACpE,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,eAAe,CACnD,EAAE,SAAS,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,EAC/B,iBAAiB,CAClB,CAAC;YACF,IAAI,cAAc,EAAE;gBAClB,kBAAkB,CAAC,KAAK,EAAE,CAAC;aAC5B;YACD,OAAO,QAAQ,CAAC,oCAAoC,CAAC,kBAAkB,CAAC,CAAC;;KAC1E;;;;;;;;;IAUK,WAAW,CAAC,EAAwD;YAAxD,EAAE,GAAG,EAAE,QAAQ,EAAE,YAAY,OAA2B,EAAtB,IAAI,cAAtC,mCAAwC,CAAF;;YACtD,IAAI,IAAI,CAAC,MAAM,IAAI,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,gBAAgB,CAAC,KAAK,EAAE;gBAC1E,MAAM,IAAI,mBAAmB,CAAC,2BAA2B,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;aACzE;YACD,IAAI,IAAI,CAAC,QAAQ,IAAI,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,gBAAgB,CAAC,KAAK,EAAE;gBAC9E,MAAM,IAAI,mBAAmB,CAAC,6BAA6B,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;aAC7E;YAED,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC;YAC9C,MAAM,eAAe,GAAG,IAAI,CAAC,MAAM,IAAI,GAAG,CAAC;YAC3C,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;YACxD,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,eAAe,EAAE,iBAAiB,CAAC,CAAC;YACvF,MAAM,EAAE,GAAG,MAAM,0BAA0B,iCACtC,IAAI,GACJ,WAAW,CAAC,EAAE,GAAG,EAAE,YAAY,EAAE,QAAQ,EAAE,EAAE,cAAc,CAAC,EAC/D,CAAC;YACH,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;YAC9D,MAAM,GAAG,GAAG,cAAc,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;YACpE,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,eAAe,CACnD,EAAE,SAAS,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,EAC/B,iBAAiB,CAClB,CAAC;YACF,IAAI,cAAc,EAAE;gBAClB,kBAAkB,CAAC,KAAK,EAAE,CAAC;aAC5B;YACD,OAAO,QAAQ,CAAC,oCAAoC,CAAC,kBAAkB,CAAC,CAAC;;KAC1E;;;;;;;IAQK,KAAK,CAAC,MAAwB;;YAClC,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC;YAC9C,IAAI,UAAU,GAAmB,EAAE,CAAC;YACpC,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;YACxD,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,GAAG,EAAE,iBAAiB,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;YAC1F,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;gBAC1B,QAAQ,KAAK,CAAC,IAAI;oBAChB,KAAK,MAAM,CAAC,WAAW;wBACrB,UAAU,CAAC,IAAI,CACb,MAAM,uBAAuB,iCACxB,KAAK,GACL,WAAW,CAAC,KAAK,EAAE,cAAc,CAAC,EACrC,CACH,CAAC;wBACF,MAAM;oBACR,KAAK,MAAM,CAAC,WAAW;wBACrB,UAAU,CAAC,IAAI,CACb,MAAM,0BAA0B,CAC9B,MAAM,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,sBAAsB,iCAC3C,KAAK,GACL,WAAW,CAAC,KAAK,EAAE,cAAc,CAAC,EACrC,CACH,CACF,CAAC;wBACF,MAAM;oBACR,KAAK,MAAM,CAAC,UAAU;wBACpB,UAAU,CAAC,IAAI,CACb,MAAM,0BAA0B,iCAC3B,KAAK,GACL,WAAW,CAAC,KAAK,EAAE,cAAc,CAAC,EACrC,CACH,CAAC;wBACF,MAAM;oBACR,KAAK,MAAM,CAAC,UAAU;wBACpB,UAAU,CAAC,IAAI,iCACV,KAAK,GACL,cAAc,EACjB,CAAC;wBACH,MAAM;oBACR,KAAK,MAAM,CAAC,wBAAwB;wBAClC,UAAU,CAAC,IAAI,CACb,MAAM,qCAAqC,iCACtC,KAAK,GACL,WAAW,CAAC,KAAK,EAAE,cAAc,CAAC,EACrC,CACH,CAAC;wBACF,MAAM;oBACR;wBACE,MAAM,IAAI,KAAK,CAAC,+BAAgC,KAAa,CAAC,IAAI,EAAE,CAAC,CAAC;iBACzE;aACF;YACD,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC;YACpE,UAAU,GAAG,cAAc,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,GAAG,CAAC,GAAG,UAAU,CAAC;YACnF,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,eAAe,CACnD,EAAE,SAAS,EAAE,UAAU,EAAE,MAAM,EAAE,GAAG,EAAE,EACtC,iBAAiB,CAClB,CAAC;YAEF,OAAO,QAAQ,CAAC,0CAA0C,CAAC,kBAAkB,CAAC,CAAC;SAChF;KAAA;;;;;;;;;IAUK,gBAAgB,CAAC,MAA8B;;YACnD,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC;YAC9C,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;YACxD,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC;YAC3E,MAAM,EAAE,GAAG,MAAM,+BAA+B,iCAAM,MAAM,GAAK,cAAc,GAAI,GAAG,CAAC,CAAC;YACxF,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;YAC9D,MAAM,GAAG,GAAG,cAAc,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;YACpE,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,eAAe,CACnD,EAAE,SAAS,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,EAC/B,iBAAiB,CAClB,CAAC;YACF,IAAI,cAAc,EAAE;gBAClB,kBAAkB,CAAC,KAAK,EAAE,CAAC;aAC5B;YACD,OAAO,QAAQ,CAAC,oCAAoC,CAAC,kBAAkB,CAAC,CAAC;SAC1E;KAAA;;;;;;;;;IAUK,MAAM,CAAC,MAAqB;;YAChC,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC;YAC9C,IAAI,MAAM,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,EAAE;gBAC3C,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;gBACxD,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC;gBAC3E,MAAM,EAAE,GAAG,MAAM,qBAAqB,iCAE/B,MAAM,GACN,cAAc,GAEnB,GAAG,EACH,MAAM,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAC9B,CAAC;gBACF,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,eAAe,CACnD,EAAE,SAAS,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,EAC9B,iBAAiB,CAClB,CAAC;gBACF,OAAO,QAAQ,CAAC,oCAAoC,CAAC,kBAAkB,CAAC,CAAC;aAC1E;SACF;KAAA;;;;;;;;;IAUK,sBAAsB,CAAC,EAKE;YALF,EAC3B,GAAG,EACH,YAAY,EACZ,QAAQ,OAEqB,EAD1B,IAAI,cAJoB,mCAK5B,CADQ;;YAEP,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC;YAC9C,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;YACxD,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC;YAC3E,MAAM,EAAE,GAAG,MAAM,qCAAqC,iCACjD,IAAI,GACJ,WAAW,CAAC,EAAE,GAAG,EAAE,YAAY,EAAE,QAAQ,EAAE,EAAE,cAAc,CAAC,EAC/D,CAAC;YACH,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;YAC9D,MAAM,GAAG,GAAG,cAAc,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;YACpE,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,eAAe,CACnD,EAAE,SAAS,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,EAC/B,iBAAiB,CAClB,CAAC;YACF,IAAI,cAAc,EAAE;gBAClB,kBAAkB,CAAC,KAAK,EAAE,CAAC;aAC5B;YACD,OAAO,QAAQ,CAAC,oCAAoC,CAAC,kBAAkB,CAAC,CAAC;;KAC1E;IAEa,WAAW,CAAC,EAAkB,EAAE,GAAW;;YACvD,EAAE,CAAC,OAAO,CACR,MAAM,qBAAqB,eAEpB;gBACD,GAAG,EAAE,WAAW,CAAC,MAAM;gBACvB,QAAQ,EAAE,iBAAiB,CAAC,MAAM;gBAClC,YAAY,EAAE,qBAAqB,CAAC,MAAM;aAC3C,GAEH,GAAG,EACH,MAAM,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAC9B,CACF,CAAC;YACF,OAAO,EAAE,CAAC;SACX;KAAA;;;AC9bH;;;;;MAKa,iBAAkB,SAAQ,SAAS;IAE9C,YACE,IAAY,EACK,MAA4B,EAC7B,MAAc,EAC9B,GAAgB,EAChB,OAAqC,EACrC,OAAgB;QAEhB,KAAK,CAAC,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;QANlB,WAAM,GAAN,MAAM,CAAsB;QAC7B,WAAM,GAAN,MAAM,CAAQ;KAM/B;IAED,IAAI,gBAAgB;QAClB,MAAM,YAAY,GAChB,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC;YAC1B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,CAAC,IAAI,KAAK,YAAY,CAA0C,CAAC;QAC9F,MAAM,MAAM,GAAG,YAAY,IAAI,YAAY,CAAC,QAAQ,IAAI,YAAY,CAAC,QAAQ,CAAC,gBAAgB,CAAC;QAC/F,OAAO,MAAM,GAAG,MAAM,GAAG,SAAS,CAAC;KACpC;IAED,IAAI,MAAM;QACR,MAAM,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC;QAC/C,IAAI,gBAAgB,EAAE;YACpB,OAAO,gBAAgB,CAAC,MAAM,CAAC;SAChC;aAAM;YACL,OAAO,SAAS,CAAC;SAClB;KACF;IAED,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,QAAQ,CAAC;KACtB;IAED,IAAI,mBAAmB;QACrB,OAAO,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,MAAM,CAAC;KACtC;IAED,IAAI,GAAG;QACL,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;KACxB;IAED,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC;KAC9B;IAED,IAAI,YAAY;QACd,OAAO,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC;KAClC;IAED,IAAI,WAAW;QACb,MAAM,WAAW,GAAG,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC;QAChF,OAAO,WAAW,GAAG,WAAW,GAAG,SAAS,CAAC;KAC9C;IAED,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC;KAC9D;;;AC3DH;;;;;MAKa,oBACX,SAAQ,SAAS;IAOjB,YACE,IAAY,EACK,MAA+B,EAChD,GAAgB,EAChB,OAAqC,EACrC,OAAgB,EACR,gBAAqC;QAE7C,KAAK,CAAC,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;QANlB,WAAM,GAAN,MAAM,CAAyB;QAIxC,qBAAgB,GAAhB,gBAAgB,CAAqB;QAI7C,MAAM,mBAAmB,GAAG,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,gBAAgB,CAAC,oBAAoB,CAAC;QAChG,IAAI,KAAK,CAAC,OAAO,CAAC,mBAAmB,CAAC,EAAE;YACtC,IAAI,CAAC,eAAe,GAAG,mBAAmB,CAAC,CAAC,CAAC,CAAC;SAC/C;KACF;IAED,IAAI,MAAM;QACR,MAAM,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC;QAC/C,IAAI,gBAAgB,EAAE;YACpB,OAAO,gBAAgB,CAAC,MAAM,CAAC;SAChC;aAAM;YACL,OAAO,SAAS,CAAC;SAClB;KACF;IAED,IAAI,gBAAgB;QAClB,MAAM,aAAa,GACjB,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC;YAC1B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,IAAI,KAAK,aAAa,CAEtC,CAAC;QAEjB,MAAM,MAAM,GACV,aAAa;YACb,qBAAqB,CAAC,aAAa,CAAC;YACpC,aAAa,CAAC,QAAQ,CAAC,gBAAgB,CAAC;QAC1C,OAAO,MAAM,GAAG,MAAM,GAAG,SAAS,CAAC;KACpC;IAED,IAAI,GAAG;QACL,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;KACxB;IAED,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC;KAC9B;IAED,IAAI,YAAY;QACd,OAAO,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC;KAClC;IAED,IAAI,WAAW;QACb,MAAM,WAAW,GAAG,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC;QAChF,OAAO,WAAW,GAAG,WAAW,GAAG,SAAS,CAAC;KAC9C;IAED,IAAI,WAAW;QACb,MAAM,WAAW,GAAG,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,gBAAgB,CAAC,sBAAsB,CAAC;QAC1F,OAAO,WAAW,GAAG,WAAW,GAAG,SAAS,CAAC;KAC9C;IAED,IAAI,WAAW;QACb,MAAM,WAAW,GAAG,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC;QAChF,OAAO,WAAW,GAAG,WAAW,GAAG,SAAS,CAAC;KAC9C;IAED,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC;KAC9D;;;;IAKK,QAAQ,CAAC,aAAsB,EAAE,QAAiB,EAAE,OAAgB;;YACxE,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;gBACzB,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;aACjE;YAED,MAAM,IAAI,CAAC,YAAY,CAAC,aAAa,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;YAC1D,OAAO,IAAI,CAAC,gBAAgB,CAAC,EAAE,CAAY,IAAI,CAAC,eAAe,CAAC,CAAC;SAClE;KAAA;;;AChGH;;;MAGa,+BAAgC,SAAQ,SAAS;IAO1D,YACI,IAAY,EACK,MAA0C,EAC3C,MAAc,EAC9B,GAAgB,EAChB,OAAqC,EACrC,OAAgB;QAEhB,KAAK,CAAC,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;QANlB,WAAM,GAAN,MAAM,CAAoC;QAC3C,WAAM,GAAN,MAAM,CAAQ;QAO9B,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC;KAC3F;IAED,IAAI,gBAAgB;QAChB,MAAM,wBAAwB,GAC1B,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC;YAC1B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,CAAC,IAAI,KAAK,0BAA0B,CAAsD,CAAC;QAC1H,MAAM,MAAM,GAAG,wBAAwB,IAAI,wBAAwB,CAAC,QAAQ,IAAI,wBAAwB,CAAC,QAAQ,CAAC,gBAAgB,CAAC;QACnI,OAAO,MAAM,GAAG,MAAM,GAAG,SAAS,CAAC;KACtC;IAED,IAAI,MAAM;QACN,MAAM,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC;QAC/C,IAAI,gBAAgB,EAAE;YAClB,OAAO,gBAAgB,CAAC,MAAM,CAAC;SAClC;aAAM;YACH,OAAO,SAAS,CAAC;SACpB;KACJ;IAED,IAAI,oBAAoB;QACpB,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;KAC5B;IAED,IAAI,GAAG;QACH,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;KAC1B;IAED,IAAI,QAAQ;QACR,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC;KAChC;IAED,IAAI,YAAY;QACZ,OAAO,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC;KACpC;IAED,IAAI,MAAM;QACN,OAAO,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC;KAChE;;;ACzDL;;;MAGa,eAAgB,SAAQ,SAAS;IAE5C,YACE,IAAY,EACK,MAA0B,EAC3B,MAAc,EAC9B,GAAgB,EAChB,OAAqC,EACrC,OAAgB;QAEhB,KAAK,CAAC,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;QANlB,WAAM,GAAN,MAAM,CAAoB;QAC3B,WAAM,GAAN,MAAM,CAAQ;KAM/B;IAED,IAAI,gBAAgB;QAClB,MAAM,QAAQ,GACZ,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC;YAC1B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,CAAC,IAAI,KAAK,QAAQ,CAAsC,CAAC;QACtF,OAAO,QAAQ,GAAG,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;KACnC;IAED,IAAI,MAAM;QACR,MAAM,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC;QAC/C,MAAM,QAAQ,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAC;QACrC,IAAI,QAAQ,EAAE;YACZ,OAAO,QAAQ,CAAC,QAAQ,CAAC,gBAAgB,CAAC,MAAM,CAAC;SAClD;aAAM;YACL,OAAO,SAAS,CAAC;SAClB;KACF;IAED,IAAI,GAAG;QACL,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;KACxB;IAED,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC;KAC9B;IAED,IAAI,YAAY;QACd,OAAO,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC;KAClC;IAED,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;KAC/B;IAEO,OAAO,CAAC,GAAU,EAAE,IAAY;QACtC,OAAO,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,OAAO;YAC9B,OAAO,IAAI,IAAI,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC;SAC9D,EAAE,CAAC,CAAC,CAAC;KACP;IAED,IAAI,WAAW;QACb,OAAO,MAAM,CACX,IAAI,CAAC,OAAO,CAAC,sBAAsB,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,gBAAgB,EAAE,CAAC,EAAE,cAAc,CAAC,CAC1F,CAAC;KACH;IAED,IAAI,WAAW;QACb,OAAO,MAAM,CACX,IAAI,CAAC,OAAO,CACV,sBAAsB,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,gBAAgB,EAAE,CAAC,EAC3D,wBAAwB,CACzB,CACF,CAAC;KACH;IAED,IAAI,WAAW;QACb,OAAO,MAAM,CACX,IAAI,CAAC,OAAO,CAAC,sBAAsB,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,gBAAgB,EAAE,CAAC,EAAE,cAAc,CAAC,CAC1F,CAAC;KACH;IAED,IAAI,MAAM;QACR,OAAO,aAAa,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC;KAC3D;;;AC7EH;;;;;MAKa,oBAAqB,SAAQ,SAAS;IAEjD,YACE,IAAY,EACK,MAA4B,EAC7B,MAAc,EAC9B,GAAgB,EAChB,OAAqC,EACrC,OAAgB;QAEhB,KAAK,CAAC,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;QANlB,WAAM,GAAN,MAAM,CAAsB;QAC7B,WAAM,GAAN,MAAM,CAAQ;KAM/B;IAED,IAAI,gBAAgB;QAClB,MAAM,aAAa,GACjB,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC;YAC1B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,CAAC,IAAI,KAAK,aAAa,CAA2C,CAAC;QAChG,OAAO,aAAa,GAAG,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC;KAC7C;IAED,IAAI,MAAM;QACR,MAAM,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC;QAC/C,MAAM,QAAQ,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAC;QACrC,IAAI,QAAQ,EAAE;YACZ,OAAO,QAAQ,CAAC,QAAQ,CAAC,gBAAgB,CAAC,MAAM,CAAC;SAClD;aAAM;YACL,OAAO,SAAS,CAAC;SAClB;KACF;IAED,IAAI,MAAM;QACR,OAAO,IAAI,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;KAC1C;IAED,IAAI,WAAW;QACb,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC;KAChC;IAED,IAAI,GAAG;QACL,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;KACxB;IAED,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC;KAC9B;IAED,IAAI,YAAY;QACd,OAAO,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC;KAClC;IAEO,OAAO,CAAC,GAAU,EAAE,IAAY;QACtC,OAAO,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,OAAO;YAC9B,OAAO,IAAI,IAAI,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC;SAC9D,EAAE,CAAC,CAAC,CAAC;KACP;IAED,IAAI,WAAW;QACb,OAAO,MAAM,CACX,IAAI,CAAC,OAAO,CAAC,sBAAsB,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,gBAAgB,EAAE,CAAC,EAAE,cAAc,CAAC,CAC1F,CAAC;KACH;IAED,IAAI,WAAW;QACb,OAAO,MAAM,CACX,IAAI,CAAC,OAAO,CACV,sBAAsB,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,gBAAgB,EAAE,CAAC,EAC3D,wBAAwB,CACzB,CACF,CAAC;KACH;IAED,IAAI,WAAW;QACb,OAAO,MAAM,CACX,IAAI,CAAC,OAAO,CAAC,sBAAsB,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,gBAAgB,EAAE,CAAC,EAAE,cAAc,CAAC,CAC1F,CAAC;KACH;IAED,IAAI,MAAM;QACR,OAAO,aAAa,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC;KAC3D;;;ACjGH,MAAM,WAAW,GAAG,CAAC,GAAW;IAC9B,OAAO;QACL,EAAE,IAAI,EAAE,MAAM,EAAE;QAChB,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,EAAE;QAC9C;YACE,IAAI,EAAE,MAAM;YACZ,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC;SAC9C;QACD,EAAE,IAAI,EAAE,MAAM,EAAE;QAChB,EAAE,IAAI,EAAE,cAAc,EAAE;QACxB,EAAE,IAAI,EAAE,MAAM,EAAE;KACjB,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,gBAAgB,GAAG,CAAC,GAAW,EAAE,KAAa;IAClD,OAAO;QACL,EAAE,IAAI,EAAE,MAAM,EAAE;QAChB,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,EAAE;QAC9C;YACE,IAAI,EAAE,MAAM;YACZ,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC;SAC9C;QACD,EAAE,IAAI,EAAE,kBAAkB,EAAE;QAC5B;YACE,IAAI,EAAE,MAAM;YACZ,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,KAAK,EAAE,EAAE,CAAC;SAC/C;QACD,EAAE,IAAI,EAAE,MAAM,EAAE;QAChB,EAAE,IAAI,EAAE,iBAAiB,EAAE;QAC3B,EAAE,IAAI,EAAE,MAAM,EAAE;KACjB,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,cAAc,GAAG;IACrB,OAAO;QACL,EAAE,IAAI,EAAE,MAAM,EAAE;QAChB,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,EAAE;QAC9C,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,EAAE;QAC9C,EAAE,IAAI,EAAE,cAAc,EAAE;QACxB,EAAE,IAAI,EAAE,MAAM,EAAE;KACjB,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,kBAAkB,GAAG,CAAC,GAAW,EAAE,MAAc;IACrD,OAAO;QACL,EAAE,IAAI,EAAE,MAAM,EAAE;QAChB,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,EAAE;QAC9C;YACE,IAAI,EAAE,MAAM;YACZ,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC;SAC7C;QACD,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,EAAE;QAC9C;YACE;gBACE,IAAI,EAAE,SAAS;gBACf,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;aACvD;SACF;QACD;YACE,IAAI,EAAE,MAAM;YACZ,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,MAAM,EAAE,EAAE,CAAC;SAChD;QACD,EAAE,IAAI,EAAE,MAAM,EAAE;QAChB,EAAE,IAAI,EAAE,iBAAiB,EAAE;QAC3B,EAAE,IAAI,EAAE,MAAM,EAAE;KACjB,CAAC;AACJ,CAAC,CAAC;MAEW,cAAc,GAAG;IAC5B,WAAW;IACX,cAAc;IACd,gBAAgB;IAChB,kBAAkB;;;ACxEpB,MAAM,IAAI,GAAG;IACX;QACE,IAAI,EAAE,WAAW;QACjB,IAAI,EAAE;YACJ;gBACE,IAAI,EAAE,QAAQ;gBACd,IAAI,EAAE;oBACJ,EAAE,IAAI,EAAE,MAAM,EAAE;oBAChB;wBACE,IAAI,EAAE,MAAM;wBACZ,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;qBAC1E;iBACF;aACF;SACF;KACF;IACD,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,EAAE;IAC7C,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC,EAAE;CAChF,CAAC;AAEF,MAAM,OAAO,GAAG,MAAM,CAAC;MAEV,WAAW,GAAG;IACzB,IAAI;IACJ,OAAO;;;SCnBO,OAAO,CAKnB,iBAAwF,EACxF,iBAA+F;IAE/F,OAAO,CAAC,mBAAmB,EAAE,OAAO,KAChC,iBAAiB,CAAC,iBAAiB,CAAC,mBAAmB,EAAE,OAAO,CAAC,EAAE,OAAO,CAAC,CAAC;AACpF;;ACFA;;;;MAIa,cAAc;IAGzB,YACU,QAAW,EACX,OAAe,EACf,eAAgC,EAChC,IAAY,EACZ,IAAW,EACX,uBAAuB,IAAI,EAC3B,cAAc,KAAK;QANnB,aAAQ,GAAR,QAAQ,CAAG;QACX,YAAO,GAAP,OAAO,CAAQ;QACf,oBAAe,GAAf,eAAe,CAAiB;QAChC,SAAI,GAAJ,IAAI,CAAQ;QACZ,SAAI,GAAJ,IAAI,CAAO;QACX,yBAAoB,GAApB,oBAAoB,CAAO;QAC3B,gBAAW,GAAX,WAAW,CAAQ;KACzB;IAEI,YAAY,CAAC,IAAW,EAAE,MAAuB,EAAE,IAAY;QACrE,MAAM,IAAI,GAAG,MAAM,CAAC,iBAAiB,EAAE,CAAC;QAExC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAQ,KAAK,CAAC,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM,CAAC,EAAE;YACtD,MAAM,IAAI,qBAAqB,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;SACnD;KACF;;;;IAKD,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,WAAW;cACnB,IAAI,CAAC,eAAe,CAAC,aAAa,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC;cAC/C,IAAI,CAAC,eAAe,CAAC,aAAa,EAAE,CAAC;KAC1C;;;;IAKD,YAAY;QACV,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,MAAM,GAAG,GAAG,IAAI,CAAC,eAAe,CAAC,iBAAiB,EAAE,CAAC,IAAI,CAAC,CAAC,CAAQ,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,CAAC;YAC5F,IAAI,GAAG,EAAE;gBACP,GAAG,CAAC,KAAK,EAAE,CAAC;gBACZ,OAAO,GAAG,CAAC;aACZ;SACF;aAAM;YACL,MAAM,GAAG,GAAG,IAAI,CAAC,eAAe,CAAC,iBAAiB,EAAE,CAAC;YACrD,OAAO,GAAG,CAAC,MAAM,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;SACvC;KACF;;;;;;;IAQD,IAAI,CACF,SAA8B,EAAE;QAEhC,IAAI,IAAI,CAAC,QAAQ,YAAY,MAAM,EAAE;YACnC,OAAQ,IAAI,CAAC,QAA8B;iBACxC,QAAQ,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;iBACvC,IAAI,EAAS,CAAC;SAClB;aAAM;YACL,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAQ,CAAC;SACrE;KACF;;;;;;;IAQD,gBAAgB,CAAC,EACf,GAAG,EACH,QAAQ,EACR,YAAY,EACZ,MAAM,EACN,MAAM,GAAG,CAAC,EACV,KAAK,GAAG,KAAK,MACU,EAAE;QACzB,MAAM,kBAAkB,GAA2B;YACjD,EAAE,EAAE,IAAI,CAAC,OAAO;YAChB,MAAM;YACN,GAAG;YACH,KAAK;YACL,MAAM;YACN,QAAQ;YACR,YAAY;YACZ,SAAS,EAAE;gBACT,UAAU,EAAE,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,IAAI,GAAG,kCAAkC;gBACtF,KAAK,EAAE,IAAI,CAAC,WAAW;sBACnB,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC;sBACpD,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;aAC9C;SACF,CAAC;QACF,OAAO,kBAAkB,CAAC;KAC3B;;;MChFU,oBAAoB;IAG/B,YAAoB,cAA8B,EAAU,OAAgB;QAAxD,mBAAc,GAAd,cAAc,CAAgB;QAAU,YAAO,GAAP,OAAO,CAAS;QAFpE,eAAU,GAA2B,EAAE,CAAC;KAEgC;;;;;;;IAQhF,YAAY,CAAC,MAA4B;QACvC,IAAI,eAAe,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,gBAAgB,CAAC,KAAK,EAAE;YACzD,MAAM,IAAI,mBAAmB,CAAC,yBAAyB,MAAM,CAAC,EAAE,EAAE,CAAC,CAAA;SACpE;QACD,IAAI,CAAC,UAAU,CAAC,IAAI,iBAAG,IAAI,EAAE,MAAM,CAAC,WAAW,IAAK,MAAM,EAAG,CAAC;QAC9D,OAAO,IAAI,CAAC;KACb;;;;;;;IAQD,gBAAgB,CAAC,MAA6D;QAC5E,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC;KACrD;;;;;;;IAQD,cAAc,CAAC,MAA4B;QACzC,IAAI,MAAM,CAAC,QAAQ,IAAI,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,gBAAgB,CAAC,KAAK,EAAE;YAClF,MAAM,IAAI,mBAAmB,CAAC,6BAA6B,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;SAC/E;QACD,IAAI,CAAC,UAAU,CAAC,IAAI,iBAAG,IAAI,EAAE,MAAM,CAAC,UAAU,IAAK,MAAM,EAAG,CAAC;QAC7D,OAAO,IAAI,CAAC;KACb;;;;;;;IAQD,eAAe,CAAwD,MAA2D;QAChI,IAAI,CAAC,UAAU,CAAC,IAAI,iBAAG,IAAI,EAAE,MAAM,CAAC,WAAW,IAAK,MAAM,EAAG,CAAC;QAC9D,OAAO,IAAI,CAAC;KACb;IAEa,YAAY,CAAC,KAA2B;;YACpD,QAAQ,KAAK,CAAC,IAAI;gBAChB,KAAK,MAAM,CAAC,WAAW;oBACrB,OAAO,IAAI,CAAC,cAAc,CAAC,+BAA+B,CAAC,qDAAY,OAAA,KAAK,CAAA,GAAA,CAAC,CAAC;gBAChF,KAAK,MAAM,CAAC,WAAW;oBACrB,OAAO,IAAI,CAAC,cAAc,CAAC,gCAAgC,CAAC;wBAC1D,OAAA,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,sBAAsB,mBACrC,KAAK,EACR,CAAA;sBAAA,CACH,CAAC;gBACJ,KAAK,MAAM,CAAC,UAAU;oBACpB,OAAO,IAAI,CAAC,cAAc,CAAC,+BAA+B,CAAC,qDAAY,OAAA,KAAK,CAAA,GAAA,CAAC,CAAC;gBAChF;oBACE,MAAM,IAAI,KAAK,CAAC,+BAAgC,KAAa,CAAC,IAAI,EAAE,CAAC,CAAC;aACzE;SACF;KAAA;;;;;;;IAQD,IAAI,CAAC,MAA8B;QACjC,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;YAC1B,QAAQ,KAAK,CAAC,IAAI;gBAChB,KAAK,MAAM,CAAC,WAAW;oBACrB,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;oBACzB,MAAM;gBACR,KAAK,MAAM,CAAC,WAAW;oBACrB,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;oBAC5B,MAAM;gBACR,KAAK,MAAM,CAAC,UAAU;oBACpB,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;oBAC3B,MAAM;gBACR;oBACE,MAAM,IAAI,KAAK,CAAC,+BAAgC,KAAa,CAAC,IAAI,EAAE,CAAC,CAAC;aACzE;SACF;QAED,OAAO,IAAI,CAAC;KACb;;;;;;IAOK,IAAI;;YACR,MAAM,GAAG,GAA2B,EAAE,CAAC;YAEvC,KAAK,MAAM,EAAE,IAAI,IAAI,CAAC,UAAU,EAAE;gBAChC,GAAG,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC;aACvC;YAED,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;YAE7D,OAAO,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;SACnE;KAAA;CACF;MAEY,MAAM;IACjB,YAAoB,OAAgB;QAAhB,YAAO,GAAP,OAAO,CAAS;QAsB5B,kBAAa,GAAG,CAAI,IAAsB;YAChD,OAAO;gBACL,IAAI;aACL,CAAC;SACH,CAAC;KA1BsC;IAExC,IAAY,cAAc;QACxB,OAAO,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC;KACpC;;;;;;;IAUK,GAAG,CAAC,EAAE,YAAY,KAAgB,EAAE;;YACxC,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,YAAY,EAAE;gBAC9B,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC;aAChD;YAED,OAAO,IAAI,CAAC,IAAI,CAAC;SAClB;KAAA;;;;;;;;;IAgBD,SAAS,CACP,MAA2D;QAE3D,OAAO,IAAI,CAAC,aAAa,CAAC;YACxB,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,gCAAgC,CAAC,MAC9E,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,sBAAsB,mBACrC,MAA+B,EAClC,CACH,CAAC;YACF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;YACxE,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE;gBACvB,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,QAAqB,CAAC;aAChF;YACD,OAAO,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,0BAA0B,CAAC,MAAM,CAAiD,CAAC;SACzH,CAAA,CAAC,CAAC;KACJ;;;;;;;;;IAUD,WAAW,CAAC,MAA4B;QACtC,IAAI,MAAM,CAAC,QAAQ,IAAI,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,gBAAgB,CAAC,KAAK,EAAE;YAClF,MAAM,IAAI,mBAAmB,CAAC,0BAA0B,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;SAC5E;QACD,OAAO,IAAI,CAAC,aAAa,CAAC;YACxB,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,+BAA+B,CAC5E,qDAAY,OAAA,MAAM,CAAA,GAAA,CACnB,CAAC;YACF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;YACxE,OAAO,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,yBAAyB,CAAC,MAAM,CAAC,CAAC;SACxE,CAAA,CAAC,CAAC;KACJ;;;;;;;;IASD,gBAAgB;QACd,OAAO,IAAI,CAAC,aAAa,CAAC;YACxB,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,+BAA+B,CAAC;gBAC7E,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,GAAG,EAAE,CAAC;gBAClC,OAAO,EAAE,QAAQ,EAAE,CAAC;aACrB,CAAA,CAAC,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;YACxE,OAAO,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,yBAAyB,CAAC,MAAM,CAAC,CAAC;SACxE,CAAA,CAAC,CAAC;KACJ;;;;;;;;;IAUD,QAAQ,CAAC,MAA4B;QACnC,IAAI,eAAe,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,gBAAgB,CAAC,KAAK,EAAE;YACzD,MAAM,IAAI,mBAAmB,CAAC,yBAAyB,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC;SACrE;QACD,OAAO,IAAI,CAAC,aAAa,CAAC;YACxB,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,+BAA+B,CAC5E,qDAAY,OAAA,MAAM,CAAA,GAAA,CACnB,CAAC;YACF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;YACxE,OAAO,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,0BAA0B,CAAC,MAAM,CAAC,CAAC;SACzE,CAAA,CAAC,CAAC;KACJ;;;;;;;;;IAUD,KAAK,CAAC,MAAoD;QACxD,MAAM,KAAK,GAAG,IAAI,oBAAoB,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAE1E,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YACzB,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACpB;QAED,OAAO,KAAK,CAAC;KACd;;;;;;;;IASK,EAAE,CACN,OAAe,EACf,8BAAyF,CAAC,CAAC,KACzF,CAAQ;;YAEV,IAAI,uBAAuB,CAAC,OAAO,CAAC,KAAK,gBAAgB,CAAC,KAAK,EAAE;gBAC/D,MAAM,IAAI,2BAA2B,CAAC,6BAA6B,OAAO,EAAE,CAAC,CAAC;aAC/E;YACD,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC,GAAG,CAAC;YAC9C,MAAM,MAAM,GAAG,MAAM,GAAG,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;YACtD,MAAM,WAAW,GAAG,MAAM,GAAG,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;YACtD,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,CAAC;YAC5D,MAAM,OAAO,GAAG,WAAW,CAAC,QAAQ,CAAC;YACrC,MAAM,GAAG,GAAG,IAAI,mBAAmB,CACjC,OAAO,EACP,MAAM,EACN,IAAI,EACJ,IAAI,CAAC,OAAO,CAAC,QAAQ,EACrB,WAAW,EACX,OAAO,EACP,GAAG,CACJ,CAAC;YACF,OAAO,2BAA2B,CAAC,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;SACvD;KAAA;;;MC1SU,oBAAoB;IAC/B,YAAoB,OAAgB;QAAhB,YAAO,GAAP,OAAO,CAAS;KAAI;IAElC,MAAM;;YACV,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC;SAC5C;KAAA;IAEK,+BAA+B,CAAC,MAA2C;;YAC/E,OAAO,UAAU,CAAC,MAAM,MAAM,EAAE,EAAE,MAAM,CAAC,WAAW,CAAC,CAAC;SACvD;KAAA;IAEK,gCAAgC,CAAC,MAA4C;;YACjF,OAAO,UAAU,CAAC,MAAM,MAAM,EAAE,EAAE,MAAM,CAAC,WAAW,CAAC,CAAC;SACvD;KAAA;IAEK,+BAA+B,CAAC,MAA2C;;YAC/E,OAAO,UAAU,CAAC,MAAM,MAAM,EAAE,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC;SACtD;KAAA;IAEK,cAAc,CAAC,MAA8B;;YACjD,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,MAAa,CAAC,CAAC,IAAI,EAAE,CAAC;YAChE,OAAO,EAAE,CAAC,IAAI,CAAC;SAChB;KAAA;;;ACxBH;;;;MAIa,oBAAoB;IAC7B,YACY,QAAW,EACX,OAAe,EACf,eAAgC,EAChC,IAAY,EACZ,OAAY,MAAM,EAClB,uBAAuB,IAAI,EAC3B,cAAc,KAAK;QANnB,aAAQ,GAAR,QAAQ,CAAG;QACX,YAAO,GAAP,OAAO,CAAQ;QACf,oBAAe,GAAf,eAAe,CAAiB;QAChC,SAAI,GAAJ,IAAI,CAAQ;QACZ,SAAI,GAAJ,IAAI,CAAc;QAClB,yBAAoB,GAApB,oBAAoB,CAAO;QAC3B,gBAAW,GAAX,WAAW,CAAQ;KAC1B;;;;IAKL,YAAY;QACR,OAAO,IAAI,CAAC,WAAW;cACjB,IAAI,CAAC,eAAe,CAAC,aAAa,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC;cAC/C,IAAI,CAAC,eAAe,CAAC,aAAa,EAAE,CAAC;KAC9C;;;;;;;IAQD,IAAI,CACA,SAA8B,EAAE;QAEhC,IAAI,IAAI,CAAC,QAAQ,YAAY,MAAM,EAAE;YACjC,OAAQ,IAAI,CAAC,QAA8B,CAAC,QAAQ,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,EAAS,CAAC;SACrG;aAAM;YACH,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAQ,CAAC;SACvE;KACJ;;;;;;;IAQD,gBAAgB,CAAC,EACb,GAAG,EACH,QAAQ,EACR,YAAY,EACZ,MAAM,EACN,MAAM,GAAG,CAAC,EACV,KAAK,GAAG,KAAK,MACQ,EAAE;QACvB,MAAM,kBAAkB,GAA2B;YAC/C,EAAE,EAAE,IAAI,CAAC,OAAO;YAChB,MAAM;YACN,GAAG;YACH,KAAK;YACL,MAAM;YACN,QAAQ;YACR,YAAY;YACZ,SAAS,EAAE;gBACP,UAAU,EAAE,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,IAAI,GAAG,kCAAkC;gBACtF,KAAK,EAAE,IAAI,CAAC,WAAW;sBACjB,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;sBAC7D,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC;aACrD;SACJ,CAAC;QACF,OAAO,kBAAkB,CAAC;KAC7B;;;AC/DL,MAAM,aAAa,GAAG,CACpB,YAA2C,EAC3C,cAA6C,EAC7C,mBAA0C,EAC1C,gBAAiD,EACjD,QAA+B,EAC/B,oBAA2C,EAC3C,OAAe,EACf,QAAgB,EAChB,MAAe,EACf,MAAM,GAAG,GAAG;IAEZ,OAAO;QACL,MAAM,EAAE;YACN,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,YAAY,EAAE,mBAAmB,CAAC,EAAE,CAAC,EAAE;YAC1F,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,cAAc,CAAC,EAAE,CAAC,EAAE;YACvE;gBACE,IAAI,EAAE,MAAM;gBACZ,IAAI,EAAE;oBACJ;wBACE,EAAE,IAAI,EAAE,KAAK,EAAE;wBACf,gBAAgB;wBAChB,EAAE,IAAI,EAAE,MAAM,EAAE;wBAChB,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,EAAE;wBAC9C,EAAE,IAAI,EAAE,MAAM,EAAE;qBACjB;iBACF;aACF;SACF;QACD,OAAO,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;QACzB,KAAK,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,QAAQ,EAAE,oBAAoB,CAAC,EAAE;QAC/D,MAAM;QACN,OAAO;QACP,QAAQ;QACR,MAAM;KACP,CAAC;AACJ,CAAC,CAAC;MAOW,WAAW;IACtB,YACU,IAAwB,EACxB,gBAAwB,EACxB,wBAAoC,EACpC,oBAA2C,EAC3C,qBAA4C,EAC5C,QAAa,MAAM;QALnB,SAAI,GAAJ,IAAI,CAAoB;QACxB,qBAAgB,GAAhB,gBAAgB,CAAQ;QACxB,6BAAwB,GAAxB,wBAAwB,CAAY;QACpC,yBAAoB,GAApB,oBAAoB,CAAuB;QAC3C,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,UAAK,GAAL,KAAK,CAAc;KACzB;;;;IAKJ,YAAY;QACV,OAAO;YACL,SAAS,EAAE,IAAI,CAAC,wBAAwB,CAAC,iBAAiB,EAAE;YAC5D,MAAM,EAAE,IAAI,CAAC,wBAAwB,CAAC,mBAAmB,EAAE;SAC5D,CAAC;KACH;;;;;;IAOK,WAAW,CAAC,gBAAwC;;YACxD,IAAI,CAAC,sBAAsB,CAAC,gBAAgB,CAAC,CAAC;YAC9C,MAAM,OAAO,GAAG,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,gBAAgB,CAAC,EAAE,QAAQ,EAAE,CAAC;YAC/E,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;YAC7C,OAAO,IAAI,CAAC,0BAA0B,CACpC,aAAa,CACX,IAAI,CAAC,wBAAwB,CAAC,YAAY,EAC1C,IAAI,CAAC,wBAAwB,CAAC,cAAc,EAC5C,IAAI,CAAC,oBAAoB,EACzB,IAAI,CAAC,sBAAsB,CACzB,IAAI,CAAC,wBAAwB,CAAC,YAAY,EAC1C,gBAAgB,CAAC,UAAU,EAC3B,OAAO,CACR,EACD,IAAI,CAAC,wBAAwB,EAAE,EAC/B,IAAI,CAAC,qBAAqB,EAC1B,OAAO,EACP,OAAO,EACP,gBAAgB,CAAC,MAAM,CACxB,CACF,CAAC;SACH;KAAA;IAEO,sBAAsB,CAAC,gBAAwC;QACrE,IACE,gBAAgB,CAAC,MAAM;YACvB,eAAe,CAAC,gBAAgB,CAAC,MAAM,CAAC,KAAK,gBAAgB,CAAC,KAAK,EACnE;YACA,MAAM,IAAI,4BAA4B,CACpC,qEAAqE,gBAAgB,CAAC,MAAM,GAAG,CAChG,CAAC;SACH;QACD,IACE,CAAC,gBAAgB,CAAC,UAAU;YAC5B,eAAe,CAAC,gBAAgB,CAAC,UAAU,CAAC,KAAK,gBAAgB,CAAC,KAAK,EACvE;YACA,MAAM,IAAI,4BAA4B,CACpC,wDAAwD,gBAAgB,CAAC,UAAU,GAAG,CACvF,CAAC;SACH;KACF;IAEO,wBAAwB;QAC9B,IAAI;YACF,OAAO,IAAI,CAAC,wBAAwB,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACjE;QAAC,OAAO,KAAK,EAAE;YACd,MAAM,IAAI,yBAAyB,CACjC,IAAI,CAAC,wBAAwB,CAAC,QAAQ,EACtC,IAAI,CAAC,YAAY,EAAE,EACnB,IAAI,CAAC,KAAK,EACV,KAAK,CACN,CAAC;SACH;KACF;;;;;;;;;;;IAWO,sBAAsB,CAC5B,YAA6C,EAC7C,UAAkB,EAClB,eAAuB;QAEvB,MAAM,qBAAqB,GAAG;YAC5B,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,EAAE,EAAE,GAAG,EAAE,eAAe,EAAE,CAAC,EAAE,CAAC;YAChF,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,EAAE,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC,EAAE,CAAC;YAC/E,YAAY,EAAE;gBACZ,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,gBAAgB,EAAE,CAAC,EAAE;aACjF;YACD,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC;SACpE,CAAC;QAEF,YAAY,CAAC,OAAO,CAAC,CAAC,IAAS,EAAE,CAAS;YACxC,IAAI,IAAI,CAAC,IAAI,IAAI,qBAAqB,EAAE;gBACtC,YAAY,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,qBAAqB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAC5D;YACD,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;gBACvC,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,EAAE,eAAe,CAAC,CAAC;aACrE;iBAAM,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;gBAC9B,IAAI,CAAC,sBAAsB,CAAC,IAAI,EAAE,UAAU,EAAE,eAAe,CAAC,CAAC;aAChE;SACF,CAAC,CAAC;QACH,OAAO,YAAY,CAAC;KACrB;IAEa,0BAA0B,CAAC,UAA2B;;YAClE,IAAI,OAAsC,CAAC;YAC3C,IAAI;gBACF,OAAO,GAAG,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,OAAwC,CAAC;aAC1F;YAAC,OAAO,KAAU,EAAE;gBACnB,MAAM,QAAQ,GAAG,0BAA0B,CAAC,KAAK,CAAC,CAAC;gBACnD,MAAM,QAAQ;sBACV,IAAI,mBAAmB,CACrB,6CACE,IAAI,CAAC,wBAAwB,CAAC,QAChC,iBAAiB,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,EAC3C,IAAI,CAAC,wBAAwB,CAAC,QAAQ,EACtC,QAAQ,EACR,KAAK,CACN;sBACD,KAAK,CAAC;aACX;YACD,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE;gBACjB,MAAM,IAAI,mBAAmB,CAC3B,kDAAkD,OAAO,EAAE,EAC3D,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CACvC,CAAC;aACH;YACD,OAAO,IAAI,CAAC,wBAAwB,CAAC,gBAAgB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;SACxE;KAAA;;;MC9LU,qBAAqB;IAChC,YAAoB,QAAW,EAAU,eAAuB;QAA5C,aAAQ,GAAR,QAAQ,CAAG;QAAU,oBAAe,GAAf,eAAe,CAAQ;KAAI;IAEpE,8BAA8B,CAC5B,yBAA0C,EAC1C,uBAA+B,EAC/B,IAAW,EACX,oBAAoB,GAAG,IAAI,EAC3B,WAAW,GAAG,KAAK;QAEnB,OAAO,IAAI,cAAc,CACvB,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,eAAe,EACpB,yBAAyB,EACzB,uBAAuB,EACvB,IAAI,EACJ,oBAAoB,EACpB,WAAW,CACZ,CAAC;KACH;IAED,+BAA+B,CAC7B,yBAA0C,EAC1C,uBAA+B,EAC/B,IAAW,EACX,oBAAoB,GAAG,IAAI,EAC3B,WAAW,GAAG,KAAK;QAEnB,OAAO,IAAI,oBAAoB,CAC7B,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,eAAe,EACpB,yBAAyB,EACzB,uBAAuB,EACvB,IAAI,EACJ,oBAAoB,EACpB,WAAW,CACZ,CAAC;KACH;IAED,6BAA6B,CAC3B,GAAuB,EACvB,uBAAmC,EACnC,mBAA0C,EAC1C,oBAA2C,EAC3C,QAAa;QAEb,OAAO,IAAI,WAAW,CACpB,GAAG,EACH,IAAI,CAAC,eAAe,EACpB,uBAAuB,EACvB,mBAAmB,EACnB,oBAAoB,EACpB,QAAQ,CACT,CAAC;KACH;;;MCxDkB,UAAU;IAG7B,YACU,cAAyC,EACzC,YAA4D,EACpD,aAAqB,SAAS,EACtC,oBAA2C,EAAE,IAAI,EAAE,MAAM,EAAE;QAH3D,mBAAc,GAAd,cAAc,CAA2B;QACzC,iBAAY,GAAZ,YAAY,CAAgD;QACpD,eAAU,GAAV,UAAU,CAAoB;QACtC,sBAAiB,GAAjB,iBAAiB,CAA0C;QAEnE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;KAC3C;IAEK,OAAO;;YACX,IAAI;gBACF,MAAM,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,IAAI,EAAE,CAAC;aACnE;YAAC,OAAO,EAAE,EAAE;gBACX,IAAI,EAAE,YAAY,mBAAmB,EAAE;oBACrC,MAAM,SAAS,GAAQ,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;oBAEvD,MAAM,UAAU,GAAG,SAAS,CAAC,IAAI,CAAC;oBAClC,OAAO,UAAU,CAAC;iBACnB;qBAAM;oBACL,MAAM,EAAE,CAAC;iBACV;aACF;SACF;KAAA;IAEO,gBAAgB;QACtB,MAAM,CAAC,SAAS,EAAE,QAAQ,CAAC,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;QAE7C,IAAI,YAAY,GAA4B;YAC1C;gBACE,IAAI,EAAE,MAAM;gBACZ,IAAI,EAAE,CAAC,SAAS,EAAE,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC;aAC1D;SACF,CAAC;QAEF,IAAI,IAAI,CAAC,UAAU,KAAK,SAAS,EAAE;YACjC,YAAY,GAAI,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,CAA6B,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;SAC3F;QAED,OAAO;YACL,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE;YACzD,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,EAAE;YAC9C;gBACE,IAAI,EAAE,iBAAiB;gBACvB,IAAI,EAAE;oBACJ;wBACE,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,QAAQ,CAAC,EAAE;wBACvC,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,EAAE;wBAC7C;4BACE,IAAI,EAAE,MAAM;4BACZ,IAAI,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,CAAC;yBAChD;qBACF;iBACF;aACF;YACD;gBACE,IAAI,EAAE,KAAK;gBACX,IAAI,EAAE;oBACJ;wBACE;4BACE,IAAI,EAAE,KAAK;4BACX,IAAI,EAAE;gCACJ;oCACE;wCACE,IAAI,EAAE,QAAQ;wCACd,IAAI,EAAE;4CACJ;gDACE,IAAI,EAAE,MAAM;gDACZ,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;6CAC9C;4CACD;gDACE,IAAI,EAAE,MAAM;gDACZ,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;6CAC1E;4CACD;gDACE,EAAE,IAAI,EAAE,KAAK,EAAE;gDACf,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,QAAQ,CAAC,EAAE;gDACtC;oDACE,IAAI,EAAE,SAAS;oDACf,IAAI,EAAE;wDACJ;4DACE;gEACE,IAAI,EAAE,MAAM;gEACZ,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE,EAAE,MAAM,EAAE,yBAAyB,EAAE,CAAC;6DAClE;4DACD,EAAE,IAAI,EAAE,UAAU,EAAE;yDACrB;wDACD,EAAE;qDACH;iDACF;gDACD;oDACE,IAAI,EAAE,MAAM;oDACZ,IAAI,EAAE,CAAC,SAAS,EAAE,IAAI,CAAC,iBAAiB,CAAC;iDAC1C;gDACD,EAAE,IAAI,EAAE,MAAM,EAAE;gDAChB;oDACE,IAAI,EAAE,KAAK;oDACX,IAAI,EAAE;wDACJ;4DACE;gEACE,IAAI,EAAE,MAAM;gEACZ,IAAI,EAAE;oEACJ,EAAE,IAAI,EAAE,SAAS,EAAE;oEACnB,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,IAAI,IAAI,CAAC,UAAU,EAAE,EAAE;iEAC9D;6DACF;4DACD,EAAE,IAAI,EAAE,KAAK,EAAE;4DACf,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,YAAY,EAAE;4DACxC;gEACE,IAAI,EAAE,SAAS;gEACf,IAAI,EAAE;oEACJ;wEACE;4EACE,IAAI,EAAE,MAAM;4EACZ,IAAI,EAAE;gFACJ,EAAE,IAAI,EAAE,QAAQ,EAAE;gFAClB,EAAE,MAAM,EAAE,yBAAyB,EAAE;6EACtC;yEACF;wEACD,EAAE,IAAI,EAAE,UAAU,EAAE;qEACrB;oEACD,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC;iEAC9C;6DACF;4DACD;gEACE,IAAI,EAAE,MAAM;gEACZ,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;6DACxC;yDACF;qDACF;iDACF;gDACD,EAAE,IAAI,EAAE,iBAAiB,EAAE;gDAC3B;oDACE,IAAI,EAAE,KAAK;oDACX,IAAI,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,EAAE,CAAC,CAAC;iDACzD;gDACD,EAAE,IAAI,EAAE,MAAM,EAAE;gDAChB,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC,EAAE;gDAC3C,EAAE,IAAI,EAAE,MAAM,EAAE;6CACjB;yCACF;qCACF;iCACF;6BACF;yBACF;wBACD,EAAE,IAAI,EAAE,OAAO,EAAE;wBACjB;4BACE,IAAI,EAAE,KAAK;4BACX,IAAI,EAAE;gCACJ;oCACE;wCACE,IAAI,EAAE,MAAM;wCACZ,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC;qCACrE;oCACD,EAAE,IAAI,EAAE,KAAK,EAAE;oCACf;wCACE,IAAI,EAAE,UAAU;wCAChB,IAAI,EAAE;4CACJ;gDACE,IAAI,EAAE,QAAQ;gDACd,IAAI,EAAE;oDACJ,EAAE,IAAI,EAAE,MAAM,EAAE;oDAChB;wDACE,IAAI,EAAE,MAAM;wDACZ,IAAI,EAAE;4DACJ,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,EAAE;4DAC/C,EAAE,IAAI,EAAE,MAAM,EAAE;yDACjB;qDACF;iDACF;6CACF;yCACF;qCACF;oCACD;wCACE,IAAI,EAAE,SAAS;wCACf,IAAI,EAAE;4CACJ;gDACE;oDACE,IAAI,EAAE,MAAM;oDACZ,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE,EAAE,MAAM,EAAE,0BAA0B,EAAE,CAAC;iDACnE;gDACD,EAAE,IAAI,EAAE,UAAU,EAAE;6CACrB;4CACD,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC;yCAC9C;qCACF;oCACD,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE;iCAC1D;6BACF;yBACF;wBACD,EAAE,IAAI,EAAE,iBAAiB,EAAE;wBAC3B;4BACE,IAAI,EAAE,KAAK;4BACX,IAAI,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,EAAE,CAAC,CAAC;yBACzD;wBACD,EAAE,IAAI,EAAE,MAAM,EAAE;qBACjB;iBACF;aACF;YACD,EAAE,IAAI,EAAE,MAAM,EAAE;YAChB,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC,EAAE;YAC3C,EAAE,IAAI,EAAE,MAAM,EAAE;SACjB,CAAC;KACH;IAEO,OAAO;QACb,MAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,WAAW,CAAC;QAC9D,MAAM,UAAU,GAAG,WAAW,CAAC,IAAI,CAAC,UAAU,CAA0B,CAAC;QAEzE,IAAI,CAAC,UAAU,EAAE;YACf,MAAM,KAAK,CACT,eAAe,IAAI,CAAC,YAAY,CAAC,OAAO,8BAA8B,IAAI,CAAC,UAAU,EAAE,CACxF,CAAC;SACH;QAED,IAAI,EAAE,MAAM,IAAI,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE;;YAE/C,MAAM,KAAK,CAAC,2BAA2B,CAAC,CAAC;SAC1C;QAED,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAmD,CAAC;QAC3F,MAAM,CAAC,SAAS,EAAE,gBAAgB,CAAC,GAAG,IAAI,CAAC;QAC3C,IAAI,QAAQ,IAAI,SAAS,EAAE;YACzB,OAAO,SAAS,CAAC,QAAQ,CAAC,CAAC;SAC5B;QAED,IAAI,EAAE,MAAM,IAAI,gBAAgB,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE;;YAE3D,MAAM,KAAK,CAAC,kCAAkC,CAAC,CAAC;SACjD;QAED,IAAI,OAAO,CAAC;QACZ,IAAI,UAAU,CAAC,IAAI,KAAK,MAAM,EAAE;YAC9B,OAAO,GAAG,oDAAoD,UAAU,CAAC,IAAI,OAAO,CAAC;SACtF;aAAM,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;YAC5B,OAAO,GAAG,6CAA6C,IAAI,EAAE,CAAC;SAC/D;aAAM,IAAI,gBAAgB,CAAC,IAAI,KAAK,UAAU,EAAE;YAC/C,OAAO,GAAG,kDAAkD,gBAAgB,CAAC,IAAI,EAAE,CAAC;SACrF;aAAM,IAAI,gBAAgB,CAAC,IAAI,IAAI,gBAAgB,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;YACtE,OAAO,GAAG,wDAAwD,gBAAgB,CAAC,IAAI,EAAE,CAAC;SAC3F;QAED,IAAI,OAAO;YAAE,MAAM,KAAK,CAAC,OAAO,CAAC,CAAC;QAElC,OAAO,CAAC,SAAS,EAAE,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAmD,CAAC;KAChG;;;MC5OU,kCAAkC,GAAG,UAAU;AAE5D;;;MAGa,YAAY;IACvB,YACU,eAA+D,EAC/D,QAA0B,EAC1B,IAAY,EACZ,OAAe,EACf,wBAAyC,EACzC,eAAgC,EAChC,IAAW;QANX,oBAAe,GAAf,eAAe,CAAgD;QAC/D,aAAQ,GAAR,QAAQ,CAAkB;QAC1B,SAAI,GAAJ,IAAI,CAAQ;QACZ,YAAO,GAAP,OAAO,CAAQ;QACf,6BAAwB,GAAxB,wBAAwB,CAAiB;QACzC,oBAAe,GAAf,eAAe,CAAiB;QAChC,SAAI,GAAJ,IAAI,CAAO;KACjB;;;;;;;;;;IAWE,IAAI,CAAC,mBAA4B;;YACrC,IAAI,aAAa,CAAC;;YAGlB,IAAI,mBAAmB,EAAE;gBACvB,aAAa,GAAG,mBAAmB,CAAC;aACrC;iBAAM,IAAI,IAAI,CAAC,OAAO,KAAK,QAAQ,CAAC,UAAU,EAAE;gBAC/C,aAAa,GAAG,sBAAsB,CAAC,UAAU,CAAC;aACnD;iBAAM,IAAI,IAAI,CAAC,OAAO,KAAK,QAAQ,CAAC,WAAW,EAAE;gBAChD,aAAa,GAAG,sBAAsB,CAAC,WAAW,CAAC;aACpD;iBAAM,IAAI,IAAI,CAAC,OAAO,KAAK,QAAQ,CAAC,SAAS,EAAE;gBAC9C,aAAa,GAAG,sBAAsB,CAAC,SAAS,CAAC;aAClD;iBAAM,IAAI,IAAI,CAAC,OAAO,KAAK,QAAQ,CAAC,UAAU,EAAE;gBAC/C,aAAa,GAAG,sBAAsB,CAAC,UAAU,CAAC;aACnD;iBAAM,IAAI,IAAI,CAAC,OAAO,KAAK,QAAQ,CAAC,OAAO,EAAE;gBAC5C,aAAa,GAAG,sBAAsB,CAAC,OAAO,CAAC;aAChD;iBAAM;gBACL,MAAM,IAAI,4BAA4B,EAAE,CAAC;aAC1C;YAED,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC;YAC7D,MAAM,GAAG,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC;YACtD,MAAM,UAAU,GAAG,IAAI,UAAU,CAAC,cAAc,EAAE,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;YACxF,MAAM,UAAU,GAAG,MAAM,UAAU,CAAC,OAAO,EAAE,CAAC;YAC9C,MAAM,QAAQ,GAAG,IAAI,CAAC,wBAAwB,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YACnE,OAAO,QAAQ,CAAC;SACjB;KAAA;CACF;AAED,MAAM,YAAY,GAAG,CAAC,IAAW,EAAE,MAAuB,EAAE,IAAY;IACtE,MAAM,IAAI,GAAG,MAAM,CAAC,iBAAiB,EAAE,CAAC;IAExC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAQ,KAAK,CAAC,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM,CAAC,EAAE;QACtD,MAAM,IAAI,qBAAqB,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;KACnD;AACH,CAAC,CAAC;AAEF;AACA,MAAM,MAAM,GAAG,CAAC,UAAiC;IAC/C,IAAI,MAAM,GAAG,KAAK,CAAC;IACnB,IAAI,MAAM,IAAI,UAAU,IAAI,UAAU,CAAC,IAAI,KAAK,MAAM,IAAI,UAAU,CAAC,IAAI,EAAE;QACzE,MAAM,WAAW,GAAG,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAChE,IAAI,MAAM,IAAI,WAAW,IAAI,WAAW,CAAC,IAAI,KAAK,UAAU,EAAE;YAC5D,MAAM,GAAG,IAAI,CAAC;SACf;KACF;IACD,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC;AAKF,MAAM,kBAAkB,GAAG,CAAC,eAAoB,KAC9C,eAAe,CAAC,0BAA0B,KAAK,SAAS,CAAC;AAc3D;;;MAGa,mBAAmB;IAsC9B,YACkB,OAAe,EACf,MAAsB,EACtC,QAAW,EACH,eAAgC,EACxB,WAAgC,EACxC,OAAe,EACvB,GAAuB;QANP,YAAO,GAAP,OAAO,CAAQ;QACf,WAAM,GAAN,MAAM,CAAgB;QAE9B,oBAAe,GAAf,eAAe,CAAiB;QACxB,gBAAW,GAAX,WAAW,CAAqB;QACxC,YAAO,GAAP,OAAO,CAAQ;;;;;;QA/BlB,YAAO,GAAa,EAAc,CAAC;;;;;;;QAOnC,kBAAa,GAAmB,EAAoB,CAAC;;;;;QAKrD,UAAK,GAAW,EAAY,CAAC;;;;;;QAM7B,kBAAa,GAAmB,EAAoB,CAAC;QAgB1D,IAAI,CAAC,qBAAqB,GAAG,IAAI,qBAAqB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QAC1E,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,eAAe,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;QAC9D,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC,eAAe,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;QAEhF,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC,eAAe,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;QACtE,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;YAChC,IAAI,CAAC,uBAAuB,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;SAC1D;QACD,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;KACrF;IAEO,kBAAkB,CACxB,eAAuC,EACvC,QAAW,EACX,WAEC,EACD,OAAe;QAEf,MAAM,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC;QAC7C,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACtC,IAAI,eAAe,CAAC,oBAAoB,EAAE;YACxC,IAAI,CAAC,OAAO,CAAC,CAAC,uBAAuB;gBACnC,MAAM,yBAAyB,GAAG,IAAI,eAAe,CAAC,WAAW,CAAC,uBAAuB,CAAC,CAAC,CAAC;gBAE3F,IAAI,CAAC,OAA6B,CAAC,uBAAuB,CAAC,GAAG,UAAU,GAAG,IAAW;oBACrF,OAAO,eAAe,CAAC,qBAAqB,CAAC,8BAA8B,CACzE,yBAAyB,EACzB,uBAAuB,EACvB,IAAI,CACL,CAAC;iBACH,CAAC;gBAED,IAAI,CAAC,aAAyC,CAAC,uBAAuB,CAAC,GAAG,UAAU,IAAS;oBAC5F,OAAO,eAAe,CAAC,qBAAqB,CAAC,+BAA+B,CAC1E,yBAAyB,EACzB,uBAAuB,EACvB,IAAI,CACL,CAAC;iBACH,CAAC;gBAEF,IAAI,kBAAkB,CAAC,QAAQ,CAAC,EAAE;oBAChC,IAAI,MAAM,CAAC,WAAW,CAAC,uBAAuB,CAAC,CAAC,EAAE;wBAChD,MAAM,IAAI,GAAG,UAAU,GAAG,IAAW;4BACnC,MAAM,8BAA8B,GAAI,WAAW,CAAC,uBAAuB,CAAS;iCACjF,IAAI,CAAC,CAAC,CAAC,CAAC;4BACX,MAAM,wCAAwC,GAAG,IAAI,eAAe,CAClE,8BAA8B,CAC/B,CAAC;4BACF,MAAM,kBAAkB,GAAI,WAAW,CAAC,uBAAuB,CAAS,CAAC,IAAI,CAAC,CAAC,CAAC;iCAC7E,IAAI,CAAC,CAAC,CAAC,CAAC;4BACX,MAAM,iCAAiC,GAAG,IAAI,eAAe,CAAC,kBAAkB,CAAC,CAAC;4BAElF,YAAY,CAAC,IAAI,EAAE,wCAAwC,EAAE,uBAAuB,CAAC,CAAC;4BACtF,OAAO,IAAI,YAAY,CACrB,eAAe,EACf,QAAQ,EACR,uBAAuB,EACvB,OAAO,EACP,iCAAiC,EACjC,wCAAwC,EACxC,IAAI,CACL,CAAC;yBACH,CAAC;wBACD,IAAI,CAAC,KAAsB,CAAC,uBAAuB,CAAC,GAAG,IAAI,CAAC;qBAC9D;iBACF;aACF,CAAC,CAAC;;;YAIH,MAAM,gBAAgB,GAAG,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,aAAa,EAAE,CAAC,CAAC,MAAM,CAC1E,CAAC,GAAG,KAAK,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CACtD,CAAC;YAEF,gBAAgB,CAAC,OAAO,CAAC,CAAC,uBAAuB;gBAC9C,IAAI,CAAC,OAA6B,CAAC,uBAAuB,CAAC,GAAG,UAAU,GAAG,IAAW;oBACrF,OAAO,eAAe,CAAC,qBAAqB,CAAC,8BAA8B,CACzE,eAAe,EACf,uBAAuB,EACvB,IAAI,EACJ,KAAK,EACL,IAAI,CACL,CAAC;iBACH,CAAC;gBAED,IAAI,CAAC,aAAyC,CAAC,uBAAuB,CAAC,GAAG,UAAU,IAAS;oBAC5F,OAAO,eAAe,CAAC,qBAAqB,CAAC,+BAA+B,CAC1E,eAAe,EACf,uBAAuB,EACvB,IAAI,EACJ,KAAK,EACL,IAAI,CACL,CAAC;iBACH,CAAC;aACH,CAAC,CAAC;SACJ;aAAM;YACL,MAAM,yBAAyB,GAAG,IAAI,CAAC,eAAe,CAAC;YACtD,IAAI,CAAC,OAA6B,CAAC,kCAAkC,CAAC,GAAG,UAAU,GAAG,IAAW;gBAChG,OAAO,eAAe,CAAC,qBAAqB,CAAC,8BAA8B,CACzE,yBAAyB,EACzB,kCAAkC,EAClC,IAAI,EACJ,KAAK,CACN,CAAC;aACH,CAAC;YAED,IAAI,CAAC,aAAyC,CAAC,kCAAkC,CAAC,GAAG,UAAU,IAAS;gBACvG,OAAO,eAAe,CAAC,qBAAqB,CAAC,+BAA+B,CAC1E,yBAAyB,EACzB,kCAAkC,EAClC,IAAI,EACJ,KAAK,CACN,CAAC;aACH,CAAC;SACH;KACF;IAEO,uBAAuB,CAC7B,eAAuC,EACvC,GAAuB,EACvB,gBAA8B;QAE9B,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;QACpC,MAAM,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;QAEzC,gBAAgB,CAAC,OAAO,CAAC,CAAC,UAAU;YACjC,IAAI,CAAC,aAAsC,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,UAAU,IAAS;gBACrF,OAAO,eAAe,CAAC,qBAAqB,CAAC,6BAA6B,CACxE,GAAG,EACH,UAAU,EACV,WAAW,EACX,YAAY,EACZ,IAAI,CACL,CAAC;aACH,CAAC;SACH,CAAC,CAAC;KACJ;;;;IAKM,OAAO;QACZ,OAAO,IAAI,CAAC,eAAe,CAAC,UAAU,CAAI,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;KACtE;;;;;;;;;;;IAYM,MAAM,CAAC,GAAW;QACvB,OAAO,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;KAC1E;;;MCxTU,iBAAiB;IAC5B,YAAoB,EAAa,EAAU,MAAc,EAAU,QAA0B;QAAzE,OAAE,GAAF,EAAE,CAAW;QAAU,WAAM,GAAN,MAAM,CAAQ;QAAU,aAAQ,GAAR,QAAQ,CAAkB;KAAI;;;;;;;;;;IAW3F,GAAG,CAAI,WAA0B,EAAE,KAAc;;YACrD,IAAI;gBACF,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAC7C,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,EAClB,WAAW,EACX,IAAI,CAAC,MAAM,EACX,KAAK,CACN,CAAC;gBACF,OAAO,EAAE,CAAC;aACX;YAAC,OAAO,CAAC,EAAE;gBACV,IAAI,CAAC,YAAY,iBAAiB,IAAI,CAAC,CAAC,MAAM,KAAK,WAAW,CAAC,SAAS,EAAE;oBACxE,OAAO,SAAS,CAAC;iBAClB;qBAAM;oBACL,MAAM,CAAC,CAAC;iBACT;aACF;SACF;KAAA;;;;;;;;;;;;;;IAeK,iBAAiB,CAAI,YAAkC,EAAE,KAAc,EAAE,SAAS,GAAG,CAAC;;YAC1F,OAAO,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CACpC,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,EAClB,YAAY,EACZ,IAAI,CAAC,MAAM,EACX,KAAK,EACL,SAAS,CACV,CAAC;SACH;KAAA;IAED,MAAM;QACJ,OAAO,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC;KAC3B;IAED,QAAQ;QACN,OAAO,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC;KAC3B;;;MC7DU,uBAAuB;IAChC,YAAoB,EAAa,EAAU,QAA0B;QAAjD,OAAE,GAAF,EAAE,CAAW;QAAU,aAAQ,GAAR,QAAQ,CAAkB;KAAK;;;;;;;;;IAUpE,cAAc,CAAC,KAAc;;YAC/B,OAAO,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,EAAE,KAAK,CAAC,CAAC;SACtE;KAAA;IAED,KAAK;QACD,OAAO,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC;KAC7B;;;ACbL;AACO,MAAM,gCAAgC,GAAsC,CACjF,QAA0B,MACtB;;IAEJ,OAAO,EAAE,CAAC,GAA0B,EAAE,IAA2B;QAC/D,IAAI,CAAC,GAAG,IAAI,EAAE,KAAK,IAAI,GAAG,CAAC,IAAI,GAAG,CAAC,GAAG,KAAK,SAAS,EAAE;;YAEpD,OAAO,EAAE,CAAC;SACX;aAAM;YACL,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC;YAChC,OAAO,IAAI,iBAAiB,CAAC,IAAI,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;SACxE;KACF;IACD,aAAa,EAAE,CAAC,GAA0B;QACxC,IAAI,CAAC,GAAG,IAAI,EAAE,KAAK,IAAI,GAAG,CAAC,IAAI,GAAG,CAAC,GAAG,KAAK,SAAS,EAAE;;YAEpD,OAAO,EAAE,CAAC;SACX;aAAM;YACL,OAAO,IAAI,uBAAuB,CAAC,IAAI,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,QAAQ,CAAC,CAAC;SACtE;KACF;;;;;;CAMF,CAAC;;MCSW,mBACX,SAAQ,gBAAgB;IAGxB,YAAY,OAAgB,EAAU,SAA6B;QACjE,KAAK,CAAC,OAAO,CAAC,CAAC;QADqB,cAAS,GAAT,SAAS,CAAoB;QAGnE,+BAA0B,GAAG,MAAM,CAAC,GAAG,CAAC,+BAA+B,CAAC,CAAC;KADxE;;;;;;;;;;IAYK,UAAU,CAAI,QAAgB,EAAE,MAAuB;;YAC3D,IAAI,uBAAuB,CAAC,QAAQ,CAAC,KAAK,gBAAgB,CAAC,KAAK,EAAE;gBAChE,MAAM,IAAI,2BAA2B,CAAC,6BAA6B,QAAQ,EAAE,CAAC,CAAC;aAChF;YACD,IAAI,CAAC,MAAM,EAAE;gBACX,MAAM,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;aACvD;YAED,IAAI,cAAsB,CAAC;YAC3B,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;gBAC3B,cAAc,GAAG,MAAM,CAAC;aACzB;iBAAM;gBACL,cAAc,GAAG,MAAM,CAAC,eAAe,CAAC,EAAE,MAAM,EAAE,MAAwB,EAAE,CAAC,CAAC;aAC/E;YAED,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;YAEpD,OAAO,cAAc,CAAC,OAAO,CAAC,OAAO,EAAE,gCAAgC,CAAC,IAAI,CAAC,CAAM,CAAC;SACrF;KAAA;;;;;;;;;;;;;IAcK,YAAY,CAAI,QAAgB,EAAE,GAAW,EAAE,MAAuB;;YAC1E,IAAI,uBAAuB,CAAC,QAAQ,CAAC,KAAK,gBAAgB,CAAC,KAAK,EAAE;gBAChE,MAAM,IAAI,2BAA2B,CAAC,6BAA6B,QAAQ,EAAE,CAAC,CAAC;aAChF;YACD,IAAI,CAAC,MAAM,EAAE;gBACX,MAAM,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;aACvD;YAED,IAAI,cAAsB,CAAC;YAC3B,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;gBAC3B,cAAc,GAAG,MAAM,CAAC;aACzB;iBAAM;gBACL,cAAc,GAAG,MAAM,CAAC,eAAe,CAAC,EAAE,MAAM,EAAE,MAAwB,EAAE,CAAC,CAAC;aAC/E;YAED,MAAM,UAAU,GAAG,cAAc,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;YAEvD,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;YAE9D,OAAO,cAAc,CAAC,oBAAoB,CAAC,GAAG,CAAM,CAAC;SACtD;KAAA;;;;;;;;;;;;IAaK,gBAAgB,CACpB,EAAU,EACV,WAA0B,EAC1B,MAAc,EACd,KAAc;;YAEd,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,MAAM,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;YAC1D,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;YAE3E,MAAM,WAAW,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC;YAEvC,MAAM,WAAW,GAAG,KAAK;kBACrB,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,EAAE,CAAC,QAAQ,EAAE,EAAE,WAAW,EAAE,EAAE,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;kBAC1F,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,EAAE,CAAC,QAAQ,EAAE,EAAE,WAAW,CAAC,CAAC;YAErE,OAAO,MAAM,CAAC,oBAAoB,CAAC,WAAW,EAAE,gCAAgC,CAAC,IAAI,CAAC,CAAM,CAAC;SAC9F;KAAA;;;;;;;;;;;;;;;;IAiBK,iBAAiB,CACrB,EAAU,EACV,IAA0B,EAC1B,MAAc,EACd,KAAc,EACd,SAAS,GAAG,CAAC;;YAEb,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YACzD,MAAM,YAAY,GAAG,IAAI,YAAY,EAAkC,CAAC;;YAGxE,IAAI,QAAQ,GAAG,CAAC,CAAC;YACjB,IAAI,OAAO,GAAyB,EAAE,CAAC;YAEvC,OAAO,QAAQ,GAAG,IAAI,CAAC,MAAM,EAAE;gBAC7B,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,QAAQ,GAAG,SAAS,CAAC,CAAC;gBAC7D,MAAM,KAAK,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,WAAW,KACtC,IAAI,CAAC,yBAAyB,CAAI,WAAW,EAAE,EAAE,EAAE,MAAM,EAAE,KAAK,CAAC,CAClE,CAAC;gBACF,OAAO,GAAG,CAAC,GAAG,OAAO,EAAE,IAAI,MAAM,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACtD,QAAQ,IAAI,SAAS,CAAC;aACvB;YAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACvC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;aACvC;YAED,OAAO,YAAY,CAAC;SACrB;KAAA;IAEa,kBAAkB,CAAC,IAA0B,EAAE,KAAc;;;YACzE,OAAO,IAAI,CAAC,MAAM,KAAK,CAAC,IAAI,OAAO,KAAK,KAAK,WAAW;kBACpD,KAAK;yBACJ,MAAM,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,0CAAE,MAAM,CAAC,KAAK,CAAC;;KAC/C;IAEa,yBAAyB,CACrC,WAA0B,EAC1B,EAAU,EACV,MAAc,EACd,KAAc;;YAEd,IAAI;gBACF,OAAO,MAAM,IAAI,CAAC,gBAAgB,CAAI,EAAE,EAAE,WAAW,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;aACvE;YAAC,OAAO,EAAE,EAAE;gBACX,IAAI,EAAE,YAAY,iBAAiB,IAAI,EAAE,CAAC,MAAM,KAAK,WAAW,CAAC,SAAS,EAAE;oBAC1E,OAAO;iBACR;qBAAM;oBACL,MAAM,EAAE,CAAC;iBACV;aACF;SACF;KAAA;;;;;;;;;IAUK,kBAAkB,CAAC,EAAU,EAAE,KAAc;;YACjD,MAAM,YAAY,GAAG,KAAK;kBACtB,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,EAAE,CAAC,QAAQ,EAAE,EAAE,EAAE,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;kBAClF,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC7D,OAAO,YAAY,CAAC;SACrB;KAAA;IAEa,0BAA0B,CAAC,SAAuB,EAAE,aAAqB;;YACrF,IAAI,iBAAiB,CAAC,SAAS,CAAC,EAAE;gBAChC,MAAM,GAAG,GAAmB,CAAC,SAAS,CAAC,CAAC;gBACxC,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC;gBAChD,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;gBACrD,IAAI,cAAc,EAAE;oBAClB,MAAM,MAAM,GAA0C,EAAE,IAAI,EAAE,MAAM,CAAC,MAAM,EAAE,CAAC;oBAC9E,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,qDAAY,OAAA,cAAc,CAAA,GAAA,CAAC,CAAC;oBAChF,GAAG,CAAC,OAAO,CAAC,MAAM,qBAAqB,mBAAM,eAAe,GAAI,aAAa,EAAE,SAAS,CAAC,CAAC,CAAC;oBAC3F,OAAO,GAAG,CAAC;iBACZ;aACF;YACD,OAAO,SAAS,CAAC;SAClB;KAAA;;;;;;;;;;;IAYK,SAAS,CAA8D,MAAuD;;YAClI,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YAE5F,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC;YACxD,MAAM,SAAS,GAAG,MAAM,0BAA0B,CAChD,MAAM,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,sBAAsB,iCAC3C,MAAM,GACN,QAAQ,EACX,CACH,CAAC;YACF,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,0BAA0B,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;YAC5E,MAAM,mBAAmB,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC;gBACtD,SAAS,EAAE,GAAG;gBACd,MAAM,EAAE,aAAa;aACtB,CAAC,CAAC;YACH,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;YAChE,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,WAAW,EAAE,UAAU,EAAE,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,iBAAiB,CAAC,CAAC;YAC/F,OAAO,IAAI,oBAAoB,CAAY,IAAI,EAAE,SAAS,EAAE,WAAW,EAAE,UAAU,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;SACrG;KAAA;;;;;;;;;IAUK,WAAW,CAAC,MAAsB;;YACtC,IAAK,MAAM,CAAC,MAAM,IAAI,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,gBAAgB,CAAC,KAAK,EAAE;gBAC/E,MAAM,IAAI,mBAAmB,CAAC,2BAA2B,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC;aAC3E;YACD,IAAI,MAAM,CAAC,QAAQ,IAAI,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,gBAAgB,CAAC,KAAK,EAAE;gBAClF,MAAM,IAAI,mBAAmB,CAAC,6BAA6B,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;aAC/E;;YAGD,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE;gBAC9B,MAAM,IAAI,uBAAuB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;aAClD;YAED,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YAC9F,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC;YACxD,MAAM,SAAS,GAAG,MAAM,0BAA0B,iCAAM,MAAM,GAAK,QAAQ,EAAG,CAAC;YAC/E,MAAM,eAAe,GAAG,MAAM,CAAC,MAAM,IAAI,aAAa,CAAC;YACvD,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,0BAA0B,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;YAC5E,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC;gBAC3C,SAAS,EAAE,GAAG;gBACd,MAAM,EAAE,eAAe;aACxB,CAAC,CAAC;YACH,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YAC3C,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,WAAW,EAAE,UAAU,EAAE,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YACrF,OAAO,IAAI,iBAAiB,CAC1B,IAAI,EACJ,SAAS,EACT,eAAe,EACf,WAAW,EACX,UAAU,EACV,OAAO,CACR,CAAC;SACH;KAAA;;;;;;;;;IAUK,gBAAgB,CAAC,MAA8B;;YACnD,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,QAAQ,CAClC,MAAM,EACN,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CACrD,CAAC;YACF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC;YACjD,MAAM,SAAS,GAAG,MAAM,+BAA+B,iCAAM,MAAM,GAAK,QAAQ,GAAI,MAAM,CAAC,CAAC;YAC5F,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,0BAA0B,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;YACrE,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,EAAE,SAAS,EAAE,GAAG,EAAE,CAAC,CAAC;YACjE,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YAC3C,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,WAAW,EAAE,UAAU,EAAE,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YACrF,OAAO,IAAI,iBAAiB,CAAC,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,WAAW,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;SACzF;KAAA;;;;;;;;;IAUK,QAAQ,CAAC,MAAsB;;YACnC,IAAI,eAAe,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,gBAAgB,CAAC,KAAK,EAAE;gBACzD,MAAM,IAAI,mBAAmB,CAAC,6CAA6C,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC;aACzF;YACD,IAAI,MAAM,CAAC,MAAM,IAAI,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,gBAAgB,CAAC,KAAK,EAAE;gBAC9E,MAAM,IAAI,mBAAmB,CAAC,iDAAiD,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC;aACjG;YAED,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC;YACzD,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YAC3F,MAAM,SAAS,GAAG,MAAM,uBAAuB,iCAC1C,MAAM,GACN,QAAQ,EACX,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,IAAI,cAAc,CAAC;YAC/C,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,0BAA0B,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;YAC7E,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,EAAE,SAAS,EAAE,GAAG,EAAE,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC;YACxF,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YAC3C,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,WAAW,EAAE,UAAU,EAAE,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YACrF,OAAO,IAAI,oBAAoB,CAAC,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,WAAW,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;SAC5F;KAAA;;;;;;;;;IAUK,MAAM,CAAC,MAAoB;;YAC/B,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC;YACxD,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YAC3D,IAAI,cAAc,EAAE;gBAClB,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,qDAAY,OAAA,cAAc,CAAA,GAAA,CAAC,CAAC;gBAC1E,MAAM,SAAS,GAAG,MAAM,qBAAqB,mBAEtC,SAAS,GAEd,aAAa,EACb,MAAM,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAC9B,CAAC;gBACF,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,EAAE,SAAS,EAAE,MAAM,EAAE,aAAa,EAAE,CAAC,CAAC;gBACnF,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;gBAC3C,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,WAAW,EAAE,UAAU,EAAE,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;gBACrF,OAAO,IAAI,eAAe,CAAC,IAAI,EAAE,SAAS,EAAE,aAAa,EAAE,WAAW,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;aAC9F;iBAAM;gBACL,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;aAC7D;SACF;KAAA;;;;;;;;;IAUK,sBAAsB,CAAC,MAAoC;;YAC/D,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC;YACzD,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,QAAQ,CAClC,MAAM,EACN,IAAI,CAAC,SAAS,CAAC,sBAAsB,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAC3D,CAAC;YACF,MAAM,SAAS,GAAG,MAAM,qCAAqC,iCACxD,MAAM,GACN,QAAQ,EACX,CAAC;YACH,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,0BAA0B,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;YAC7E,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,EAAE,SAAS,EAAE,GAAG,EAAE,MAAM,EAAE,cAAc,EAAE,CAAC,CAAC;YACzF,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YAC3C,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,WAAW,EAAE,UAAU,EAAE,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YACrF,OAAO,IAAI,+BAA+B,CACxC,IAAI,EACJ,SAAS,EACT,cAAc,EACd,WAAW,EACX,UAAU,EACV,OAAO,CACR,CAAC;SACH;KAAA;IAEK,EAAE,CACN,OAAe,EACf,8BAA8D,CAAC,CAAC,KAAK,CAAQ;;YAE7E,IAAI,uBAAuB,CAAC,OAAO,CAAC,KAAK,gBAAgB,CAAC,KAAK,EAAE;gBAC/D,MAAM,IAAI,2BAA2B,CAAC,6BAA6B,OAAO,EAAE,CAAC,CAAC;aAC/E;YACD,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC,GAAG,CAAC;YAC9C,MAAM,MAAM,GAAG,MAAM,GAAG,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;YACtD,MAAM,WAAW,GAAG,MAAM,GAAG,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;YACtD,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,cAAc,EAAE,CAAC;YACpD,MAAM,OAAO,GAAG,WAAW,CAAC,QAAQ,CAAC;YACrC,MAAM,GAAG,GAAG,IAAI,mBAAmB,CAAC,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,GAAG,CAAC,CAAC;YAC5F,OAAO,2BAA2B,CAAC,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;SACvD;KAAA;;;;;;;;;IAUD,KAAK,CAAC,MAAyB;QAC7B,MAAM,KAAK,GAAG,IAAI,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QAE/D,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YACzB,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACpB;QAED,OAAO,KAAK,CAAC;KACd;;;MCncU,iBAAiB;IAC5B,YAAoB,OAAgB;QAAhB,YAAO,GAAP,OAAO,CAAS;KAAI;IAE1B,YAAY;;YACxB,MAAM,EAAE,aAAa,EAAE,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;YACpE,OAAO,aAA2B,CAAC;SACpC;KAAA;IAEK,WAAW,CAAC,GAAW;;YAC3B,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,EAAE,QAAQ,EAAE,MAAM,IAAI,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;YACnE,OAAO,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;SAChC;KAAA;IAEK,wBAAwB,CAAC,GAAW;;YACxC,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,EAAE,QAAQ,EAAE,MAAM,IAAI,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;YACnE,OAAO,MAAM,CAAC,wBAAwB,CAAC,GAAG,CAAC,CAAC;SAC7C;KAAA;IAEK,SAAS,CAAC,GAAW;;YACzB,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,EAAE,QAAQ,EAAE,MAAM,IAAI,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;YACnE,OAAO,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;SAC9B;KAAA;IAEK,sBAAsB,CAAC,MAAuB;;YAClD,MAAM,YAAY,GAAG,MAAM,CAAC;YAC5B,YAAY,CAAC,IAAI,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAC5D,IAAI,MAAM,CAAC,IAAI,EAAE;gBACf,YAAY,CAAC,IAAI,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;aAC7D;iBAAM,IAAI,MAAM,CAAC,OAAO,EAAE;gBACzB,MAAM,WAAW,GAAI,YAAY,CAAC,IAAe,CAAC,IAAI,CACpD,CAAC,CAAC,KAAgB,MAAM,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,SAAS,CACtD,CAAC;gBACF,IAAI,EAAC,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,IAAI,CAAA,EAAE;oBACtB,MAAM,IAAI,oBAAoB,CAC5B,gDAAgD,EAChD,MAAM,CAAC,IAAI,CACZ,CAAC;iBACH;gBACD,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAA0B,CAAC,CAAC;gBACxE,MAAM,2BAA2B,GAAG,MAAM,IAAI,CAAC,+BAA+B,CAAC,MAAM,CAAC,CAAC;gBAEvF,IAAI,MAAM,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;;;oBAGzD,MAAM,CAAC,GAAG,IAAI,MAAM,CAAC,EAAE,oBAAoB,EAAE,2BAA2B,EAAE,CAAC,CAAC;oBAC5E,MAAM,wBAAwB,GAAG,CAAC,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;oBAClE,MAAM,mBAAmB,GAAG,IAAI,MAAM,CAAC,wBAAwB,CAAC,CAAC;oBACjE,YAAY,CAAC,IAAI,GAAG,mBAAmB,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;iBAChE;qBAAM;oBACL,YAAY,CAAC,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;iBACnD;gBACD,OAAO,YAAY,CAAC,OAAO,CAAC;aAC7B;YACD,OAAO,YAAY,CAAC;SACrB;KAAA;IAEa,eAAe,CAAC,IAAuB;;YACnD,IAAI,UAAkB,CAAC;YACvB,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;gBAC5B,MAAM,CAAC,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;gBACvC,IAAI,CAAC,KAAK,IAAI,EAAE;oBACd,MAAM,IAAI,oBAAoB,CAAC,wBAAwB,EAAE,IAAI,CAAC,CAAC;iBAChE;gBACD,UAAU,GAAG,CAAC,CAAC;aAChB;iBAAM;gBACL,MAAM,CAAC,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;gBACrC,MAAM,KAAK,GAAG,CAAC,WAAW,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;;gBAE/C,UAAU,GAAI,CAAY,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;aAC1F;YACD,OAAO,UAAU,CAAC;SACnB;KAAA;IAEa,eAAe,CAAC,IAAqB;;YACjD,IAAI,UAAgB,CAAC;YACrB,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;gBAC5B,MAAM,CAAC,GAAG,MAAM,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,CAAC;gBACpD,IAAI,CAAC,KAAK,IAAI,EAAE;oBACd,MAAM,IAAI,oBAAoB,CAAC,wBAAwB,EAAE,IAAI,CAAC,CAAC;iBAChE;gBACD,UAAU,GAAG,CAAC,CAAC;aAChB;iBAAM;gBACL,UAAU,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;aACzC;YACD,OAAO,UAAU,CAAC;SACnB;KAAA;IAEa,+BAA+B,CAAC,MAAc;;YAC1D,MAAM,oBAAoB,GAAG,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;YAC1D,MAAM,2BAA2B,GAA+B,EAAE,CAAC;YAEnE,IAAI,oBAAoB,CAAC,MAAM,KAAK,CAAC,EAAE;gBACrC,KAAK,MAAM,KAAK,IAAI,oBAAoB,EAAE;oBACxC,MAAM,SAAS,GAAG,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC;oBACtC,IAAI,SAAS,EAAE;wBACb,MAAM,IAAI,GAAW,SAAS,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;wBAC5C,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,uBAAuB,CAAC,uBAAuB,CACvF,IAAI,CACL,CAAC;wBACF,MAAM,CAAC,MAAM,CAAC,2BAA2B,EAAE;4BACzC,CAAC,IAAI,GAAG,cAAc;yBACvB,CAAC,CAAC;qBACJ;iBACF;aACF;YACD,OAAO,2BAA2B,CAAC;SACpC;KAAA;;;MC9GU,SAAS;IACpB,YAAoB,OAAgB;QAAhB,YAAO,GAAP,OAAO,CAAS;KAAI;IAElC,QAAQ,CAAC,IAAoB;;YACjC,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;SACxC;KAAA;;;MCTU,sBAAuB,SAAQ,KAAK;IAG/C,YAAmB,IAAY;QAC7B,KAAK,CACH,sDAAsD,IAAI,6EAA6E,CACxI,CAAC;QAHe,SAAI,GAAJ,IAAI,CAAQ;QAF/B,SAAI,GAAG,wBAAwB,CAAC;KAM/B;CACF;MAEY,wCAAyC,SAAQ,KAAK;IAGjE;QACE,KAAK,CACH,wKAAwK,CACzK,CAAC;QALJ,SAAI,GAAG,0CAA0C,CAAC;KAMjD;;;MCbU,2BAA2B;IAC9B,uBAAuB,CAAC,KAAyB;;YACnD,MAAM,IAAI,wCAAwC,EAAE,CAAC;SACxD;KAAA;;;MC4BQ,yBAAyB,GAAuB;IAC3D,wBAAwB,EAAE,CAAC;IAC3B,gCAAgC,EAAE,GAAG;EACrC;MAWW,qBAAqB,GAAmB;IACnD,mCAAmC,EAAE,KAAK;IAC1C,iCAAiC,EAAE,KAAK;IACxC,mCAAmC,EAAE,KAAK,EAAE;EAC5C;AAEF;;;MAGa,OAAO;IAgBlB,YACU,IAAiC,EACjC,UAAkB,IAAI,UAAU,EAAE,EAClC,MAAkB,EACV,UAAU,IAAI,eAAe,iCACxC,qBAAqB,GACrB,yBAAyB,EAC5B,EACF,MAAe,EACf,QAAmB,EACnB,MAAe,EACf,MAAuB,EACvB,MAAuB,EACvB,uBAAiD;QAZzC,SAAI,GAAJ,IAAI,CAA6B;QACjC,YAAO,GAAP,OAAO,CAA2B;QAClC,WAAM,GAAN,MAAM,CAAY;QACV,YAAO,GAAP,OAAO,CAGrB;QAfI,sBAAiB,GAAyC,EAAE,CAAC;QAErD,OAAE,GAAG,IAAI,aAAa,CAAC,IAAI,CAAC,CAAC;QAC7B,aAAQ,GAAG,IAAI,mBAAmB,CAAC,IAAI,CAAC,CAAC;QACzC,aAAQ,GAAG,IAAI,mBAAmB,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QACxD,UAAK,GAAG,IAAI,gBAAgB,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAClD,WAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC;;;;;;QAiM1C,mBAAc,GAAG;YACf,IAAI,aAAa,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;YACjC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC,SAAS;gBACvC,aAAa,GAAG,SAAS,CAAC,aAAa,CAAC,CAAC;aAC1C,CAAC,CAAC;YAEH,OAAO,aAAa,CAAC;SACtB,CAAC;QAvLA,IAAI,OAAO,IAAI,CAAC,IAAI,KAAK,QAAQ,EAAE;YACjC,IAAI,CAAC,UAAU,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAC5C;aAAM;YACL,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC;SAC7B;QACD,IAAI,CAAC,OAAO,GAAG,MAAM,GAAG,MAAM,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,CAAC;QACrD,IAAI,CAAC,SAAS,GAAG,QAAQ,GAAG,QAAQ,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,CAAC;QAC7D,IAAI,CAAC,gBAAgB,GAAG,IAAI,gBAAgB,CAAC,IAAI,CAAC,CAAC;QACnD,IAAI,CAAC,eAAe,GAAG,MAAM,GAAG,MAAM,GAAG,IAAI,oBAAoB,CAAC,IAAI,CAAC,CAAC;QACxE,IAAI,CAAC,OAAO,GAAG,MAAM,GAAG,MAAM,GAAG,IAAI,iBAAiB,CAAC,IAAI,CAAC,CAAC;QAC7D,IAAI,CAAC,OAAO,GAAG,MAAM,GAAG,MAAM,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,CAAC;QACrD,IAAI,CAAC,wBAAwB,GAAG,uBAAuB;cACnD,uBAAuB;cACvB,IAAI,2BAA2B,EAAE,CAAC;KACvC;IAED,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;KAChC;IAED,IAAI,MAAM,CAAC,KAA0C;QACnD,IAAI,CAAC,OAAO,CAAC,IAAI,mBACZ,KAAK,EACR,CAAC;KACJ;IAED,gBAAgB,CAAC,KAA4D;QAC3E,IAAI,CAAC,OAAO,CAAC,IAAI,iCACZ,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,GACvB,KAAK,EACR,CAAC;KACJ;IAED,IAAI,GAAG;QACL,OAAO,IAAI,CAAC,UAAU,CAAC;KACxB;IAED,IAAI,GAAG,CAAC,KAAyB;QAC/B,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;KACzB;IAED,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,SAAS,CAAC;KACvB;IAED,IAAI,QAAQ,CAAC,KAAe;QAC1B,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;KACxB;IAED,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,OAAO,CAAC;KACrB;IAED,IAAI,MAAM,CAAC,KAAa;QACtB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;KACtB;IAED,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,OAAO,CAAC;KACrB;IAED,IAAI,MAAM,CAAC,KAAa;QACtB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;KACtB;IAED,IAAI,cAAc;QAChB,OAAO,IAAI,CAAC,eAAe,CAAC;KAC7B;IAED,IAAI,cAAc,CAAC,KAAqB;QACtC,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;KAC9B;IAED,IAAI,KAAK,CAAC,KAA4B;QACpC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;KACrB;IAED,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,MAAM,CAAC;KACpB;IAED,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,OAAO,CAAC;KACrB;IAED,IAAI,MAAM,CAAC,KAAqB;QAC9B,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;KACtB;IAED,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,OAAO,CAAC;KACrB;IAED,IAAI,MAAM,CAAC,KAAa;QACtB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;KACtB;IAED,IAAI,uBAAuB;QACzB,OAAO,IAAI,CAAC,wBAAwB,CAAC;KACtC;IAED,IAAI,uBAAuB,CAAC,KAA8B;QACxD,IAAI,CAAC,wBAAwB,GAAG,KAAK,CAAC;KACvC;IAEK,mBAAmB,CAAC,WAAqB,EAAE;;YAC/C,IAAI,IAAI,CAAC,MAAM,EAAE;gBACf,OAAO,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aACvC;iBAAM;gBACL,MAAM,EAAE,aAAa,EAAE,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;gBAC5D,OAAO,QAAQ,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;aACzC;SACF;KAAA;IAEK,8BAA8B;;;;YAGlC,MAAM,eAAe,GAAG,CAAC,CAAC;YAC1B,IAAI;gBACF,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;gBAChD,IAAI,SAAS,GAAG,SAAS,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;gBACjD,IAAI,SAAS,CAAC,mBAAmB,KAAK,SAAS,EAAE;oBAC/C,SAAS,GAAG,SAAS,CAAC,mBAAmB,CAAC;iBAC3C;gBACD,IAAI,2BAA2B,GAAG,SAAS,CAAC,GAAG,CAC7C,SAAS;;gBAET,IAAI,SAAS,CAAC,SAAS,CAAC,6BAA8B,CAAC,CAAC,YAAY;;gBAElE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,SAAS,CAAC,iBAAkB,GAAG,SAAS,CAAC,mBAAmB,CAAC,CAC1E,CACF,CAAC;;;;gBAKF,2BAA2B,GAAG,2BAA2B,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;gBAEvE,IAAI,CAAC,MAAM,CAAC,iCAAiC;oBAC3C,2BAA2B,CAAC,QAAQ,EAAE,KAAK,CAAC,GAAG,GAAG,GAAG,2BAA2B,CAAC,QAAQ,EAAE,CAAC;gBAC9F,OAAO,IAAI,CAAC,MAAM,CAAC,iCAAiC,CAAC;aACtD;YAAC,OAAO,SAAS,EAAE;;;;gBAIlB,OAAO,eAAe,CAAC;aACxB;SACF;KAAA;;;;IAKD,KAAK;QACH,OAAO,IAAI,OAAO,CAChB,IAAI,CAAC,GAAG,EACR,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,KAAK,EACV,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,MAAM,CACZ,CAAC;KACH;;;;IAKD,yBAAyB,CAAC,EAAiC;QACzD,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;KACjC;;;AChQH,MAAM,YAAY,GAAG,CAAC,EAAoB,EAAE,MAAoB,KAAK,EAAE,CAAC,IAAI,KAAK,MAAM,CAAC,MAAM,CAAC;AAE/F,MAAM,YAAY,GAAG,CAAC,CAAmB,EAAE,MAAoB;IAC7D,QAAQ,CAAC,CAAC,IAAI;QACZ,KAAK,aAAa;YAChB,OAAO,UAAU,IAAI,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,QAAQ,KAAK,MAAM,CAAC,MAAM,CAAA;QACjE,KAAK,kBAAkB;YACrB,OAAO,UAAU,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK,MAAM,CAAC,MAAM,CAAA;QACnD;YACE,OAAO,QAAQ,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,MAAM,CAAA;KACrD;AACH,CAAC,CAAA;AAED,MAAM,UAAU,GAAG,CAAC,CAAmB,EAAE,MAAkB,KAAK,MAAM,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,MAAM,CAAC,IAAI,CAAC;AAEtG,MAAM,iBAAiB,GAAG,CAAC,CAAmB,EAAE,MAAyB;IACvE,QAAQ,CAAC,CAAC,IAAI;QACZ,KAAK,YAAY;YACf,OAAO,CAAC,CAAC,QAAQ,KAAK,MAAM,CAAC,WAAW,CAAC;QAC3C,KAAK,aAAa;YAChB,IACE,UAAU,IAAI,CAAC;gBACf,kBAAkB,IAAI,CAAC,CAAC,QAAQ;gBAChC,sBAAsB,IAAI,CAAC,CAAC,QAAQ,CAAC,gBAAgB;gBACrD,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,gBAAgB,CAAC,oBAAoB,CAAC,EAC/D;gBACA,OAAO,CAAC,CAAC,QAAQ,CAAC,gBAAgB,CAAC,oBAAoB,CAAC,IAAI,CAC1D,QAAQ,IAAI,QAAQ,KAAK,MAAM,CAAC,WAAW,CAC5C,CAAC;aACH;YACD,MAAM;QACR,KAAK,aAAa;YAChB,OAAO,CAAC,CAAC,WAAW,KAAK,MAAM,CAAC,WAAW,CAAC;QAC9C;YACE,OAAO,KAAK,CAAC;KAChB;AACH,CAAC,CAAC;AAEK,MAAM,gBAAgB,GAAG,CAAC,EAAoB,EAAE,MAAgB;IACrE,IAAI,QAAQ,IAAI,MAAM,EAAE;QACtB,OAAO,YAAY,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;KACjC;SAAM,IAAI,QAAQ,IAAI,MAAM,EAAE;QAC7B,OAAO,YAAY,CAAC,EAAE,EAAE,MAAM,CAAC,CAAA;KAChC;SAAM,IAAI,MAAM,IAAI,MAAM,EAAE;QAC3B,OAAO,UAAU,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;KAC/B;SAAM,IAAI,aAAa,IAAI,MAAM,EAAE;QAClC,OAAO,iBAAiB,CAAC,EAAE,EAAE,MAAM,CAAC,CAAA;KACrC;IAED,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAEK,MAAM,kBAAkB,GAAG,CAAC,EAAoB,EAAE,GAAqB;IAC5E,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;QAC1B,OAAO,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAA8B,KAAK,cAAc,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;KACjF;SAAM,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;QAChC,OAAO,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAA8B,KAAK,cAAc,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;KAC/E;SAAM;QACL,MAAM,IAAI,KAAK,CAAC,wDAAwD,CAAC,CAAC;KAC3E;AACH,CAAC,CAAC;AAEK,MAAM,cAAc,GAAG,CAAC,EAAoB,EAAE,MAAc;IACjE,MAAM,OAAO,GAAoC,EAAE,CAAC;IACpD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;QAC1B,OAAO,CAAC,IAAI,CAAC,MAAa,CAAC,CAAC;KAC7B;SAAM;QACL,OAAO,CAAC,IAAI,CAAC,GAAI,MAAc,CAAC,CAAC;KAClC;IAED,OAAQ,OAAiB,CAAC,KAAK,CAAC,CAAC,WAAwC;QACvE,IAAI,KAAK,IAAI,WAAW,IAAI,IAAI,IAAI,WAAW,EAAE;YAC/C,OAAO,kBAAkB,CAAC,EAAE,EAAE,WAAW,CAAC,CAAC;SAC5C;aAAM;YACL,OAAO,gBAAgB,CAAC,EAAE,EAAE,WAAuB,CAAC,CAAC;SACtD;KACF,CAAC,CAAC;AACL,CAAC;;AC/ED;MAKa,sBAAsB;IAMjC,YACE,GAAkB,EACV,cAAuB,KAAK,EAC5B,mBAA2C,KAAK,EAAK;QADrD,gBAAW,GAAX,WAAW,CAAiB;QAC5B,qBAAgB,GAAhB,gBAAgB,CAAqC;QARvD,mBAAc,GAAkC,EAAE,CAAC;QACnD,qBAAgB,GAA6B,EAAE,CAAC;QAChD,mBAAc,GAAsB,EAAE,CAAC;QACvC,eAAU,GAAG,IAAI,OAAO,EAAE,CAAC;QAOjC,GAAG;aACA,IAAI,CACH,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,EAC1B,GAAG,CACD,CAAC,IAAO;YACN,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;SACxC,EACD,CAAC,KAAK;YACJ,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;SACvC,EACD;YACE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;SAChC,CACF,EACD,IAAI,CAAC,WAAW,GAAG,gBAAgB,GAAG,GAAG,EAAE,EAC3C,UAAU,CAAC,MAAM,KAAK,CAAC,CACxB;aACA,SAAS,EAAE,CAAC;KAChB;IAEO,IAAI,CAAI,SAAkC,EAAE,KAAS;QAC3D,KAAK,MAAM,CAAC,IAAI,SAAS,EAAE;YACzB,IAAI;;gBAEF,CAAC,CAAC,KAAM,CAAC,CAAC;aACX;YAAC,OAAO,EAAE,EAAE;gBACX,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;aACnB;SACF;KACF;IAEO,MAAM,CAAC,SAAqB,EAAE,KAAU;QAC9C,MAAM,GAAG,GAAG,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACrC,IAAI,GAAG,KAAK,CAAC,CAAC,EAAE;YACd,SAAS,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;SAC1B;KACF;IAMM,EAAE,CAAC,IAAgC,EAAE,EAAO;QACjD,QAAQ,IAAI;YACV,KAAK,MAAM;gBACT,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBAC/B,MAAM;YACR,KAAK,OAAO;gBACV,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBAC7B,MAAM;YACR,KAAK,OAAO;gBACV,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBAC7B,MAAM;YACR;gBACE,MAAM,IAAI,KAAK,CAAC,+CAA+C,IAAI,EAAE,CAAC,CAAC;SAC1E;KACF;IAMM,GAAG,CAAC,IAAgC,EAAE,EAAO;QAClD,QAAQ,IAAI;YACV,KAAK,MAAM;gBACT,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAAC;gBACvC,MAAM;YACR,KAAK,OAAO;gBACV,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;gBACrC,MAAM;YACR,KAAK,OAAO;gBACV,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;gBACrC,MAAM;YACR;gBACE,MAAM,IAAI,KAAK,CAAC,iDAAiD,IAAI,EAAE,CAAC,CAAC;SAC5E;KACF;IAEM,KAAK;QACV,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;KACxB;;;AC/EH,MAAM,YAAY,GAAG,CAAC,OAAgB;IACpC,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;AACpD,CAAC,CAAC;AAEF,MAAM,WAAW,GAAG,CAAC,MAAc,KACjC,SAAS,CAAmD,KAAK;IAC/D,OAAO,IAAI,UAAU,CAAmB,GAAG;QACzC,KAAK,MAAM,GAAG,IAAI,KAAK,CAAC,UAAU,EAAE;YAClC,KAAK,MAAM,EAAE,IAAI,GAAG,EAAE;gBACpB,KAAK,MAAM,OAAO,IAAI,EAAE,CAAC,QAAQ,EAAE;oBACjC,IAAI,cAAc,iBAAE,IAAI,EAAE,EAAE,CAAC,IAAI,IAAK,OAAO,GAAG,MAAM,CAAC,EAAE;wBACvD,GAAG,CAAC,IAAI,iBAAE,IAAI,EAAE,EAAE,CAAC,IAAI,IAAK,OAAO,EAAE,CAAC;qBACvC;iBACF;aACF;SACF;QACD,GAAG,CAAC,QAAQ,EAAE,CAAC;KAChB,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;MAEQ,wBAAwB;IAcnC,YAAoB,OAAgB;QAAhB,YAAO,GAAP,OAAO,CAAS;;QAZ5B,WAAM,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CACxC,SAAS,CAAC,CAAC,GAAG,KAAK,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,mCAAmC,CAAC,CAAC,CACtE,CAAA;QAEO,cAAS,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAClC,GAAG,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,EACvB,SAAS,CAAC,YAAY,CAAC,EACvB,uBAAuB,CAAC,MAAM,CAAC,EAC/B,OAAO,EAAE,EACT,QAAQ,EAAE,CACX,CAAC;KAEuC;IAEzC,SAAS,CAAC,OAAe;QACvB,OAAO,IAAI,sBAAsB,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAClC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,iCAAiC,EACrD,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,mCAAmC,CAAC,CAAC;KAC5F;IAED,kBAAkB,CAAC,MAAc;QAC/B,OAAO,IAAI,sBAAsB,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,EACxC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,iCAAiC,EACrD,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,mCAAmC,CAAC,CAAC;KAC5F;;;AC9DH;AACO,MAAM,OAAO,GAAG;IACnB,YAAY,EAAE,0CAA0C;IACxD,SAAS,EAAE,QAAQ;CACtB;;MCHY,oBAAqB,SAAQ,KAAK;IAE7C,YAAmB,OAAiB;QAClC,KAAK,CAAC,wBAAwB,CAAC,CAAC;QADf,YAAO,GAAP,OAAO,CAAU;QADpC,SAAI,GAAG,sBAAsB,CAAC;KAG7B;CACF;MAEY,eAAe;IAC1B,YAAoB,OAAiB;QAAjB,YAAO,GAAP,OAAO,CAAU;QACnC,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;YACxB,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;SAC1D;KACF;IAEK,KAAK,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAe;;YAC3C,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,GAAG,CAC/B,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM;gBACtB,OAAO,MAAM,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC,CAAC;aAC3C,CAAC,CACH,CAAC;YAEF,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;gBACxB,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;aAC1D;;YAGD,IAAI,UAAU,GAAW,OAAO,CAAC,GAAG,EAAG,CAAC;YACxC,OAAO,OAAO,CAAC,MAAM,EAAE;;gBAErB,MAAM,aAAa,GAAG,OAAO,CAAC,GAAG,EAAG,CAAC;gBAErC,IAAI,aAAa,KAAK,UAAU,EAAE;oBAChC,MAAM,IAAI,oBAAoB,CAAC,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC,CAAC;iBAC7D;gBACD,UAAU,GAAG,aAAa,CAAC;aAC5B;YAED,OAAO,UAAU,CAAC;SACnB;KAAA;;;MCrCU,UAAU;IACb,sBAAsB,CAAC,MAAuB;;YAChD,OAAO,MAAM,CAAC;SACjB;KAAA;;;MCFQ,iBAAiB;IAEtB,QAAQ,CAAC,IAAoB;;YACjC,MAAM,EAAE,KAAK,EAAE,GAAG,aAAa,CAAC,IAAI,CAAC,IAAqB,EAAE,IAAI,CAAC,IAAqB,CAAC,CAAC;YACxF,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,CAAA;SACzB;KAAA;;;MCLU,8BAA8B;IAA3C;QACU,4BAAuB,GAA+B,EAAE,CAAC;KA4BlE;;;;;IAtBC,kBAAkB,CAAC,cAA0C;QAC3D,KAAK,MAAM,IAAI,IAAI,cAAc,EAAE;YACjC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,uBAAuB,EAAE;gBAC1C,CAAC,IAAI,GAAG,cAAc,CAAC,IAAI,CAAC;aAC7B,CAAC,CAAC;SACJ;KACF;;;;;;;;IASK,uBAAuB,CAAC,IAAwB;;YACpD,MAAM,KAAK,GAAG,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC;YACjD,IAAI,CAAC,KAAK,EAAE;gBACV,MAAM,IAAI,sBAAsB,CAAC,IAAI,CAAC,CAAC;aACxC;YACD,OAAO,KAAK,CAAC;SACd;KAAA;;;AChCH;;;;AAyEA;;;;;MAKa,YAAY;IAcvB,YAAoB,IAAiC;QAAjC,SAAI,GAAJ,IAAI,CAA6B;QAZ7C,aAAQ,GAAuB,EAAE,CAAC;QAU1B,WAAM,GAAG,MAAM,CAAC;QAG9B,IAAI,OAAO,IAAI,CAAC,IAAI,KAAK,QAAQ,EAAE;YACjC,IAAI,CAAC,UAAU,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAC5C;aAAM;YACL,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC;SAC7B;QACD,IAAI,CAAC,QAAQ,GAAG,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC;QAClC,IAAI,CAAC,OAAO,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACzC,IAAI,CAAC,WAAW,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;QAC3C,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;KAClE;;;;;;;;;;IAYD,WAAW,CAAC,EACV,GAAG,EACH,MAAM,EACN,MAAM,EACN,QAAQ,EACR,MAAM,EACN,MAAM,EACN,MAAM,EACN,MAAM,EACN,uBAAuB,GACJ;QACnB,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;QACzB,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;QAC/B,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;QAC/B,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;QAC/B,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;QAC/B,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;QAC/B,IAAI,CAAC,0BAA0B,CAAC,uBAAuB,CAAC,CAAC;QAEzD,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,QAAQ,CAAC;QAC/B,IAAI,MAAM,EAAE;YACV,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;SACxC;KACF;;;;;;;;;IAUD,iBAAiB,CAAC,MAAqC;QACrD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;YAC1D,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,IAAI,UAAU,EAAE,CAAC;YACxC,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,MAAM,CAAC;SAC/B;aAAM,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;YACxC,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,MAAM,CAAC;YAC9B,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,MAAM,CAAC;SAC/B;KACF;;;;;;;;;IAUD,cAAc,CAAC,GAA+B;QAC5C,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;YAC3B,IAAI,CAAC,UAAU,GAAG,IAAI,SAAS,CAAC,GAAG,CAAC,CAAC;SACtC;aAAM,IAAI,GAAG,KAAK,SAAS,EAAE,CAE7B;aAAM;YACL,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC;SACvB;QACD,IAAI,CAAC,QAAQ,CAAC,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC;QACpC,IAAI,CAAC,QAAQ,CAAC,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC;KACrC;;;;;;;;;IAUD,iBAAiB,CAAC,MAAqC;QACrD,MAAM,CAAC,GAAG,OAAO,MAAM,KAAK,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,GAAG,MAAM,CAAC;QAChF,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;QACzB,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;KAC1B;;;;;;;;;IAUD,iBAAiB,CAAC,MAAqC;QACrD,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;YAC9B,IAAI,CAAC,OAAO,GAAG,IAAI,wBAAwB,CAAC,IAAI,OAAO,CAAC,IAAI,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;SACjF;aAAM,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;YACxC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;SACvB;aAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,KAAK,SAAS,EAAE;YAC7C,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,wBAAwB,CAAC,EAAE,CAAC;SAC5D;QACD,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,MAAM,CAAC;KAC/B;;;;;;;;;IAUD,iBAAiB,CAAC,MAAqC;QACrD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;YAC1D,MAAM,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,oBAAoB,CAAC,EAAE,CAAC;YAClD,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;YACzB,IAAI,CAAC,QAAQ,CAAC,cAAc,GAAG,CAAC,CAAC;SAClC;aAAM,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;YACxC,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,MAAM,CAAC;YAC9B,IAAI,CAAC,QAAQ,CAAC,cAAc,GAAG,MAAM,CAAC;SACvC;KACF;;;;;;;;;IAUD,iBAAiB,CAAC,MAAqC;QACrD,MAAM,CAAC,GAAG,OAAO,MAAM,KAAK,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,GAAG,MAAM,CAAC;QAChF,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;QACzB,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;KAC1B;;;;;;;;;;;;;;;;;IAkBD,0BAA0B,CACxB,uBAAuE;QAEvE,MAAM,CAAC,GACL,OAAO,uBAAuB,KAAK,WAAW;cAC1C,IAAI,2BAA2B,EAAE;cACjC,uBAAuB,CAAC;QAC9B,IAAI,CAAC,QAAQ,CAAC,uBAAuB,GAAG,CAAC,CAAC;QAC1C,IAAI,CAAC,QAAQ,CAAC,uBAAuB,GAAG,CAAC,CAAC;KAC3C;;;;IAKD,IAAI,EAAE;QACJ,OAAO,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC;KACzB;;;;IAKD,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC;KAC/B;IAED,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,OAAO,CAAC;KACrB;IAED,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC;KACvC;;;;IAKD,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC;KAC/B;;;;IAKD,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,OAAO,CAAC;KACrB;;;;IAKD,IAAI,GAAG;QACL,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC;KAC1B;;;;IAKD,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;KAC7B;;;;IAKD,IAAI,eAAe;QACjB,OAAO,IAAI,CAAC,QAAQ,CAAC,uBAAuB,CAAC;KAC9C;;;;;;;;IASD,YAAY,CAAC,MAA+B;QAC1C,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YACzB,MAAM,CAAC,OAAO,CAAC,CAAC,SAAS,KAAK,SAAS,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;SAC1E;aAAM;YACL,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SACxC;KACF;IAED,UAAU,CAA0B,IAA2B;QAC7D,OAAO,CAAC,GAAG,IAAO;YAChB,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,IAAI,CAAC,CAAC;SACzC,CAAC;KACH;;;;IAKD,cAAc;QACZ,OAAO,OAAO,CAAC;KAChB;;;;;"}