(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@taquito/michelson-encoder'), require('@taquito/tzip16')) :
    typeof define === 'function' && define.amd ? define(['exports', '@taquito/michelson-encoder', '@taquito/tzip16'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.taquitoTzip12 = {}, global.michelsonEncoder, global.tzip16));
})(this, (function (exports, michelsonEncoder, tzip16) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    class TokenMetadataNotFound extends Error {
        constructor(address) {
            super(`No token metadata was found for the contract: ${address}`);
            this.address = address;
            this.name = 'TokenMetadataNotFound';
        }
    }
    class TokenIdNotFound extends Error {
        constructor(tokenId) {
            super(`Could not find token metadata for the token ID: ${tokenId}`);
            this.tokenId = tokenId;
            this.name = 'TokenIdNotFound';
        }
    }
    class InvalidTokenMetadata extends Error {
        constructor() {
            super('Non-compliance with the TZIP-012 standard. The required property `decimals` is missing.');
            this.name = 'InvalidTokenMetadata';
        }
    }

    const tokenMetadataBigMapType = {
        prim: 'big_map',
        args: [
            { prim: 'nat' },
            {
                prim: 'pair',
                args: [
                    { prim: 'nat', annots: ['%token_id'] },
                    { prim: 'map', args: [{ prim: 'string' }, { prim: 'bytes' }], annots: ['%token_info'] },
                ],
            },
        ],
        annots: ['%token_metadata'],
    };
    class Tzip12ContractAbstraction {
        constructor(contractAbstraction, context) {
            this.contractAbstraction = contractAbstraction;
            this.context = context;
            this._tzip16ContractAbstraction = new tzip16.Tzip16ContractAbstraction(this.contractAbstraction, this.context);
        }
        /**
         * @description Fetches the contract metadata (according to the Tzip-016 standard)
         * @returns An object containing the metadata, the uri, an optional integrity check result and an optional sha256 hash
         * or `Undefined` if the contract has no metadata (non-compliant with Tzip-016)
         */
        getContractMetadata() {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const contractMetadata = yield this._tzip16ContractAbstraction.getMetadata();
                    return contractMetadata.metadata;
                }
                catch (err) {
                    // The contract is not compliant with Tzip-016. There is no contract metadata.
                }
            });
        }
        /**
         * @description The Tzip-016 "interfaces" field MUST be present in the contract metadata. It should contain "TZIP-012[version-info]"
         * @returns True if "interfaces" field is present and contains "TZIP-012", false otherwise
         */
        isTzip12Compliant() {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                let isCompliant = false;
                const metadata = yield this.getContractMetadata();
                if (metadata) {
                    const tzip12Interface = (_a = metadata.interfaces) === null || _a === void 0 ? void 0 : _a.filter((x) => {
                        return x.substring(0, 8) === 'TZIP-012';
                    });
                    isCompliant = tzip12Interface && tzip12Interface.length !== 0 ? true : false;
                }
                return isCompliant;
            });
        }
        /**
         * @description Fetches the token metadata for a specified token ID.
         * The function first tries to find a `token_metadata` view in the contract metadata and to execute it with the token ID.
         * If there is no view, the function tries to find a `token_metadata` bigmap in the top-level pairs of the storage.
         * @param tokenId The ID of the token for which we want to retrieve token metadata
         * @returns An object of type `TokenMetadata`
         */
        getTokenMetadata(tokenId) {
            return __awaiter(this, void 0, void 0, function* () {
                const tokenMetadata = yield this.retrieveTokenMetadataFromView(tokenId);
                return !tokenMetadata ? this.retrieveTokenMetadataFromBigMap(tokenId) : tokenMetadata;
            });
        }
        retrieveTokenMetadataFromView(tokenId) {
            return __awaiter(this, void 0, void 0, function* () {
                if (yield this.getContractMetadata()) {
                    const views = yield this._tzip16ContractAbstraction.metadataViews();
                    if (views && this.hasTokenMetadataView(views)) {
                        return this.executeTokenMetadataView(views['token_metadata'](), tokenId);
                    }
                }
            });
        }
        hasTokenMetadataView(views) {
            for (const view of Object.keys(views)) {
                if (view === 'token_metadata') {
                    return true;
                }
            }
            return false;
        }
        executeTokenMetadataView(tokenMetadataView, tokenId) {
            return __awaiter(this, void 0, void 0, function* () {
                const tokenMetadata = yield tokenMetadataView.executeView(tokenId);
                const tokenMap = Object.values(tokenMetadata)[1];
                if (!michelsonEncoder.MichelsonMap.isMichelsonMap(tokenMap)) {
                    throw new TokenMetadataNotFound(this.contractAbstraction.address);
                }
                const metadataFromUri = yield this.fetchTokenMetadataFromUri(tokenMap);
                return this.formatMetadataToken(tokenId, tokenMap, metadataFromUri);
            });
        }
        fetchTokenMetadataFromUri(tokenMetadata) {
            return __awaiter(this, void 0, void 0, function* () {
                const uri = tokenMetadata.get('');
                if (uri) {
                    try {
                        const metadataFromUri = yield this.context.metadataProvider.provideMetadata(this.contractAbstraction, tzip16.bytes2Char(uri), this.context);
                        return metadataFromUri.metadata;
                    }
                    catch (e) {
                        if (e.name === 'InvalidUri') {
                            console.warn(`The URI ${tzip16.bytes2Char(uri)} is present in the token metadata, but is invalid.`);
                        }
                        else {
                            throw e;
                        }
                    }
                }
            });
        }
        formatMetadataToken(tokenId, metadataTokenMap, metadataFromUri) {
            const tokenMetadataDecoded = {
                token_id: tokenId,
            };
            for (const keyTokenMetadata of metadataTokenMap.keys()) {
                if (keyTokenMetadata === 'decimals') {
                    Object.assign(tokenMetadataDecoded, {
                        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                        [keyTokenMetadata]: Number(tzip16.bytes2Char(metadataTokenMap.get(keyTokenMetadata))),
                    });
                }
                else if (!(keyTokenMetadata === '')) {
                    Object.assign(tokenMetadataDecoded, {
                        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                        [keyTokenMetadata]: tzip16.bytes2Char(metadataTokenMap.get(keyTokenMetadata)),
                    });
                }
            }
            // if an URI is present, add the fetched properties to the object
            // if a property is in the URI and the map, prevalence is accorded to value from the URI
            if (metadataFromUri) {
                for (const property in metadataFromUri) {
                    Object.assign(tokenMetadataDecoded, { [property]: metadataFromUri[property] });
                }
            }
            if (!('decimals' in tokenMetadataDecoded)) {
                throw new InvalidTokenMetadata();
            }
            return tokenMetadataDecoded;
        }
        retrieveTokenMetadataFromBigMap(tokenId) {
            return __awaiter(this, void 0, void 0, function* () {
                const bigmapTokenMetadataId = this.findTokenMetadataBigMap();
                let pairNatMap;
                try {
                    pairNatMap = yield this.context.contract.getBigMapKeyByID(bigmapTokenMetadataId['int'].toString(), tokenId.toString(), new michelsonEncoder.Schema(tokenMetadataBigMapType));
                }
                catch (err) {
                    throw new TokenIdNotFound(tokenId);
                }
                const michelsonMap = pairNatMap['token_info'];
                if (!michelsonEncoder.MichelsonMap.isMichelsonMap(michelsonMap)) {
                    throw new TokenIdNotFound(tokenId);
                }
                const metadataFromUri = yield this.fetchTokenMetadataFromUri(michelsonMap);
                return this.formatMetadataToken(tokenId, michelsonMap, metadataFromUri);
            });
        }
        findTokenMetadataBigMap() {
            const tokenMetadataBigMapId = this.contractAbstraction.schema.FindFirstInTopLevelPair(this.contractAbstraction.script.storage, tokenMetadataBigMapType);
            if (!tokenMetadataBigMapId) {
                throw new TokenMetadataNotFound(this.contractAbstraction.address);
            }
            return tokenMetadataBigMapId;
        }
    }

    const ABSTRACTION_KEY = Symbol('Tzip12ContractAbstractionObjectKey');
    function tzip12(abs, context) {
        return Object.assign(abs, {
            // namespace tzip12
            tzip12() {
                if (!this[ABSTRACTION_KEY]) {
                    this[ABSTRACTION_KEY] = new Tzip12ContractAbstraction(this, context);
                }
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                return this[ABSTRACTION_KEY];
            },
        });
    }

    // The same default metadataProvider is used for tzip16 and tzip12
    class Tzip12Module {
        constructor(metadataProvider) {
            this._metadataProvider = metadataProvider ? metadataProvider : new tzip16.MetadataProvider(tzip16.DEFAULT_HANDLERS);
        }
        configureContext(context) {
            Object.assign(context, { metadataProvider: this._metadataProvider });
        }
    }

    // IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT OR CHECKIN!
    const VERSION = {
        "commitHash": "81f0a5b103f867f57fbe5d526315c375a3788346",
        "version": "11.2.0"
    };

    exports.InvalidTokenMetadata = InvalidTokenMetadata;
    exports.TokenIdNotFound = TokenIdNotFound;
    exports.TokenMetadataNotFound = TokenMetadataNotFound;
    exports.Tzip12ContractAbstraction = Tzip12ContractAbstraction;
    exports.Tzip12Module = Tzip12Module;
    exports.VERSION = VERSION;
    exports.tzip12 = tzip12;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=taquito-tzip12.umd.js.map
