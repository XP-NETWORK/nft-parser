import { ContractAbstraction, ContractProvider, Wallet } from '@taquito/taquito';
import { MetadataContext } from '@taquito/tzip16';
export interface TokenMetadata {
    token_id: number;
    decimals: number;
    name?: string;
    symbol?: string;
}
export declare class Tzip12ContractAbstraction {
    private contractAbstraction;
    private context;
    private _tzip16ContractAbstraction;
    constructor(contractAbstraction: ContractAbstraction<ContractProvider | Wallet>, context: MetadataContext);
    /**
     * @description Fetches the contract metadata (according to the Tzip-016 standard)
     * @returns An object containing the metadata, the uri, an optional integrity check result and an optional sha256 hash
     * or `Undefined` if the contract has no metadata (non-compliant with Tzip-016)
     */
    private getContractMetadata;
    /**
     * @description The Tzip-016 "interfaces" field MUST be present in the contract metadata. It should contain "TZIP-012[version-info]"
     * @returns True if "interfaces" field is present and contains "TZIP-012", false otherwise
     */
    isTzip12Compliant(): Promise<boolean>;
    /**
     * @description Fetches the token metadata for a specified token ID.
     * The function first tries to find a `token_metadata` view in the contract metadata and to execute it with the token ID.
     * If there is no view, the function tries to find a `token_metadata` bigmap in the top-level pairs of the storage.
     * @param tokenId The ID of the token for which we want to retrieve token metadata
     * @returns An object of type `TokenMetadata`
     */
    getTokenMetadata(tokenId: number): Promise<TokenMetadata>;
    private retrieveTokenMetadataFromView;
    private hasTokenMetadataView;
    private executeTokenMetadataView;
    private fetchTokenMetadataFromUri;
    private formatMetadataToken;
    private retrieveTokenMetadataFromBigMap;
    private findTokenMetadataBigMap;
}
