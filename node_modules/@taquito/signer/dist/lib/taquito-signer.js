"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InMemorySigner = exports.VERSION = void 0;
/**
 * @packageDocumentation
 * @module @taquito/signer
 */
const libsodium_wrappers_1 = require("libsodium-wrappers");
const utils_1 = require("@taquito/utils");
const typedarray_to_buffer_1 = require("typedarray-to-buffer");
const ed_key_1 = require("./ed-key");
const ec_key_1 = require("./ec-key");
const pbkdf2_1 = require("pbkdf2");
const mnemonicToSeedSync_1 = require("./mnemonicToSeedSync");
__exportStar(require("./import-key"), exports);
var version_1 = require("./version");
Object.defineProperty(exports, "VERSION", { enumerable: true, get: function () { return version_1.VERSION; } });
/**
 * @description A local implementation of the signer. Will represent a Tezos account and be able to produce signature in its behalf
 *
 * @warn If running in production and dealing with tokens that have real value, it is strongly recommended to use a HSM backed signer so that private key material is not stored in memory or on disk
 *
 * @warn Calling this constructor directly is discouraged as it do not await for sodium library to be loaded.
 *
 * Consider doing:
 *
 * ```const sodium = require('libsodium-wrappers'); await sodium.ready;```
 *
 * The recommended usage is to use InMemorySigner.fromSecretKey('edsk', 'passphrase')
 */
class InMemorySigner {
    /**
     *
     * @param key Encoded private key
     * @param passphrase Passphrase to decrypt the private key if it is encrypted
     *
     */
    constructor(key, passphrase) {
        const encrypted = key.substring(2, 3) === 'e';
        let decrypt = (k) => k;
        if (encrypted) {
            if (!passphrase) {
                throw new Error('Encrypted key provided without a passphrase.');
            }
            decrypt = (constructedKey) => {
                const salt = typedarray_to_buffer_1.default(constructedKey.slice(0, 8));
                const encryptedSk = constructedKey.slice(8);
                const encryptionKey = pbkdf2_1.default.pbkdf2Sync(passphrase, salt, 32768, 32, 'sha512');
                return libsodium_wrappers_1.default.crypto_secretbox_open_easy(new Uint8Array(encryptedSk), new Uint8Array(24), new Uint8Array(encryptionKey));
            };
        }
        switch (key.substr(0, 4)) {
            case 'edes':
            case 'edsk':
                this._key = new ed_key_1.Tz1(key, encrypted, decrypt);
                break;
            case 'spsk':
            case 'spes':
                this._key = new ec_key_1.Tz2(key, encrypted, decrypt);
                break;
            case 'p2sk':
            case 'p2es':
                this._key = new ec_key_1.Tz3(key, encrypted, decrypt);
                break;
            default:
                throw new Error('Unsupported key type');
        }
    }
    static fromFundraiser(email, password, mnemonic) {
        const seed = mnemonicToSeedSync_1.mnemonicToSeedSync(mnemonic, `${email}${password}`);
        const key = utils_1.b58cencode(seed.slice(0, 32), utils_1.prefix.edsk2);
        return new InMemorySigner(key);
    }
    static fromSecretKey(key, passphrase) {
        return __awaiter(this, void 0, void 0, function* () {
            yield libsodium_wrappers_1.default.ready;
            return new InMemorySigner(key, passphrase);
        });
    }
    /**
     *
     * @param bytes Bytes to sign
     * @param watermark Watermark to append to the bytes
     */
    sign(bytes, watermark) {
        return __awaiter(this, void 0, void 0, function* () {
            let bb = utils_1.hex2buf(bytes);
            if (typeof watermark !== 'undefined') {
                bb = utils_1.mergebuf(watermark, bb);
            }
            // Ensure sodium is ready before calling crypto_generichash otherwise the function do not exists
            yield libsodium_wrappers_1.default.ready;
            const bytesHash = typedarray_to_buffer_1.default(libsodium_wrappers_1.default.crypto_generichash(32, bb));
            return this._key.sign(bytes, bytesHash);
        });
    }
    /**
     * @returns Encoded public key
     */
    publicKey() {
        return __awaiter(this, void 0, void 0, function* () {
            return this._key.publicKey();
        });
    }
    /**
     * @returns Encoded public key hash
     */
    publicKeyHash() {
        return __awaiter(this, void 0, void 0, function* () {
            return this._key.publicKeyHash();
        });
    }
    /**
     * @returns Encoded private key
     */
    secretKey() {
        return __awaiter(this, void 0, void 0, function* () {
            return this._key.secretKey();
        });
    }
}
exports.InMemorySigner = InMemorySigner;
//# sourceMappingURL=taquito-signer.js.map