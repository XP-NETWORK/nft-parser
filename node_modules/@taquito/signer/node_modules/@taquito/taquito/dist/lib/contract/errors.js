"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvalidViewSimulationContext = exports.validateAndExtractFailwith = exports.ViewSimulationError = exports.InvalidViewParameterError = exports.InvalidInitParameter = exports.InvalidCodeParameter = exports.InvalidDelegationSource = exports.UndefinedLambdaContractError = exports.InvalidParameterError = void 0;
class InvalidParameterError extends Error {
    constructor(smartContractMethodName, sigs, args) {
        super(`${smartContractMethodName} Received ${args.length} arguments while expecting one of the following signatures (${JSON.stringify(sigs)})`);
        this.smartContractMethodName = smartContractMethodName;
        this.sigs = sigs;
        this.args = args;
        this.name = 'Invalid parameters error';
    }
}
exports.InvalidParameterError = InvalidParameterError;
class UndefinedLambdaContractError extends Error {
    constructor() {
        super('This might happen if you are using a sandbox. Please provide the address of a lambda contract as a parameter of the read method.');
        this.name = 'Undefined LambdaContract error';
    }
}
exports.UndefinedLambdaContractError = UndefinedLambdaContractError;
class InvalidDelegationSource extends Error {
    constructor(source) {
        super(`Since Babylon delegation source can no longer be a contract address ${source}. Please use the smart contract abstraction to set your delegate.`);
        this.source = source;
        this.name = 'Invalid delegation source error';
    }
}
exports.InvalidDelegationSource = InvalidDelegationSource;
class InvalidCodeParameter extends Error {
    constructor(message, data) {
        super(message);
        this.message = message;
        this.data = data;
        this.name = 'InvalidCodeParameter';
    }
}
exports.InvalidCodeParameter = InvalidCodeParameter;
class InvalidInitParameter extends Error {
    constructor(message, data) {
        super(message);
        this.message = message;
        this.data = data;
        this.name = 'InvalidInitParameter';
    }
}
exports.InvalidInitParameter = InvalidInitParameter;
class InvalidViewParameterError extends Error {
    constructor(smartContractViewName, sigs, args, originalError) {
        super(`Unable to encode the parameter of the view: ${smartContractViewName}. Received ${args} as parameter while expecting one of the following signatures (${JSON.stringify(sigs)})`);
        this.smartContractViewName = smartContractViewName;
        this.sigs = sigs;
        this.args = args;
        this.originalError = originalError;
        this.name = 'Invalid view parameters error';
        this.cause = originalError;
    }
}
exports.InvalidViewParameterError = InvalidViewParameterError;
class ViewSimulationError extends Error {
    constructor(message, viewName, failWith, originalError) {
        super(message);
        this.message = message;
        this.viewName = viewName;
        this.failWith = failWith;
        this.originalError = originalError;
        this.name = 'ViewSimulationError';
    }
}
exports.ViewSimulationError = ViewSimulationError;
const validateAndExtractFailwith = (error) => {
    if (isJsonString(error.body)) {
        const parsedError = JSON.parse(error.body);
        if (Array.isArray(parsedError) && 'with' in parsedError[parsedError.length - 1]) {
            return parsedError[parsedError.length - 1].with;
        }
    }
};
exports.validateAndExtractFailwith = validateAndExtractFailwith;
const isJsonString = (str) => {
    try {
        JSON.parse(str);
    }
    catch (e) {
        return false;
    }
    return true;
};
class InvalidViewSimulationContext extends Error {
    constructor(info) {
        super(`${info} Please configure the context of the view execution in the executeView method.`);
        this.info = info;
        this.name = 'InvalidViewSimulationContext';
    }
}
exports.InvalidViewSimulationContext = InvalidViewSimulationContext;
//# sourceMappingURL=errors.js.map