import { HttpResponseError } from '@taquito/http-utils';
import { MichelsonV1Expression } from '@taquito/rpc';
export declare class InvalidParameterError extends Error {
    smartContractMethodName: string;
    sigs: any[];
    args: any[];
    name: string;
    constructor(smartContractMethodName: string, sigs: any[], args: any[]);
}
export declare class UndefinedLambdaContractError extends Error {
    name: string;
    constructor();
}
export declare class InvalidDelegationSource extends Error {
    source: string;
    name: string;
    constructor(source: string);
}
export declare class InvalidCodeParameter extends Error {
    message: string;
    readonly data: any;
    name: string;
    constructor(message: string, data: any);
}
export declare class InvalidInitParameter extends Error {
    message: string;
    readonly data: any;
    name: string;
    constructor(message: string, data: any);
}
export declare class InvalidViewParameterError extends Error {
    smartContractViewName: string;
    sigs: any;
    args: any;
    originalError: any;
    name: string;
    cause: any;
    constructor(smartContractViewName: string, sigs: any, args: any, originalError: any);
}
export declare class ViewSimulationError extends Error {
    message: string;
    viewName: string;
    failWith?: import("@taquito/rpc").MichelsonV1ExpressionBase | import("@taquito/rpc").MichelsonV1ExpressionExtended | MichelsonV1Expression[] | undefined;
    originalError?: any;
    name: string;
    constructor(message: string, viewName: string, failWith?: import("@taquito/rpc").MichelsonV1ExpressionBase | import("@taquito/rpc").MichelsonV1ExpressionExtended | MichelsonV1Expression[] | undefined, originalError?: any);
}
export declare const validateAndExtractFailwith: (error: HttpResponseError) => MichelsonV1Expression | undefined;
export declare class InvalidViewSimulationContext extends Error {
    info: string;
    name: string;
    constructor(info: string);
}
