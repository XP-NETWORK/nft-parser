"use strict";
/**
 * @packageDocumentation
 * @module @taquito/http-utils
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpBackend = exports.HttpRequestFailed = exports.HttpResponseError = exports.VERSION = void 0;
const isNode = typeof process !== 'undefined' && process.versions != null && process.versions.node != null;
const XMLHttpRequestCTOR = isNode ? require('xhr2-cookies').XMLHttpRequest : XMLHttpRequest;
__exportStar(require("./status_code"), exports);
var version_1 = require("./version");
Object.defineProperty(exports, "VERSION", { enumerable: true, get: function () { return version_1.VERSION; } });
const defaultTimeout = 30000;
class HttpResponseError extends Error {
    constructor(message, status, statusText, body, url) {
        super(message);
        this.message = message;
        this.status = status;
        this.statusText = statusText;
        this.body = body;
        this.url = url;
        this.name = 'HttpResponse';
    }
}
exports.HttpResponseError = HttpResponseError;
class HttpRequestFailed extends Error {
    constructor(url, innerEvent) {
        super(`Request to ${url} failed`);
        this.url = url;
        this.innerEvent = innerEvent;
        this.name = 'HttpRequestFailed';
    }
}
exports.HttpRequestFailed = HttpRequestFailed;
class HttpBackend {
    serialize(obj) {
        if (!obj) {
            return '';
        }
        const str = [];
        for (const p in obj) {
            // eslint-disable-next-line no-prototype-builtins
            if (obj.hasOwnProperty(p) && typeof obj[p] !== 'undefined') {
                const prop = typeof obj[p].toJSON === 'function' ? obj[p].toJSON() : obj[p];
                // query arguments can have no value so we need some way of handling that
                // example https://domain.com/query?all
                if (prop === null) {
                    str.push(encodeURIComponent(p));
                    continue;
                }
                // another use case is multiple arguments with the same name
                // they are passed as array
                if (Array.isArray(prop)) {
                    prop.forEach((item) => {
                        str.push(encodeURIComponent(p) + '=' + encodeURIComponent(item));
                    });
                    continue;
                }
                str.push(encodeURIComponent(p) + '=' + encodeURIComponent(prop));
            }
        }
        const serialized = str.join('&');
        if (serialized) {
            return `?${serialized}`;
        }
        else {
            return '';
        }
    }
    createXHR() {
        return new XMLHttpRequestCTOR();
    }
    /**
     *
     * @param options contains options to be passed for the HTTP request (url, method and timeout)
     */
    createRequest({ url, method, timeout, query, headers = {}, json = true, mimeType = undefined, }, data) {
        return new Promise((resolve, reject) => {
            const request = this.createXHR();
            request.open(method || 'GET', `${url}${this.serialize(query)}`);
            if (!headers['Content-Type']) {
                request.setRequestHeader('Content-Type', 'application/json');
            }
            if (mimeType) {
                request.overrideMimeType(`${mimeType}`);
            }
            for (const k in headers) {
                request.setRequestHeader(k, headers[k]);
            }
            request.timeout = timeout || defaultTimeout;
            request.onload = function () {
                if (this.status >= 200 && this.status < 300) {
                    if (json) {
                        try {
                            resolve(JSON.parse(request.response));
                        }
                        catch (ex) {
                            reject(new Error(`Unable to parse response: ${request.response}`));
                        }
                    }
                    else {
                        resolve(request.response);
                    }
                }
                else {
                    reject(new HttpResponseError(`Http error response: (${this.status}) ${request.response}`, this.status, request.statusText, request.response, url));
                }
            };
            request.ontimeout = function () {
                reject(new Error(`Request timed out after: ${request.timeout}ms`));
            };
            request.onerror = function (err) {
                reject(new HttpRequestFailed(url, err));
            };
            if (data) {
                const dataStr = JSON.stringify(data);
                request.send(dataStr);
            }
            else {
                request.send();
            }
        });
    }
}
exports.HttpBackend = HttpBackend;
//# sourceMappingURL=taquito-http-utils.js.map