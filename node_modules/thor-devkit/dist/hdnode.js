"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HDNode = void 0;
const basex_1 = require("@vechain/ethers/utils/basex");
const HD = require("@vechain/ethers/utils/hdnode");
const crypto_1 = require("crypto");
const elliptic_1 = require("elliptic");
const address_1 = require("./address");
// see https://github.com/satoshilabs/slips/blob/master/slip-0044.md
const VET_DERIVATION_PATH = `m/44'/818'/0'/0`;
const xpubPrefix = Buffer.from('0488b21e000000000000000000', 'hex');
const xprivPrefix = Buffer.from('0488ade4000000000000000000', 'hex');
const curve = new elliptic_1.ec('secp256k1');
var HDNode;
(function (HDNode) {
    /** create node from mnemonic words */
    function fromMnemonic(words) {
        // normalize words to lowercase
        const joinedWords = words.join(' ').toLowerCase();
        const node = HD.fromMnemonic(joinedWords).derivePath(VET_DERIVATION_PATH);
        return createHDNode(node);
    }
    HDNode.fromMnemonic = fromMnemonic;
    /**
     * create node from xpub
     * @param pub public key
     * @param chainCode chain code
     */
    function fromPublicKey(pub, chainCode) {
        const compressed = curve.keyFromPublic(pub).getPublic(true, 'array');
        const key = Buffer.concat([xpubPrefix, chainCode, Buffer.from(compressed)]);
        const checksum = sha256(sha256(key)).slice(0, 4);
        const node = HD.fromExtendedKey(basex_1.Base58.encode(Buffer.concat([key, checksum])));
        return createHDNode(node);
    }
    HDNode.fromPublicKey = fromPublicKey;
    /**
     * create node from xpriv
     * @param priv private key
     * @param chainCode chain code
     */
    function fromPrivateKey(priv, chainCode) {
        const key = Buffer.concat([xprivPrefix, chainCode, Buffer.from([0]), priv]);
        const checksum = sha256(sha256(key)).slice(0, 4);
        const node = HD.fromExtendedKey(basex_1.Base58.encode(Buffer.concat([key, checksum])));
        return createHDNode(node);
    }
    HDNode.fromPrivateKey = fromPrivateKey;
    function createHDNode(ethersNode) {
        const pub = Buffer.from(curve.keyFromPublic(ethersNode.publicKey.slice(2), 'hex').getPublic(false, 'array'));
        const priv = ethersNode.privateKey ? Buffer.from(ethersNode.privateKey.slice(2), 'hex') : null;
        const cc = Buffer.from(ethersNode.chainCode.slice(2), 'hex');
        const addr = address_1.address.fromPublicKey(pub);
        return {
            get publicKey() {
                return pub;
            },
            get privateKey() {
                return priv;
            },
            get chainCode() {
                return cc;
            },
            get address() {
                return addr;
            },
            derive(index) {
                return createHDNode(ethersNode.derivePath('' + index));
            }
        };
    }
    function sha256(data) {
        return crypto_1.createHash('sha256').update(data).digest();
    }
})(HDNode = exports.HDNode || (exports.HDNode = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGRub2RlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2hkbm9kZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx1REFBb0Q7QUFDcEQsbURBQWtEO0FBQ2xELG1DQUFtQztBQUNuQyx1Q0FBbUM7QUFDbkMsdUNBQW1DO0FBRW5DLG9FQUFvRTtBQUNwRSxNQUFNLG1CQUFtQixHQUFHLGlCQUFpQixDQUFBO0FBQzdDLE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsNEJBQTRCLEVBQUUsS0FBSyxDQUFDLENBQUE7QUFDbkUsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyw0QkFBNEIsRUFBRSxLQUFLLENBQUMsQ0FBQTtBQUNwRSxNQUFNLEtBQUssR0FBRyxJQUFJLGFBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQTtBQVdqQyxJQUFpQixNQUFNLENBZ0V0QjtBQWhFRCxXQUFpQixNQUFNO0lBQ25CLHNDQUFzQztJQUN0QyxTQUFnQixZQUFZLENBQUMsS0FBZTtRQUN4QywrQkFBK0I7UUFDL0IsTUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtRQUNqRCxNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBO1FBQ3pFLE9BQU8sWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQzdCLENBQUM7SUFMZSxtQkFBWSxlQUszQixDQUFBO0lBRUQ7Ozs7T0FJRztJQUNILFNBQWdCLGFBQWEsQ0FBQyxHQUFXLEVBQUUsU0FBaUI7UUFDeEQsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFBO1FBQ3BFLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENB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