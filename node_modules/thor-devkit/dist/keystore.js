"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Keystore = void 0;
const SecretStorage = require("@vechain/ethers/utils/secret-storage");
var Keystore;
(function (Keystore) {
    /**
     * encrypt private key to keystore with given password
     * @param privateKey the private key to be encrypted
     * @param password password to encrypt the private key
     */
    function encrypt(privateKey, password) {
        return SecretStorage.encrypt('0x' + privateKey.toString('hex'), password, {
            scrypt: {
                N: 131072,
                p: 1,
                r: 8
            }
        }).then(str => normalize(JSON.parse(str)));
    }
    Keystore.encrypt = encrypt;
    /**
     * decrypt private key from keystore
     * an error thrown if not well formed
     * @param ks the keystore
     * @param password password to decrypt keystore
     */
    function decrypt(ks, password) {
        return SecretStorage.decrypt(JSON.stringify(ks), password)
            .then(sk => Buffer.from(sk.privateKey.slice(2), 'hex'));
    }
    Keystore.decrypt = decrypt;
    /**
     * roughly check whether keystore is well formed
     * @param ks the keystore
     */
    function wellFormed(ks) {
        try {
            validate(normalize(ks));
            return true;
        }
        catch (_a) {
            return false;
        }
    }
    Keystore.wellFormed = wellFormed;
    /** normalize keystore. e.g. lower case keys */
    function normalize(obj) {
        const lowerKey = (o) => {
            return Object.keys(o).reduce((converted, k) => {
                let v = o[k];
                if (typeof v === 'object') {
                    v = lowerKey(v);
                }
                converted[k.toLowerCase()] = v;
                return converted;
            }, {});
        };
        return lowerKey(obj);
    }
    function validate(ks) {
        if (ks.version !== 1 && ks.version !== 3) {
            throw new Error('unsupported version');
        }
        if (!/^[0-9a-f]{40}$/i.test(ks.address)) {
            throw new Error('invalid address');
        }
        if (!/^[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}$/i.test(ks.id)) {
            throw new Error('invalid id');
        }
        if (typeof ks.crypto !== 'object') {
            throw new Error('invalid crypto');
        }
        return ks;
    }
})(Keystore = exports.Keystore || (exports.Keystore = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5c3RvcmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMva2V5c3RvcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsc0VBQXFFO0FBVXJFLElBQWlCLFFBQVEsQ0F3RXhCO0FBeEVELFdBQWlCLFFBQVE7SUFDckI7Ozs7T0FJRztJQUNILFNBQWdCLE9BQU8sQ0FBQyxVQUFrQixFQUFFLFFBQWdCO1FBQ3hELE9BQU8sYUFBYSxDQUFDLE9BQU8sQ0FDeEIsSUFBSSxHQUFHLFVBQVUsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQ2pDLFFBQVEsRUFBRTtZQUNWLE1BQU0sRUFBRTtnQkFDSixDQUFDLEVBQUUsTUFBTTtnQkFDVCxDQUFDLEVBQUUsQ0FBQztnQkFDSixDQUFDLEVBQUUsQ0FBQzthQUNQO1NBQ0osQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUM5QyxDQUFDO0lBVmUsZ0JBQU8sVUFVdEIsQ0FBQTtJQUVEOzs7OztPQUtHO0lBQ0gsU0FBZ0IsT0FBTyxDQUFDLEVBQVksRUFBRSxRQUFnQjtRQUNsRCxPQUFPLGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsRUFBRSxRQUFRLENBQUM7YUFDckQsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFBO0lBQy9ELENBQUM7SUFIZSxnQkFBTyxVQUd0QixDQUFBO0lBRUQ7OztPQUdHO0lBQ0gsU0FBZ0IsVUFBVSxDQUFDLEVBQU87UUFDOUIsSUFBSTtZQUNBLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtZQUN2QixPQUFPLElBQUksQ0FBQTtTQUNkO1FBQUMsV0FBTTtZQUNKLE9BQU8sS0FBSyxDQUFBO1NBQ2Y7SUFDTCxDQUFDO0lBUGUsbUJBQVUsYUFPekIsQ0FBQTtJQUVELCtDQUErQztJQUMvQyxTQUFTLFNBQVMsQ0FBQyxHQUFXO1FBQzFCLE1BQU0sUUFBUSxHQUFHLENBQUMsQ0FBUyxFQUFFLEVBQUU7WUFDM0IsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDMUMsSUFBSSxDQUFDLEdBQUksQ0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFBO2dCQUNyQixJQUFJLE9BQU8sQ0FBQyxLQUFLLFFBQVEsRUFBRTtvQkFDdkIsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQTtpQkFDbEI7Z0JBQ0QsU0FBUyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQTtnQkFDOUIsT0FBTyxTQUFTLENBQUE7WUFDcEIsQ0FBQyxFQUFFLEVBQVMsQ0FBQyxDQUFBO1FBQ2pCLENBQUMsQ0FBQTtRQUNELE9BQU8sUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ3hCLENBQUM7SUFFRCxTQUFTLFFBQVEsQ0FBQyxFQUFZO1FBQzFCLElBQUksRUFBRSxDQUFDLE9BQU8sS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLE9BQU8sS0FBSyxDQUFDLEVBQUU7WUFDdEMsTUFBTSxJQUFJLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxDQUFBO1NBQ3pDO1FBQ0QsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDckMsTUFBTSxJQUFJLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO1NBQ3JDO1FBQ0QsSUFBSSxDQUFDLGlFQUFpRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDaEYsTUFBTSxJQUFJLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQTtTQUNoQztRQUNELElBQUksT0FBTyxFQUFFLENBQUMsTUFBTSxLQUFLLFFBQVEsRUFBRTtZQUMvQixNQUFNLElBQUksS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUE7U0FDcEM7UUFDRCxPQUFPLEVBQUUsQ0FBQTtJQUNiLENBQUM7QUFDTCxDQUFDLEVBeEVnQixRQUFRLEdBQVIsZ0JBQVEsS0FBUixnQkFBUSxRQXdFeEIifQ==