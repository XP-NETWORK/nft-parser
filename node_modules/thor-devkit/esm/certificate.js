import { address } from './address';
import { blake2b256 } from './blake2b';
import { secp256k1 } from './secp256k1';
const fastJsonStableStringify = require('fast-json-stable-stringify');
export var Certificate;
(function (Certificate) {
    function safeToLowerCase(str) {
        return typeof str === 'string' ? str.toLowerCase() : str;
    }
    /**
     * deterministically encode cert into JSON
     * @param cert cert object
     */
    function encode(cert) {
        return fastJsonStableStringify(Object.assign(Object.assign({}, cert), { signer: safeToLowerCase(cert.signer), signature: cert.signature ? safeToLowerCase(cert.signature) : cert.signature }));
    }
    Certificate.encode = encode;
    /**
     * verify the cert
     * @param cert cert object with signature
     */
    function verify(cert) {
        if (!cert.signature) {
            throw new Error('signature missing');
        }
        const signature = cert.signature;
        if (!/^0x[0-9a-f]+$/i.test(signature) || signature.length % 2 !== 0) {
            throw new Error('invalid signature');
        }
        const encoded = encode(Object.assign(Object.assign({}, cert), { signature: undefined }));
        const signingHash = blake2b256(encoded);
        const pubKey = secp256k1.recover(signingHash, Buffer.from(signature.slice(2), 'hex'));
        if (address.fromPublicKey(pubKey) !== safeToLowerCase(cert.signer)) {
            throw new Error('signature does not match with signer');
        }
    }
    Certificate.verify = verify;
})(Certificate || (Certificate = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2VydGlmaWNhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvY2VydGlmaWNhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFdBQVcsQ0FBQTtBQUNuQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sV0FBVyxDQUFBO0FBQ3RDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxhQUFhLENBQUE7QUFFdkMsTUFBTSx1QkFBdUIsR0FBRyxPQUFPLENBQUMsNEJBQTRCLENBQUMsQ0FBQTtBQW1CckUsTUFBTSxLQUFXLFdBQVcsQ0FzQzNCO0FBdENELFdBQWlCLFdBQVc7SUFDeEIsU0FBUyxlQUFlLENBQUMsR0FBVztRQUNoQyxPQUFPLE9BQU8sR0FBRyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUE7SUFDNUQsQ0FBQztJQUNEOzs7T0FHRztJQUNILFNBQWdCLE1BQU0sQ0FBQyxJQUFpQjtRQUNwQyxPQUFPLHVCQUF1QixpQ0FDdkIsSUFBSSxLQUNQLE1BQU0sRUFBRSxlQUFlLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUNwQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsSUFDcEUsQ0FBQTtJQUNoQixDQUFDO0lBTmUsa0JBQU0sU0FNckIsQ0FBQTtJQUVEOzs7T0FHRztJQUNILFNBQWdCLE1BQU0sQ0FBQyxJQUFpQjtRQUNwQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNqQixNQUFNLElBQUksS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUE7U0FDdkM7UUFDRCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFBO1FBQ2hDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ2pFLE1BQU0sSUFBSSxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQTtTQUN2QztRQUVELE1BQU0sT0FBTyxHQUFHLE1BQU0saUNBQU0sSUFBSSxLQUFFLFNBQVMsRUFBRSxTQUFTLElBQUcsQ0FBQTtRQUN6RCxNQUFNLFdBQVcsR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUE7UUFFdkMsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUE7UUFFckYsSUFBSSxPQUFPLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxLQUFLLGVBQWUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDaEUsTUFBTSxJQUFJLEtBQUssQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFBO1NBQzFEO0lBQ0wsQ0FBQztJQWpCZSxrQkFBTSxTQWlCckIsQ0FBQTtBQUNMLENBQUMsRUF0Q2dCLFdBQVcsS0FBWCxXQUFXLFFBc0MzQiJ9