/**
 * The base class for `erdjs` exceptions (errors).
 */
export declare class Err extends Error {
    inner: Error | undefined;
    constructor(message: string, inner?: Error);
    /**
     * Returns a pretty, friendly summary for the error or for the chain of errros (if appropriate).
     */
    summary(): any[];
}
/**
 * Signals invalid arguments for a function, for an operation.
 */
export declare class ErrInvalidArgument extends Err {
    constructor(message: string, inner?: Error);
}
/**
 * Signals an unsupported operation.
 */
export declare class ErrUnsupportedOperation extends Err {
    constructor(operation: string, reason?: string);
}
/**
 * Signals the provisioning of objects of unexpected (bad) types.
 */
export declare class ErrBadType extends Err {
    constructor(name: string, type: any, value?: any);
}
/**
 * Signals that an invariant failed.
 */
export declare class ErrInvariantFailed extends Err {
    constructor(message: string);
}
/**
 * Signals an unexpected condition.
 */
export declare class ErrUnexpectedCondition extends Err {
    constructor(message: string);
}
/**
 * Signals issues with {@link Address} instantiation.
 */
export declare class ErrAddressCannotCreate extends Err {
    constructor(input: any, inner?: Error);
}
/**
 * Signals issues with the HRP of an {@link Address}.
 */
export declare class ErrAddressBadHrp extends Err {
    constructor(expected: string, got: string);
}
/**
 * Signals the presence of an empty / invalid address.
 */
export declare class ErrAddressEmpty extends Err {
    constructor();
}
/**
 * Signals an invalid value for {@link GasLimit} objects.
 */
export declare class ErrNotEnoughGas extends Err {
    constructor(value: number);
}
/**
 * Signals an invalid value for {@link Nonce} objects.
 */
export declare class ErrNonceInvalid extends Err {
    constructor(value: number);
}
/**
 * Signals an invalid value for {@link TransactionVersion} objects.
 */
export declare class ErrTransactionVersionInvalid extends Err {
    constructor(value: number);
}
/**
 * Signals an invalid value for {@link TransactionOptions} objects.
 */
export declare class ErrTransactionOptionsInvalid extends Err {
    constructor(value: number);
}
/**
 * Signals an error related to signing a message (a transaction).
 */
export declare class ErrSignatureCannotCreate extends Err {
    constructor(input: any, inner?: Error);
}
/**
 * Signals an invalid value for the name of a {@link ContractFunction}.
 */
export declare class ErrInvalidFunctionName extends Err {
    constructor();
}
/**
 * Signals a failed operation, since the Timer is already running.
 */
export declare class ErrAsyncTimerAlreadyRunning extends Err {
    constructor();
}
/**
 * Signals a failed operation, since the Timer has been aborted.
 */
export declare class ErrAsyncTimerAborted extends Err {
    constructor();
}
/**
 * Signals a timout for a {@link TransactionWatcher}.
 */
export declare class ErrTransactionWatcherTimeout extends Err {
    constructor();
}
/**
 * Signals an issue related to waiting for a specific {@link TransactionStatus}.
 */
export declare class ErrExpectedTransactionStatusNotReached extends Err {
    constructor();
}
/**
 * Signals an issue related to waiting for specific transaction events.
 */
export declare class ErrExpectedTransactionEventsNotFound extends Err {
    constructor();
}
/**
 * Signals a generic error in the context of Smart Contracts.
 */
export declare class ErrContract extends Err {
    constructor(message: string);
}
export declare class ErrContractHasNoAddress extends ErrContract {
    constructor();
}
/**
 * Signals an error thrown by the mock-like test objects.
 */
export declare class ErrMock extends Err {
    constructor(message: string);
}
/**
 * Signals a generic type error.
 */
export declare class ErrTypingSystem extends Err {
    constructor(message: string);
}
/**
 * Signals a usage error related to "contract.methods" vs. "contract.methodsExplicit".
 */
export declare class ErrTypeInferenceSystemRequiresRegularJavascriptObjects extends ErrTypingSystem {
    constructor(index: number);
}
/**
 * Signals a missing field on a struct.
 */
export declare class ErrMissingFieldOnStruct extends Err {
    constructor(fieldName: string, structName: string);
}
/**
 * Signals a missing field on an enum.
 */
export declare class ErrMissingFieldOnEnum extends Err {
    constructor(fieldName: string, enumName: string);
}
/**
 * Signals an error when parsing the contract results.
 */
export declare class ErrCannotParseContractResults extends Err {
    constructor(details: string);
}
/**
 * Signals a generic codec (encode / decode) error.
 */
export declare class ErrCodec extends Err {
    constructor(message: string);
}
/**
 * Signals a generic contract interaction error.
 */
export declare class ErrContractInteraction extends Err {
    constructor(message: string);
}
/**
 * Signals that a method is not yet implemented
 */
export declare class ErrNotImplemented extends Err {
    constructor();
}
