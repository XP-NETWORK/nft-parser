{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"@babel/runtime/helpers/asyncToGenerator\"","webpack:///external \"@babel/runtime/helpers/classCallCheck\"","webpack:///external \"@babel/runtime/helpers/createClass\"","webpack:///external \"@babel/runtime/helpers/defineProperty\"","webpack:///external \"injectpromise\"","webpack:///external \"ethers\"","webpack:///external \"@babel/runtime/helpers/typeof\"","webpack:///external \"@babel/runtime/helpers/toConsumableArray\"","webpack:///external \"@babel/runtime/helpers/slicedToArray\"","webpack:///external \"bignumber.js\"","webpack:///external \"@babel/runtime/helpers/assertThisInitialized\"","webpack:///external \"semver\"","webpack:///external \"elliptic\"","webpack:///external \"@babel/runtime/helpers/getPrototypeOf\"","webpack:///external \"@babel/runtime/helpers/inherits\"","webpack:///external \"@babel/runtime/helpers/possibleConstructorReturn\"","webpack:///external \"axios\"","webpack:///external \"validator\"","webpack:///external \"eventemitter3\"","webpack:///external \"querystring\"","webpack:///./src/utils/base64.js","webpack:///./src/utils/bytes.js","webpack:///./src/utils/address.js","webpack:///./src/utils/code.js","webpack:///./src/utils/base58.js","webpack:///./src/utils/ethersUtils.js","webpack:///./src/utils/crypto.js","webpack:///./src/utils/accounts.js","webpack:///./src/utils/abi.js","webpack:///./src/utils/index.js","webpack:///./src/lib/providers/index.js","webpack:///./src/lib/providers/HttpProvider.js","webpack:///./src/lib/transactionBuilder.js","webpack:///./src/paramValidator/index.js","webpack:///./src/lib/trx.js","webpack:///./src/lib/contract/method.js","webpack:///./src/lib/contract/index.js","webpack:///./src/lib/plugin.js","webpack:///./src/lib/event.js","webpack:///./src/lib/sidechain.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","Base64","this","_keyStr","encode","input","chr1","chr2","chr3","enc1","enc2","enc3","enc4","output","length","charCodeAt","isNaN","charAt","encodeIgnoreUtf8","inputBytes","decode","replace","indexOf","String","fromCharCode","_utf8_decode","decodeToByteArray","_out2ByteArray","utftext","byteArray","Array","_utf8_encode","string","c2","c3","byte2hexStr","byte","Error","str","bytesToString","arr","one","toString","v","match","bytesLength","store","slice","st","parseInt","hextoString","hex","split","out","tmp","byteArray2hexStr","base64DecodeFromString","string64","base64EncodeToString","bytes","ADDRESS_PREFIX_REGEX","bin2String","array","arrayEquals","array1","array2","strict","JSON","stringify","stringToBytes","len","push","hexChar2byte","isHexChar","hexStr2byteArray","j","k","strToDate","test","tempStrs","dateStrs","year","month","day","timeStrs","hour","minute","second","Date","isNumber","getStringType","ALPHABET","ALPHABET_MAP","encode58","buffer","digits","carry","reverse","map","digit","join","decode58","keccak256","utils","sha256","toUtf8Bytes","toUtf8String","recoverAddress","SigningKey","AbiCoder","Interface","FormatTypes","arrayify","getBase58CheckAddress","addressBytes","hash0","SHA256","checkSum","concat","decodeBase58Address","base58Sting","address","offset","checkSum1","signTransaction","priKeyBytes","transaction","signature","ECKeySign","txID","isArray","includes","arrayToBase64String","a","btoa","signBytes","privateKey","contents","getRowBytesFromTransactionBase64","base64Data","bytesDecode","proto","protocol","Transaction","deserializeBinary","getRawData","serializeBinary","genPriKey","priKeyHex","EC","genKeyPair","getPrivate","computeAddress","pubBytes","substring","getAddressFromPriKey","getPubKeyFromPriKey","decode58Check","addressStr","decodeCheck","decodeData","hash1","isAddressValid","base58Str","getBase58CheckAddressFromPriKeyBase64String","priKeyBase64String","getHexStrAddressFromPriKeyBase64String","getAddressFromPriKeyBase64String","pubkey","keyFromPrivate","getPublic","x","y","xHex","yHex","hashBytes","sign","id","recoveryParam","rHex","sHex","msgBytes","msgHex","passwordToAddress","password","pkToAddress","com_priKeyBytes","com_addressBytes","generateAccount","pubKeyBytes","publicKey","base58","abiCoder","_addressToHex","TronWeb","toHex","deepCopy","target","_array","newTarget","keys","forEach","_isBigNumber","decodeParams","names","types","ignoreMethodHash","type","reduce","obj","arg","index","substr","toLowerCase","encodeParams","values","extractSize","size","extractArrayDim","encodeParamsV2ByABI","funABI","args","buildFullTypeDefinition","typeDef","components","innerTypes","innerType","convertAddresses","addrArr","addrs","mapTuple","dimension","encodeArgs","inputs","convertTypes","decodeParamsV2ByABI","data","decodeResult","buildFullTypeNameDefinition","outputs","result","outputTypes","convertTypeNames","Uint8Array","decodeResCopy","isValidURL","url","validator","isURL","protocols","require_tld","isObject","isJson","parse","ex","isBoolean","bool","isBigNumber","number","BigNumber","constructor","isString","isFunction","isHex","isInteger","Number","hasProperty","hasProperties","properties","mapEvent","event","block","block_number","timestamp","block_timestamp","contract","contract_address","event_name","transaction_id","resourceNode","resource_Node","_unconfirmed","unconfirmed","_fingerprint","fingerprint","parseEvent","abi","padLeft","padding","amount","res","isNotNullOrUndefined","val","sleep","millis","Promise","resolve","setTimeout","code","accounts","crypto","ethersUtils","HttpProvider","host","timeout","user","headers","statusPage","instance","axios","baseURL","auth","request","then","payload","method","params","self","Validator","tronWeb","param","msg","callback","Function","normalized","no","gt","lt","gte","lte","optional","se","isAddress","notPositive","notEqual","invalid","fromUtf8","resultManager","message","toUtf8","TransactionBuilder","injectPromise","injectpromise","to","from","defaultAddress","options","sendTrx","notValid","to_address","owner_address","permissionId","Permission_id","fullNode","err","tokenID","sendToken","asset_name","issuerAddress","buyer","purchaseToken","duration","resource","receiverAddress","undefined","freezeBalance","frozen_balance","frozen_duration","receiver_address","unfreezeBalance","withdrawBlockRewards","applyForSR","votes","voterAddress","vote","entries","srAddress","voteCount","vote_address","vote_count","createSmartContract","feeLimit","userFeePercentage","originEnergyLimit","callValue","tokenValue","tokenId","token_id","bytecode","parameters","entrys","payable","some","func","stateMutability","rawParameter","funcABIV2","parametersV2","constructorParams","find","it","fee_limit","call_value","consume_user_resource_percent","origin_energy_limit","parameter","call_token_value","splice","_triggerSmartContract","_isConstant","triggerSmartContract","confirmed","contractAddress","functionSelector","assign","shieldedParameter","function_selector","ownerAddress","clearABI","trx","cache","contracts","brokerage","updateBrokerage","createToken","abbreviation","description","totalSupply","trxRatio","tokenRatio","saleStart","now","saleEnd","freeBandwidth","freeBandwidthLimit","frozenAmount","frozenDuration","voteScore","precision","abbr","total_supply","trx_num","num","start_time","end_time","free_asset_net_limit","public_free_asset_net_limit","frozen_supply","frozen_amount","frozen_days","vote_score","accountName","updateAccount","account_name","accountId","setAccountId","startsWith","account_id","updateToken","new_limit","new_public_limit","createProposal","proposalID","deleteProposal","proposal_id","isApproval","voteProposal","is_add_approval","tokenName","tokenBalance","trxBalance","createTRXExchange","first_token_id","first_token_balance","second_token_id","second_token_balance","resources","firstTokenName","firstTokenBalance","secondTokenName","secondTokenBalance","createTokenExchange","exchangeID","tokenAmount","injectExchangeTokens","exchange_id","quant","withdrawExchangeTokens","tokenAmountSold","tokenAmountExpected","tradeExchangeTokens","fromAscii","expected","updateSetting","updateEnergyLimit","permissions","permission_name","threshold","weight","operations","ownerPermissions","witnessPermissions","activesPermissions","updateAccountPermissions","checkPermissions","activesPermission","owner","witness","actives","newTxID","newTransaction","visible","alterTransaction","dataFormat","raw_data","extension","expiration","extendExpiration","addUpdateData","Trx","token","getCurrentBlock","getConfirmedCurrentBlock","solidityNode","defaultBlock","getBlockByHash","getBlockByNumber","getBlock","blockHash","blockID","getBlockTransactionCount","transactions","getTransactionFromBlock","transactionID","getTransaction","getConfirmedTransaction","_getTransactionInfoById","limit","getTransactionsRelated","getTransactionsToAddress","getTransactionsFromAddress","direction","all","tx","sort","b","account","getAccount","getAccountById","getAccountInfoById","getBalance","balance","getUnconfirmedAccount","getUnconfirmedAccountById","getUnconfirmedBalance","freeNetUsed","freeNetLimit","NetUsed","NetLimit","getBandwidth","assetIssue","tokens","_parseToken","getTokensIssuedByAddress","getTokenFromID","listNodes","nodes","port","start","end","startNum","endNum","getBlockRange","listSuperRepresentatives","witnesses","listTokens","timeUntilNextVoteCycle","Math","floor","getContract","useTronHeader","verifyMessage","verifySignature","defaultPrivateKey","multisig","signatureHex","signString","fromPrivateKey","multiSign","getSignWeight","signWeight","foundKey","permission","approved_list","getApprovedList","signedTransaction","sendRawTransaction","signedHexTransaction","sendHexTransaction","hexTransaction","sendTransaction","transactionBuilder","proposal","getProposal","listProposals","proposals","getChainParameters","chainParameter","getAccountResources","exchange","getExchangeByID","listExchanges","exchanges","listExchangesPaginated","getNodeInfo","info","getTokenListByName","getTokenByID","_getReward","_getBrokerage","reward","messageBytes","messageDigest","recovered","tronAddress","base58Address","fromHex","toHexString","signingKey","signDigest","decodeOutput","Method","iface","getEvent","format","sighash","getFunction","getFunctionSelector","sha3","defaultOptions","shouldPollResponse","_call","send","_send","watch","_watch","deployed","constant_result","msg2","chunk","broadcast","error","checkResult","getTransactionInfo","resMessage","rawResponse","decoded","contractResult","keepTxID","eventServer","listener","lastBlock","since","getEvents","eventName","blockNumber","filters","onlyUnconfirmed","onlyConfirmed","getEventsByContractAddress","events","latestEvent","newEvents","filter","priorEvent","reject","bindListener","clearInterval","setInterval","stop","Contract","eventListener","methods","methodInstances","props","loadAbi","eventCallback","_getEvents","console","__proto__","prop","methodCall","onMethod","methodName","inputData","decodeInput","at","startCallback","_startEventListener","_stopEventListener","Plugin","pluginNoOverride","disablePlugins","pluginInterface","requires","libs","plugged","skipped","plugin","semver","satisfies","version","fullClass","className","classInstanceName","component","Event","healthcheck","providers","isValidProvider","isConnected","sinceTimestamp","page","fromTimestamp","previousLastEventFingerprint","previousFingerprint","routeParams","warn","qs","only_confirmed","only_unconfirmed","querystring","response","getEventsByTransactionID","SideChain","sideOptions","mainchain","fullHost","mainGatewayAddress","sideGatewayAddress","sideChainId","sidechain","setMainGatewayAddress","setSideGatewayAddress","setChainId","chainId","chainIdByteArr","byteArr","byteArrHash","depositFee","depositTrx","contractInstance","depositTRX","depositTrc10","depositTRC10","fee","depositTrc","approveInstance","approve","depositTRC20","depositTRC721","retryDeposit","retryMapping","trxHash","mappingFee","mappingTrc","mappingTRC20","mappingTRC721","withdrawFee","withdrawTrx","withdrawTRX","withdrawTrc10","withdrawTRC10","numOrId","withdrawTrc","injectFund","hexAddress","nonce","retryWithdrawFee","retryDepositFee","retryMappingFee","eventHeaders","setFullNode","setSolidityNode","setEventServer","setPrivateKey","fullnodeVersion","setFullNodeHeader","setEventHeader","nodeInfo","configNodeInfo","codeVersion","abs","setAddress","emit","provider","knownProvider","setStatusPage","getFullnodeVersion","setServer","currentProviders","prefix","Buffer","fromDecimal","isFinite","padEnd","toBigNumber","toNumber","isLessThan","sun","div","times","EventEmitter"],"mappings":"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","file":"TronWeb.node.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 22);\n","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"@babel/runtime/helpers/asyncToGenerator\");","module.exports = require(\"@babel/runtime/helpers/classCallCheck\");","module.exports = require(\"@babel/runtime/helpers/createClass\");","module.exports = require(\"@babel/runtime/helpers/defineProperty\");","module.exports = require(\"injectpromise\");","module.exports = require(\"ethers\");","module.exports = require(\"@babel/runtime/helpers/typeof\");","module.exports = require(\"@babel/runtime/helpers/toConsumableArray\");","module.exports = require(\"@babel/runtime/helpers/slicedToArray\");","module.exports = require(\"bignumber.js\");","module.exports = require(\"@babel/runtime/helpers/assertThisInitialized\");","module.exports = require(\"semver\");","module.exports = require(\"elliptic\");","module.exports = require(\"@babel/runtime/helpers/getPrototypeOf\");","module.exports = require(\"@babel/runtime/helpers/inherits\");","module.exports = require(\"@babel/runtime/helpers/possibleConstructorReturn\");","module.exports = require(\"axios\");","module.exports = require(\"validator\");","module.exports = require(\"eventemitter3\");","module.exports = require(\"querystring\");","export function Base64() {\n    this._keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n    this.encode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        while (i < input.length) {\n            chr1 = input.charCodeAt(i++);\n            chr2 = input.charCodeAt(i++);\n            chr3 = input.charCodeAt(i++);\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if (isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.encodeIgnoreUtf8 = inputBytes => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        while (i < inputBytes.length) {\n            chr1 = inputBytes[i++];\n            chr2 = inputBytes[i++];\n            chr3 = inputBytes[i++];\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if (isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.decode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = this._keyStr.indexOf(input.charAt(i++));\n            enc2 = this._keyStr.indexOf(input.charAt(i++));\n            enc3 = this._keyStr.indexOf(input.charAt(i++));\n            enc4 = this._keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n\n            if (enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n\n        return this._utf8_decode(output);\n    }\n\n    this.decodeToByteArray = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = this._keyStr.indexOf(input.charAt(i++));\n            enc2 = this._keyStr.indexOf(input.charAt(i++));\n            enc3 = this._keyStr.indexOf(input.charAt(i++));\n            enc4 = this._keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n\n            if (enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n\n        return this._out2ByteArray(output);\n    }\n\n    this._out2ByteArray = utftext => {\n        const byteArray = new Array(utftext.length);\n\n        let i = 0;\n        let c = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n            byteArray[i] = c;\n            i++;\n        }\n\n        return byteArray;\n    }\n\n    this._utf8_encode = string => {\n        string = string.replace(/\\r\\n/g, \"\\n\");\n        let utftext = \"\";\n\n        for (let n = 0; n < string.length; n++) {\n            const c = string.charCodeAt(n);\n\n            if (c < 128) {\n                utftext += String.fromCharCode(c);\n            } else if ((c > 127) && (c < 2048)) {\n                utftext += String.fromCharCode((c >> 6) | 192);\n                utftext += String.fromCharCode((c & 63) | 128);\n            } else {\n                utftext += String.fromCharCode((c >> 12) | 224);\n                utftext += String.fromCharCode(((c >> 6) & 63) | 128);\n                utftext += String.fromCharCode((c & 63) | 128);\n            }\n        }\n\n        return utftext;\n    }\n\n    this._utf8_decode = utftext => {\n        let string = \"\";\n        let i = 0;\n        let c = 0;\n        let c2 = 0;\n        let c3 = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n\n            if (c < 128) {\n                string += String.fromCharCode(c);\n                i++;\n            } else if ((c > 191) && (c < 224)) {\n                c2 = utftext.charCodeAt(i + 1);\n                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n                i += 2;\n            } else {\n                c2 = utftext.charCodeAt(i + 1);\n                c3 = utftext.charCodeAt(i + 2);\n\n                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n\n                i += 3;\n            }\n        }\n\n        return string;\n    }\n}\n","import {Base64} from './base64';\n\nexport function byte2hexStr(byte) {\n    if (typeof byte !== 'number')\n        throw new Error('Input must be a number');\n\n    if (byte < 0 || byte > 255)\n        throw new Error('Input must be a byte');\n\n    const hexByteMap = '0123456789ABCDEF';\n\n    let str = '';\n    str += hexByteMap.charAt(byte >> 4);\n    str += hexByteMap.charAt(byte & 0x0f);\n\n    return str;\n}\n\nexport function bytesToString(arr) {\n    if (typeof arr === 'string')\n        return arr;\n\n    let str = '';\n\n    for (let i = 0; i < arr.length; i++) {\n        const one = arr[i].toString(2);\n        const v = one.match(/^1+?(?=0)/);\n\n        if (v && one.length === 8) {\n            const bytesLength = v[0].length;\n            let store = arr[i].toString(2).slice(7 - bytesLength);\n\n            for (let st = 1; st < bytesLength; st++)\n                store += arr[st + i].toString(2).slice(2);\n\n            str += String.fromCharCode(parseInt(store, 2));\n            i += bytesLength - 1;\n        } else {\n            str += String.fromCharCode(arr[i]);\n        }\n    }\n\n    return str;\n}\n\nexport function hextoString(hex) {\n    const arr = hex.replace(/^0x/, '').split('');\n    let out = '';\n\n    for (let i = 0; i < arr.length / 2; i++) {\n        let tmp = `0x${arr[i * 2]}${arr[i * 2 + 1]}`;\n        out += String.fromCharCode(tmp);\n    }\n\n    return out;\n}\n\nexport function byteArray2hexStr(byteArray) {\n    let str = '';\n\n    for (let i = 0; i < (byteArray.length); i++)\n        str += byte2hexStr(byteArray[i]);\n\n    return str;\n}\n\nexport function base64DecodeFromString(string64) {\n    return new Base64().decodeToByteArray(string64);\n}\n\nexport function base64EncodeToString(bytes) {\n    const b = new Base64();\n    const string64 = b.encodeIgnoreUtf8(bytes);\n\n    return string64\n}\n\n","export const ADDRESS_SIZE = 34;\nexport const ADDRESS_PREFIX = \"41\";\nexport const ADDRESS_PREFIX_BYTE = 0x41;\nexport const ADDRESS_PREFIX_REGEX = /^(41)/;\n","import {\n    byte2hexStr,\n    bytesToString,\n    hextoString,\n    byteArray2hexStr,\n    base64DecodeFromString,\n    base64EncodeToString\n} from './bytes';\n\nexport function bin2String(array) {\n    // TODO Do we need this alias?\n    return bytesToString(array);\n}\n\nexport function arrayEquals(array1, array2, strict) {\n    if (array1.length != array2.length)\n        return false;\n\n    let i;\n\n    for (i = 0; i < array1.length; i++) {\n        if (strict) {\n            if (array1[i] != array2[i])\n                return false;\n        } else if (JSON.stringify(array1[i]) != JSON.stringify(array2[i]))\n            return false;\n    }\n\n    return true;\n}\n\nexport function stringToBytes(str) {\n\n    if (typeof str !== 'string')\n        throw new Error('The passed string is not a string')\n\n    const bytes = new Array();\n    let len;\n    let c;\n\n    len = str.length;\n\n    for (let i = 0; i < len; i++) {\n        c = str.charCodeAt(i);\n\n        if (c >= 0x010000 && c <= 0x10FFFF) {\n            bytes.push(((c >> 18) & 0x07) | 0xF0);\n            bytes.push(((c >> 12) & 0x3F) | 0x80);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if (c >= 0x000800 && c <= 0x00FFFF) {\n            bytes.push(((c >> 12) & 0x0F) | 0xE0);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if (c >= 0x000080 && c <= 0x0007FF) {\n            bytes.push(((c >> 6) & 0x1F) | 0xC0);\n            bytes.push((c & 0x3F) | 0x80);\n        } else bytes.push(c & 0xFF);\n    }\n\n    return bytes;\n}\n\nexport {byte2hexStr, bytesToString, hextoString, byteArray2hexStr, base64DecodeFromString, base64EncodeToString}\n\nexport function hexChar2byte(c) {\n    let d;\n\n    if (c >= 'A' && c <= 'F')\n        d = c.charCodeAt(0) - 'A'.charCodeAt(0) + 10;\n    else if (c >= 'a' && c <= 'f')\n        d = c.charCodeAt(0) - 'a'.charCodeAt(0) + 10;\n    else if (c >= '0' && c <= '9')\n        d = c.charCodeAt(0) - '0'.charCodeAt(0);\n\n    if (typeof d === 'number')\n        return d;\n    else\n        throw new Error('The passed hex char is not a valid hex char');\n}\n\nexport function isHexChar(c) {\n    if ((c >= 'A' && c <= 'F') ||\n        (c >= 'a' && c <= 'f') ||\n        (c >= '0' && c <= '9')) {\n        return 1;\n    }\n\n    return 0;\n}\n\n// set strict as true: if the length of str is odd, add 0 before the str to make its length as even\nexport function hexStr2byteArray(str, strict = false) {\n    if (typeof str !== 'string')\n        throw new Error('The passed string is not a string')\n\n    let len = str.length;\n\n    if (strict) {\n        if (len % 2) {\n            str = `0${str}`;\n            len++;\n        }\n    }\n    const byteArray = Array();\n    let d = 0;\n    let j = 0;\n    let k = 0;\n\n    for (let i = 0; i < len; i++) {\n        const c = str.charAt(i);\n\n        if (isHexChar(c)) {\n            d <<= 4;\n            d += hexChar2byte(c);\n            j++;\n\n            if (0 === (j % 2)) {\n                byteArray[k++] = d;\n                d = 0;\n            }\n        } else\n            throw new Error('The passed hex char is not a valid hex string')\n    }\n\n    return byteArray;\n}\n\n//yyyy-MM-DD HH-mm-ss\nexport function strToDate(str) {\n\n    if (!/^\\d{4}-\\d{2}-\\d{2}( \\d{2}-\\d{2}-\\d{2}|)/.test(str))\n        throw new Error('The passed date string is not valid')\n\n    const tempStrs = str.split(\" \");\n    const dateStrs = tempStrs[0].split(\"-\");\n    const year = parseInt(dateStrs[0], 10);\n    const month = parseInt(dateStrs[1], 10) - 1;\n    const day = parseInt(dateStrs[2], 10);\n\n    if (tempStrs.length > 1) {\n        const timeStrs = tempStrs[1].split(\"-\");\n        const hour = parseInt(timeStrs[0], 10);\n        const minute = parseInt(timeStrs[1], 10);\n        const second = parseInt(timeStrs[2], 10);\n\n        return new Date(year, month, day, hour, minute, second);\n    }\n\n    return new Date(year, month, day);\n}\n\nexport function isNumber(c) {\n    if (c >= '0' && c <= '9')\n        return 1;\n\n    return 0;\n}\n\n//return 1: address  --- 20Bytes HexString\n//return 2: blockNumber ------ Decimal number\n//return 3: assetName ------ String\n//return other: error\nexport function getStringType(str) {\n    if (null == str)\n        return -1;\n\n    if (typeof (str) != 'string')\n        return -1;\n\n    if (str.length == 0 || str == \"\")\n        return -1;\n\n    let i = 0;\n\n    // TODO Should we return 1 if someone passes a full, 42-chars long address?\n    // if (str.length == 42 && /^41/.test(str)) {\n    //     for (; i < 40; i++) {\n    //         var c = str.charAt(i+2);\n    //\n    //         if (!isHexChar(c))\n    //             break;\n    //     }\n    // } else\n    if (str.length == 40) {\n        for (; i < 40; i++) {\n            var c = str.charAt(i);\n\n            if (!isHexChar(c))\n                break;\n        }\n    }\n\n    if (i == 40)\n        return 1; //40 Hex, Address\n\n    for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if (!isNumber(c))\n            break;\n    }\n\n    if (i == str.length)\n        return 2; // All Decimal number, BlockNumber\n\n    for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if (c > ' ')\n            return 3; // At least one visible character\n    }\n\n    return -1;\n}\n","const ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nconst ALPHABET_MAP = {};\n\nfor (let i = 0; i < ALPHABET.length; i++)\n    ALPHABET_MAP[ALPHABET.charAt(i)] = i;\n\nconst BASE = 58;\n\nexport function encode58(buffer) {\n    if (buffer.length === 0)\n        return '';\n\n    let i;\n    let j;\n\n    const digits = [0];\n\n    for (i = 0; i < buffer.length; i++) {\n        for (j = 0; j < digits.length; j++)\n            digits[j] <<= 8;\n\n        digits[0] += buffer[i];\n        let carry = 0;\n\n        for (j = 0; j < digits.length; ++j) {\n            digits[j] += carry;\n            carry = (digits[j] / BASE) | 0;\n            digits[j] %= BASE\n        }\n\n        while (carry) {\n            digits.push(carry % BASE);\n            carry = (carry / BASE) | 0\n        }\n    }\n\n    for (i = 0; buffer[i] === 0 && i < buffer.length - 1; i++)\n        digits.push(0);\n\n    return digits.reverse().map(digit => ALPHABET[digit]).join('');\n}\n\nexport function decode58(string) {\n    if (string.length === 0)\n        return [];\n\n    let i;\n    let j;\n\n    const bytes = [0];\n\n    for (i = 0; i < string.length; i++) {\n        const c = string[i];\n\n        if (!(c in ALPHABET_MAP))\n            throw new Error('Non-base58 character');\n\n        for (j = 0; j < bytes.length; j++)\n            bytes[j] *= BASE;\n\n        bytes[0] += ALPHABET_MAP[c];\n        let carry = 0;\n\n        for (j = 0; j < bytes.length; ++j) {\n            bytes[j] += carry;\n            carry = bytes[j] >> 8;\n            bytes[j] &= 0xff;\n        }\n\n        while (carry) {\n            bytes.push(carry & 0xff);\n            carry >>= 8;\n        }\n    }\n\n    for (i = 0; string[i] === '1' && i < string.length - 1; i++)\n        bytes.push(0);\n\n    return bytes.reverse();\n}\n","import { utils } from \"ethers\";\n\nconst keccak256 = utils.keccak256;\nconst sha256 = utils.sha256;\nconst toUtf8Bytes = utils.toUtf8Bytes;\nconst toUtf8String = utils.toUtf8String;\nconst recoverAddress = utils.recoverAddress;\nconst SigningKey = utils.SigningKey;\nconst AbiCoder = utils.AbiCoder;\nconst Interface = utils.Interface;\nconst FormatTypes = utils.FormatTypes;\nconst arrayify = utils.arrayify;\n\nexport {\n    keccak256,\n    sha256,\n    toUtf8Bytes,\n    toUtf8String,\n    recoverAddress,\n    SigningKey,\n    AbiCoder,\n    Interface,\n    FormatTypes,\n    arrayify\n};\n","import {ADDRESS_PREFIX, ADDRESS_PREFIX_BYTE, ADDRESS_SIZE} from './address';\nimport {base64EncodeToString} from './code';\nimport {base64DecodeFromString, hexStr2byteArray} from './code';\nimport {encode58, decode58} from './base58';\nimport {byte2hexStr, byteArray2hexStr} from './bytes';\nimport {ec as EC} from 'elliptic';\nimport {keccak256, sha256} from './ethersUtils';\n\nexport function getBase58CheckAddress(addressBytes) {\n    const hash0 = SHA256(addressBytes);\n    const hash1 = SHA256(hash0);\n\n    let checkSum = hash1.slice(0, 4);\n    checkSum = addressBytes.concat(checkSum);\n\n    return encode58(checkSum);\n}\n\nexport function decodeBase58Address(base58Sting) {\n    if (typeof (base58Sting) != 'string')\n        return false;\n\n    if (base58Sting.length <= 4)\n        return false;\n\n    let address = decode58(base58Sting);\n\n    if (base58Sting.length <= 4)\n        return false;\n\n    const len = address.length;\n    const offset = len - 4;\n    const checkSum = address.slice(offset);\n\n    address = address.slice(0, offset);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return address;\n    }\n\n    throw new Error('Invalid address provided');\n}\n\nexport function signTransaction(priKeyBytes, transaction) {\n    if (typeof priKeyBytes === 'string')\n        priKeyBytes = hexStr2byteArray(priKeyBytes);\n\n    const txID = transaction.txID;\n    const signature = ECKeySign(hexStr2byteArray(txID), priKeyBytes);\n\n    if (Array.isArray(transaction.signature)) {\n        if (!transaction.signature.includes(signature))\n            transaction.signature.push(signature);\n    } else\n        transaction.signature = [signature];\n    return transaction;\n}\n\nexport function arrayToBase64String(a) {\n    return btoa(String.fromCharCode(...a));\n}\n\nexport function signBytes(privateKey, contents) {\n    if (typeof privateKey === 'string')\n        privateKey = hexStr2byteArray(privateKey);\n\n    const hashBytes = SHA256(contents);\n    const signBytes = ECKeySign(hashBytes, privateKey);\n\n    return signBytes;\n}\n\nexport function getRowBytesFromTransactionBase64(base64Data) {\n    const bytesDecode = base64DecodeFromString(base64Data);\n    const transaction = proto.protocol.Transaction.deserializeBinary(bytesDecode);\n    const raw = transaction.getRawData();\n\n    return raw.serializeBinary();\n}\n\nexport function genPriKey() {\n    const ec = new EC('secp256k1');\n    const key = ec.genKeyPair();\n    const priKey = key.getPrivate();\n\n    let priKeyHex = priKey.toString('hex');\n\n    while (priKeyHex.length < 64) {\n        priKeyHex = `0${priKeyHex}`;\n    }\n\n    return hexStr2byteArray(priKeyHex);\n}\n\nexport function computeAddress(pubBytes) {\n    if (pubBytes.length === 65)\n        pubBytes = pubBytes.slice(1);\n\n    const hash = keccak256(pubBytes).toString().substring(2);\n    const addressHex = ADDRESS_PREFIX + hash.substring(24);\n\n    return hexStr2byteArray(addressHex);\n}\n\nexport function getAddressFromPriKey(priKeyBytes) {\n    let pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    return computeAddress(pubBytes);\n}\n\nexport function decode58Check(addressStr) {\n    const decodeCheck = decode58(addressStr);\n\n    if (decodeCheck.length <= 4)\n        return false;\n\n    const decodeData = decodeCheck.slice(0, decodeCheck.length - 4);\n    const hash0 = SHA256(decodeData);\n    const hash1 = SHA256(hash0);\n\n    if (hash1[0] === decodeCheck[decodeData.length] &&\n        hash1[1] === decodeCheck[decodeData.length + 1] &&\n        hash1[2] === decodeCheck[decodeData.length + 2] &&\n        hash1[3] === decodeCheck[decodeData.length + 3]) {\n        return decodeData;\n    }\n\n    return false;\n}\n\nexport function isAddressValid(base58Str) {\n    if (typeof (base58Str) !== 'string')\n        return false;\n\n    if (base58Str.length !== ADDRESS_SIZE)\n        return false;\n\n    let address = decode58(base58Str);\n\n    if (address.length !== 25)\n        return false;\n\n    if (address[0] !== ADDRESS_PREFIX_BYTE)\n        return false;\n\n    const checkSum = address.slice(21);\n    address = address.slice(0, 21);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return true\n    }\n\n    return false;\n}\n\nexport function getBase58CheckAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n\n    return getBase58CheckAddress(addressBytes);\n}\n\nexport function getHexStrAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressHex = byteArray2hexStr(addressBytes);\n\n    return addressHex;\n}\n\nexport function getAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressBase64 = base64EncodeToString(addressBytes);\n\n    return addressBase64;\n}\n\nexport function getPubKeyFromPriKey(priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const pubkey = key.getPublic();\n    const x = pubkey.x;\n    const y = pubkey.y;\n\n    let xHex = x.toString('hex');\n\n    while (xHex.length < 64) {\n        xHex = `0${xHex}`;\n    }\n\n    let yHex = y.toString('hex');\n\n    while (yHex.length < 64) {\n        yHex = `0${yHex}`;\n    }\n\n    const pubkeyHex = `04${xHex}${yHex}`;\n    const pubkeyBytes = hexStr2byteArray(pubkeyHex);\n\n    return pubkeyBytes;\n}\n\nexport function ECKeySign(hashBytes, priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const signature = key.sign(hashBytes);\n    const r = signature.r;\n    const s = signature.s;\n    const id = signature.recoveryParam;\n\n    let rHex = r.toString('hex');\n\n    while (rHex.length < 64) {\n        rHex = `0${rHex}`;\n    }\n\n    let sHex = s.toString('hex');\n\n    while (sHex.length < 64) {\n        sHex = `0${sHex}`;\n    }\n\n    const idHex = byte2hexStr(id);\n    const signHex = rHex + sHex + idHex;\n\n    return signHex;\n}\n\nexport function SHA256(msgBytes) {\n    const msgHex = byteArray2hexStr(msgBytes);\n    const hashHex = sha256('0x' + msgHex).replace(/^0x/, '')\n    return hexStr2byteArray(hashHex);\n}\n\nexport function passwordToAddress(password) {\n    const com_priKeyBytes = base64DecodeFromString(password);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}\n\nexport function pkToAddress(privateKey, strict = false) {\n    const com_priKeyBytes = hexStr2byteArray(privateKey, strict);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}\n","import {byteArray2hexStr} from './bytes';\nimport {\n    getBase58CheckAddress,\n    genPriKey,\n    getAddressFromPriKey,\n    getPubKeyFromPriKey\n} from './crypto';\n\nexport function generateAccount() {\n    const priKeyBytes = genPriKey();\n    const pubKeyBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = getAddressFromPriKey(priKeyBytes);\n\n    const privateKey = byteArray2hexStr(priKeyBytes);\n    const publicKey = byteArray2hexStr(pubKeyBytes);\n\n    return {\n        privateKey,\n        publicKey,\n        address: {\n            base58: getBase58CheckAddress(addressBytes),\n            hex: byteArray2hexStr(addressBytes)\n        }\n    }\n}\n","import {AbiCoder} from './ethersUtils';\nimport TronWeb from 'index';\nimport {ADDRESS_PREFIX, ADDRESS_PREFIX_REGEX} from 'utils/address';\n\nconst abiCoder = new AbiCoder();\n\nfunction _isArray(_array) {\n    return Array.isArray(_array);\n}\n\nfunction _addressToHex(value) {\n    return TronWeb.address.toHex(value).replace(ADDRESS_PREFIX_REGEX, '0x');\n}\n\nfunction deepCopy(target) {\n    if (\n        Object.prototype.toString.call(target) !== '[object Object]' &&\n        Object.prototype.toString.call(target) !== '[object Array]'\n    ) {\n        return target;\n    }\n    const newTarget = _isArray(target) ? [] : {};\n\n    Object.keys(target).forEach(key =>\n        newTarget[key] = target[key] instanceof Object && !target[key]._isBigNumber ? deepCopy(target[key]) : target[key]\n    );\n\n    return newTarget;\n}\n\nexport function decodeParams(names, types, output, ignoreMethodHash) {\n    if (!output || typeof output === 'boolean') {\n        ignoreMethodHash = output;\n        output = types;\n        types = names;\n        names = [];\n    }\n\n    if (ignoreMethodHash && output.replace(/^0x/, '').length % 64 === 8)\n        output = '0x' + output.replace(/^0x/, '').substring(8);\n\n    if (output.replace(/^0x/, '').length % 64)\n        throw new Error('The encoded string is not valid. Its length must be a multiple of 64.');\n\n    // workaround for unsupported trcToken type\n    types = types.map(type => {\n        if (/trcToken/.test(type)) {\n            type = type.replace(/trcToken/, 'uint256')\n        }\n        return type\n    })\n\n    return abiCoder.decode(types, output).reduce((obj, arg, index) => {\n        if (types[index] == 'address')\n            arg = ADDRESS_PREFIX + arg.substr(2).toLowerCase();\n\n        if (names.length)\n            obj[names[index]] = arg;\n        else obj.push(arg);\n\n        return obj;\n    }, names.length ? {} : []);\n}\n\nexport function encodeParams(types, values) {\n\n    for (let i = 0; i < types.length; i++) {\n        if (types[i] === 'address') {\n            values[i] = TronWeb.address.toHex(values[i]).replace(ADDRESS_PREFIX_REGEX, '0x');\n        }\n    }\n\n    return abiCoder.encode(types, values);\n}\n\nfunction extractSize (type) {\n  const size = type.match(/([a-zA-Z0-9])(\\[.*\\])/);\n  return size ? size[2] : '';\n}\n\nfunction extractArrayDim (type) {\n  const size = extractSize(type)\n  return (size.match(/\\]\\[/g) || []).length + 1;\n}\n\nexport function encodeParamsV2ByABI(funABI, args) {\n    const types = [];\n\n    const buildFullTypeDefinition = (typeDef) => {\n      if (typeDef && typeDef.type.indexOf('tuple') === 0 && typeDef.components) {\n        const innerTypes = typeDef.components.map((innerType) => { return buildFullTypeDefinition(innerType) });\n        return `tuple(${innerTypes.join(',')})${extractSize(typeDef.type)}`;\n      }\n\n      if (/trcToken/.test(typeDef.type))\n        return typeDef.type.replace(/trcToken/, 'uint256');\n\n      return typeDef.type;\n    }\n\n    const convertTypes = (types) => {\n      for (let i = 0; i < types.length; i++) {\n        const type = types[i];\n        if (/trcToken/.test(type))\n          types[i] = type.replace(/trcToken/, 'uint256');\n      }\n    }\n\n    const convertAddresses = addrArr => {\n      if (Array.isArray(addrArr)) {\n        addrArr.forEach((addrs, i) => {\n          addrArr[i] = convertAddresses(addrs);\n        });\n        return addrArr;\n      } else {\n        return _addressToHex(addrArr)\n      }\n    };\n\n    const mapTuple = (components, args, dimension) => {\n      if (dimension > 1) {\n        if (args.length) {\n          args.forEach(arg => {\n            mapTuple(components, arg, dimension - 1);\n          });\n        }\n      } else {\n        if (args.length && dimension) {\n          args.forEach(arg => {\n            encodeArgs(components, arg);\n          });\n        }\n      }\n    };\n\n    const encodeArgs = (inputs = [], args) => {\n      if (inputs.length)\n        inputs.forEach((input, i) => {\n          const type = input.type;\n\n          if (args[i])\n            if (type === 'address') args[i] = _addressToHex(args[i]);\n            else if (type.match(/^([^\\x5b]*)(\\x5b|$)/)[0] === 'address[')\n              convertAddresses(args[i])\n            else if (type.indexOf('tuple') === 0)\n              if (extractSize(type)) {\n                const dimension = extractArrayDim(type);\n                mapTuple(input.components, args[i], dimension);\n              } else encodeArgs(input.components, args[i]);\n        });\n    };\n\n    if (funABI.inputs && funABI.inputs.length) {\n      for (let i = 0; i < funABI.inputs.length; i++) {\n        const type = funABI.inputs[i].type;\n        // \"false\" will be converting to `false` and \"true\" will be working\n        // fine as abiCoder assume anything in quotes as `true`\n        if (type === 'bool' && args[i] === 'false') {\n          args[i] = false;\n        }\n        types.push(type.indexOf('tuple') === 0 ? buildFullTypeDefinition(funABI.inputs[i]) : type);\n        if (args.length < types.length) {\n          args.push('');\n        }\n      }\n    }\n\n    encodeArgs(funABI.inputs, args);\n    convertTypes(types);\n\n    return abiCoder.encode(types, args);\n}\n\nexport function decodeParamsV2ByABI(funABI, data) {\n  const convertTypeNames = (types) => {\n    for (let i = 0; i < types.length; i++) {\n      const type = types[i]\n      if (/^trcToken/.test(type))\n        types[i] = type.replace(/^trcToken/, 'uint256')\n    }\n  }\n\n  const convertAddresses = addrArr => {\n    if (Array.isArray(addrArr)) {\n      addrArr.forEach((addrs, i) => {\n        addrArr[i] = convertAddresses(addrs);\n      });\n      return addrArr;\n    } else {\n      return TronWeb.address.toHex(addrArr)\n    }\n  };\n\n  const mapTuple = (components, args, dimension) => {\n    if (dimension > 1) {\n      if (args.length) {\n        args.forEach(arg => {\n          mapTuple(components, arg, dimension - 1);\n        });\n      }\n    } else {\n      if (args.length && dimension) {\n        args.forEach(arg => {\n          decodeResult(components, arg);\n        });\n      }\n    }\n  };\n\n  const buildFullTypeNameDefinition = (typeDef) => {\n    const name = typeDef.name ? ` ${typeDef.name}` : '';\n    if (typeDef && typeDef.type.indexOf('tuple') === 0 && typeDef.components) {\n      const innerTypes = typeDef.components.map((innerType) => { return buildFullTypeNameDefinition(innerType) });\n      return `tuple(${innerTypes.join(',')})${extractSize(typeDef.type)}${name}`;\n    }\n    if (/trcToken/.test(typeDef.type))\n      return typeDef.type.replace(/trcToken/, 'uint256') + name;\n\n    return typeDef.type + name;\n  }\n\n  const decodeResult = (outputs = [], result) => {\n    if (outputs.length)\n      outputs.forEach((output, i) => {\n        const {type, name} = output;\n\n        if (result[i])\n          if (type === 'address') {\n            result[i] = TronWeb.address.toHex(result[i]);\n            if(name) result[name] = TronWeb.address.toHex(result[name]);\n          }\n          else if (type.match(/^([^\\x5b]*)(\\x5b|$)/)[0] === 'address[') {\n            convertAddresses(result[i])\n            if(name) convertAddresses(result[name])\n          }\n          else if (type.indexOf('tuple') === 0) {\n            if (extractSize(type)) {\n              const dimension = extractArrayDim(type);\n              mapTuple(output.components, result[i], dimension);\n            } else decodeResult(output.components, result[i]);\n\n            if(name) result[name] = result[i];\n          }\n      });\n  };\n\n  // Only decode if there supposed to be fields\n  if (funABI.outputs && funABI.outputs.length > 0) {\n\n      let outputTypes = [];\n      for (let i = 0; i < funABI.outputs.length; i++) {\n        const type = funABI.outputs[i].type;\n        const name = funABI.outputs[i].name ? ` ${funABI.outputs[i].name}` : '';\n        outputTypes.push(type.indexOf('tuple') === 0 ? buildFullTypeNameDefinition(funABI.outputs[i]) : type + name);\n      }\n      convertTypeNames(outputTypes);\n\n      if (!data || !data.length) data = new Uint8Array(32 * funABI.outputs.length); // ensuring the data is at least filled by 0 cause `AbiCoder` throws if there's not engouh data\n      // decode data\n      const decodeRes = abiCoder.decode(outputTypes, data);\n      const decodeResCopy = deepCopy(decodeRes);\n      decodeResult(funABI.outputs, decodeResCopy);\n\n      return decodeResCopy\n  }\n  return [];\n}","import * as accounts from './accounts';\nimport * as base58 from './base58';\nimport * as bytes from './bytes';\nimport * as crypto from './crypto';\nimport * as code from './code';\nimport * as abi from './abi';\nimport * as ethersUtils from './ethersUtils';\n\nimport validator from 'validator';\nimport BigNumber from 'bignumber.js';\nimport {ADDRESS_PREFIX} from 'utils/address';\n\nconst utils = {\n    isValidURL(url) {\n        if (typeof url !== 'string')\n            return false;\n        return validator.isURL(url.toString(), {\n            protocols: ['http', 'https'],\n            require_tld: false\n        });\n    },\n\n    isObject(obj) {\n        return obj === Object(obj) && Object.prototype.toString.call(obj) !== '[object Array]';\n    },\n\n    isArray(array) {\n        return Array.isArray(array);\n    },\n\n    isJson(string) {\n        try {\n            return !!JSON.parse(string);\n        } catch (ex) {\n            return false;\n        }\n    },\n\n    isBoolean(bool) {\n        return typeof bool === 'boolean';\n    },\n\n    isBigNumber(number) {\n        return number && (number instanceof BigNumber || (number.constructor && number.constructor.name === 'BigNumber'));\n    },\n\n    isString(string) {\n        return typeof string === 'string' || (string && string.constructor && string.constructor.name === 'String');\n    },\n\n    isFunction(obj) {\n        return typeof obj === 'function';\n    },\n\n    isHex(string) {\n        return (typeof string === 'string'\n            && !isNaN(parseInt(string, 16))\n            && /^(0x|)[a-fA-F0-9]+$/.test(string));\n    },\n\n    isInteger(number) {\n        if (number === null)\n            return false\n        return Number.isInteger(\n            Number(number)\n        );\n    },\n\n    hasProperty(obj, property) {\n        return Object.prototype.hasOwnProperty.call(obj, property);\n    },\n\n    hasProperties(obj, ...properties) {\n        return properties.length && !properties.map(property => {\n            return this.hasProperty(obj, property)\n        }).includes(false);\n    },\n\n    mapEvent(event) {\n        let data = {\n            block: event.block_number,\n            timestamp: event.block_timestamp,\n            contract: event.contract_address,\n            name: event.event_name,\n            transaction: event.transaction_id,\n            result: event.result,\n            resourceNode: event.resource_Node || (event._unconfirmed ? 'fullNode' : 'solidityNode')\n        };\n        if (event._unconfirmed) {\n            data.unconfirmed = event._unconfirmed\n        }\n        if (event._fingerprint) {\n            data.fingerprint = event._fingerprint;\n        }\n        return data;\n    },\n\n    parseEvent(event, {inputs: abi}) {\n        if (!event.result)\n            return event;\n\n        if (this.isObject(event.result)) {\n            for (var i = 0; i < abi.length; i++) {\n                let obj = abi[i];\n                if (obj.type == 'address' && obj.name in event.result)\n                    event.result[obj.name] = ADDRESS_PREFIX + event.result[obj.name].substr(2).toLowerCase();\n            }\n        } else if (this.isArray(event.result)) {\n            event.result = event.result.reduce((obj, result, index) => {\n                const {\n                    name,\n                    type\n                } = abi[index];\n\n                if (type == 'address')\n                    result = ADDRESS_PREFIX + result.substr(2).toLowerCase();\n\n                obj[name] = result;\n\n                return obj;\n            }, {});\n        }\n\n        return event;\n    },\n\n    padLeft(input, padding, amount) {\n        let res = input.toString();\n\n        while (res.length < amount)\n            res = padding + res;\n\n        return res;\n    },\n\n    isNotNullOrUndefined(val) {\n        return val !== null && typeof val !== 'undefined';\n    },\n\n    async sleep(millis = 1000){\n        return new Promise(resolve => setTimeout(resolve, millis));\n    }\n}\n\nexport default {\n    ...utils,\n    code,\n    accounts,\n    base58,\n    bytes,\n    crypto,\n    abi,\n    ethersUtils\n};\n","import HttpProvider from './HttpProvider';\n\nexport default {\n    HttpProvider\n};","import axios from 'axios';\nimport utils from 'utils';\n\nexport default class HttpProvider {\n    constructor(host, timeout = 30000, user = false, password = false, headers = {}, statusPage = '/') {\n        if (!utils.isValidURL(host))\n            throw new Error('Invalid URL provided to HttpProvider');\n\n        if (isNaN(timeout) || timeout < 0)\n            throw new Error('Invalid timeout duration provided');\n\n        if (!utils.isObject(headers))\n            throw new Error('Invalid headers object provided');\n\n        host = host.replace(/\\/+$/, '');\n\n        this.host = host;\n        this.timeout = timeout;\n        this.user = user;\n        this.password = password;\n        this.headers = headers;\n        this.statusPage = statusPage;\n\n        this.instance = axios.create({\n            baseURL: host,\n            timeout: timeout,\n            headers: headers,\n            auth: user && {\n                user,\n                password\n            },\n        });\n    }\n\n    setStatusPage(statusPage = '/') {\n        this.statusPage = statusPage;\n    }\n\n    async isConnected(statusPage = this.statusPage) {\n        return this.request(statusPage).then(data => {\n            return utils.hasProperties(data, 'blockID', 'block_header');\n        }).catch(() => false);\n    }\n\n    request(url, payload = {}, method = 'get') {\n        method = method.toLowerCase();\n\n        return this.instance.request({\n            data: method == 'post' && Object.keys(payload).length ? payload : null,\n            params: method == 'get' && payload,\n            url,\n            method\n        }).then(({data}) => data);\n    }\n};\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport {AbiCoder} from 'utils/ethersUtils';\nimport Validator from 'paramValidator';\nimport {ADDRESS_PREFIX_REGEX} from 'utils/address';\nimport injectpromise from 'injectpromise';\nimport {encodeParamsV2ByABI} from 'utils/abi';\n\nlet self;\n\n//helpers\n\nfunction toHex(value) {\n    return TronWeb.address.toHex(value);\n}\n\nfunction fromUtf8(value) {\n    return self.tronWeb.fromUtf8(value);\n}\n\nfunction resultManager(transaction, callback) {\n    if (transaction.Error)\n        return callback(transaction.Error);\n\n    if (transaction.result && transaction.result.message) {\n        return callback(\n            self.tronWeb.toUtf8(transaction.result.message)\n        );\n    }\n\n    return callback(null, transaction);\n}\n\n\nexport default class TransactionBuilder {\n    constructor(tronWeb = false) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n        self = this;\n        this.tronWeb = tronWeb;\n        this.injectPromise = injectpromise(this);\n        this.validator = new Validator(tronWeb);\n    }\n\n    sendTrx(to = false, amount = 0, from = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(from)) {\n            callback = from;\n            from = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(from)) {\n            options = from;\n            from = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sendTrx, to, amount, from, options);\n\n        // accept amounts passed as strings\n        amount = parseInt(amount)\n\n        if (this.validator.notValid([\n            {\n                name: 'recipient',\n                type: 'address',\n                value: to\n            },\n            {\n                name: 'origin',\n                type: 'address',\n                value: from\n            },\n            {\n                names: ['recipient', 'origin'],\n                type: 'notEqual',\n                msg: 'Cannot transfer TRX to the same account'\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount\n            }\n        ], callback))\n            return;\n\n        const data = {\n            to_address: toHex(to),\n            owner_address: toHex(from),\n            amount: amount,\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/createtransaction', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    sendToken(to = false, amount = 0, tokenID = false, from = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(from)) {\n            callback = from;\n            from = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(from)) {\n            options = from;\n            from = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sendToken, to, amount, tokenID, from, options);\n\n        amount = parseInt(amount)\n        if (this.validator.notValid([\n            {\n                name: 'recipient',\n                type: 'address',\n                value: to\n            },\n            {\n                name: 'origin',\n                type: 'address',\n                value: from,\n            },\n            {\n                names: ['recipient', 'origin'],\n                type: 'notEqual',\n                msg: 'Cannot transfer tokens to the same account'\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount\n            },\n            {\n                name: 'token ID',\n                type: 'tokenId',\n                value: tokenID\n            }\n        ], callback))\n            return;\n\n        const data = {\n            to_address: toHex(to),\n            owner_address: toHex(from),\n            asset_name: fromUtf8(tokenID),\n            amount: parseInt(amount)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/transferasset', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    purchaseToken(issuerAddress = false, tokenID = false, amount = 0, buyer = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(buyer)) {\n            callback = buyer;\n            buyer = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(buyer)) {\n            options = buyer;\n            buyer = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.purchaseToken, issuerAddress, tokenID, amount, buyer, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'buyer',\n                type: 'address',\n                value: buyer\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                names: ['buyer', 'issuer'],\n                type: 'notEqual',\n                msg: 'Cannot purchase tokens from same account'\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount\n            },\n            {\n                name: 'token ID',\n                type: 'tokenId',\n                value: tokenID\n            }\n        ], callback))\n            return;\n\n        const data = {\n            to_address: toHex(issuerAddress),\n            owner_address: toHex(buyer),\n            asset_name: fromUtf8(tokenID),\n            amount: parseInt(amount)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/participateassetissue', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    freezeBalance(amount = 0, duration = 3, resource = \"BANDWIDTH\", address = this.tronWeb.defaultAddress.hex, receiverAddress = undefined, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(receiverAddress)) {\n            callback = receiverAddress;\n            receiverAddress = undefined;\n        } else if (utils.isObject(receiverAddress)) {\n            options = receiverAddress;\n            receiverAddress = undefined;\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (utils.isFunction(duration)) {\n            callback = duration;\n            duration = 3;\n        }\n\n        if (utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if (!callback)\n            return this.injectPromise(this.freezeBalance, amount, duration, resource, address, receiverAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            },\n            {\n                name: 'receiver',\n                type: 'address',\n                value: receiverAddress,\n                optional: true\n            },\n            {\n                name: 'amount',\n                type: 'integer',\n                gt: 0,\n                value: amount\n            },\n            {\n                name: 'duration',\n                type: 'integer',\n                gte: 3,\n                value: duration\n            },\n            {\n                name: 'resource',\n                type: 'resource',\n                value: resource,\n                msg: 'Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY'\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(address),\n            frozen_balance: parseInt(amount),\n            frozen_duration: parseInt(duration),\n            resource: resource\n        }\n\n        if (utils.isNotNullOrUndefined(receiverAddress) && toHex(receiverAddress) !== toHex(address)) {\n            data.receiver_address = toHex(receiverAddress)\n        }\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/freezebalance', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    unfreezeBalance(resource = \"BANDWIDTH\", address = this.tronWeb.defaultAddress.hex, receiverAddress = undefined, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(receiverAddress)) {\n            callback = receiverAddress;\n            receiverAddress = undefined;\n        } else if (utils.isObject(receiverAddress)) {\n            options = receiverAddress;\n            receiverAddress = undefined;\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if (!callback)\n            return this.injectPromise(this.unfreezeBalance, resource, address, receiverAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            },\n            {\n                name: 'receiver',\n                type: 'address',\n                value: receiverAddress,\n                optional: true\n            },\n            {\n                name: 'resource',\n                type: 'resource',\n                value: resource,\n                msg: 'Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY'\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(address),\n            resource: resource\n        }\n\n        if (utils.isNotNullOrUndefined(receiverAddress) && toHex(receiverAddress) !== toHex(address)) {\n            data.receiver_address = toHex(receiverAddress)\n        }\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/unfreezebalance', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    withdrawBlockRewards(address = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.withdrawBlockRewards, address, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(address)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/withdrawbalance', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    applyForSR(\n        address = this.tronWeb.defaultAddress.hex,\n        url = false,\n        options,\n        callback = false\n    ) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (utils.isObject(url) && utils.isValidURL(address)) {\n            options = url;\n            url = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.applyForSR, address, url, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            },\n            {\n                name: 'url',\n                type: 'url',\n                value: url,\n                msg: 'Invalid url provided'\n            }\n        ], callback))\n            return;\n\n\n        const data = {\n            owner_address: toHex(address),\n            url: fromUtf8(url)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/createwitness', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    vote(votes = {}, voterAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(voterAddress)) {\n            callback = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(voterAddress)) {\n            options = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.vote, votes, voterAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'voter',\n                type: 'address',\n                value: voterAddress\n            },\n            {\n                name: 'votes',\n                type: 'notEmptyObject',\n                value: votes\n            }\n        ], callback))\n            return;\n\n        let invalid = false;\n\n        votes = Object.entries(votes).map(([srAddress, voteCount]) => {\n            if (invalid)\n                return;\n\n            if (this.validator.notValid([\n                {\n                    name: 'SR',\n                    type: 'address',\n                    value: srAddress\n                },\n                {\n                    name: 'vote count',\n                    type: 'integer',\n                    gt: 0,\n                    value: voteCount,\n                    msg: 'Invalid vote count provided for SR: ' + srAddress\n                }\n            ]))\n                return invalid = true;\n\n            return {\n                vote_address: toHex(srAddress),\n                vote_count: parseInt(voteCount)\n            };\n        });\n\n        if (invalid)\n            return;\n\n        const data = {\n            owner_address: toHex(voterAddress),\n            votes,\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/votewitnessaccount', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    createSmartContract(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createSmartContract, options, issuerAddress);\n\n        const feeLimit = options.feeLimit || this.tronWeb.feeLimit;\n        let userFeePercentage = options.userFeePercentage;\n        if (typeof userFeePercentage !== 'number' && !userFeePercentage) {\n            userFeePercentage = 100;\n        }\n        const originEnergyLimit = options.originEnergyLimit || 10_000_000;\n        const callValue = options.callValue || 0;\n        const tokenValue = options.tokenValue;\n        const tokenId = options.tokenId || options.token_id;\n\n        let {\n            abi = false,\n            bytecode = false,\n            parameters = [],\n            name = \"\"\n        } = options;\n\n        if (abi && utils.isString(abi)) {\n            try {\n                abi = JSON.parse(abi);\n            } catch {\n                return callback('Invalid options.abi provided');\n            }\n        }\n\n        if (abi.entrys)\n            abi = abi.entrys;\n\n        if (!utils.isArray(abi))\n            return callback('Invalid options.abi provided');\n\n\n        const payable = abi.some(func => {\n            return func.type === 'constructor' && 'payable' === func.stateMutability.toLowerCase();\n        });\n\n        if (this.validator.notValid([\n            {\n                name: 'bytecode',\n                type: 'hex',\n                value: bytecode\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0\n            },\n            {\n                name: 'callValue',\n                type: 'integer',\n                value: callValue,\n                gte: 0\n            },\n            {\n                name: 'userFeePercentage',\n                type: 'integer',\n                value: userFeePercentage,\n                gte: 0,\n                lte: 100\n            },\n            {\n                name: 'originEnergyLimit',\n                type: 'integer',\n                value: originEnergyLimit,\n                gte: 0,\n                lte: 10_000_000\n            },\n            {\n                name: 'parameters',\n                type: 'array',\n                value: parameters\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                name: 'tokenValue',\n                type: 'integer',\n                value: tokenValue,\n                gte: 0,\n                optional: true\n            },\n            {\n                name: 'tokenId',\n                type: 'integer',\n                value: tokenId,\n                gte: 0,\n                optional: true\n            }\n        ], callback))\n            return;\n\n        if (payable && callValue == 0 && tokenValue == 0)\n            return callback('When contract is payable, options.callValue or options.tokenValue must be a positive integer');\n\n        if (!payable && (callValue > 0 || tokenValue > 0))\n            return callback('When contract is not payable, options.callValue and options.tokenValue must be 0');\n\n\n        if (options.rawParameter && utils.isString(options.rawParameter)) {\n            parameters = options.rawParameter.replace(/^(0x)/, '');\n        } else if (options.funcABIV2) {\n            parameters = encodeParamsV2ByABI(options.funcABIV2, options.parametersV2).replace(/^(0x)/, '');\n        } else {\n            var constructorParams = abi.find(\n                (it) => {\n                    return it.type === 'constructor';\n                }\n            );\n\n            if (typeof constructorParams !== 'undefined' && constructorParams) {\n                const abiCoder = new AbiCoder();\n                const types = [];\n                const values = [];\n                constructorParams = constructorParams.inputs;\n\n                if (parameters.length != constructorParams.length)\n                    return callback(`constructor needs ${constructorParams.length} but ${parameters.length} provided`);\n\n                for (let i = 0; i < parameters.length; i++) {\n                    let type = constructorParams[i].type;\n                    let value = parameters[i];\n\n                    if (!type || !utils.isString(type) || !type.length)\n                        return callback('Invalid parameter type provided: ' + type);\n\n                    if (type === 'address')\n                        value = toHex(value).replace(ADDRESS_PREFIX_REGEX, '0x');\n                    else if (type.match(/^([^\\x5b]*)(\\x5b|$)/)[0] === 'address[')\n                        value = value.map(v => toHex(v).replace(ADDRESS_PREFIX_REGEX, '0x'));\n                    else if (/trcToken/.test(type)) {\n                        type = type.replace(/trcToken/, 'uint256')\n                    }\n\n                    types.push(type);\n                    values.push(value);\n                }\n\n                try {\n                    parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n                } catch (ex) {\n                    return callback(ex);\n                }\n            } else parameters = '';\n        }\n\n        const args = {\n            owner_address: toHex(issuerAddress),\n            fee_limit: parseInt(feeLimit),\n            call_value: parseInt(callValue),\n            consume_user_resource_percent: userFeePercentage,\n            origin_energy_limit: originEnergyLimit,\n            abi: JSON.stringify(abi),\n            bytecode,\n            parameter: parameters,\n            name\n        };\n\n        // tokenValue and tokenId can cause errors if provided when the trx10 proposal has not been approved yet. So we set them only if they are passed to the method.\n        if (utils.isNotNullOrUndefined(tokenValue))\n            args.call_token_value = parseInt(tokenValue)\n        if (utils.isNotNullOrUndefined(tokenId))\n            args.token_id = parseInt(tokenId)\n        if (options && options.permissionId)\n            args.Permission_id = options.permissionId;\n\n        this.tronWeb.fullNode.request('wallet/deploycontract', args, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    triggerSmartContract(...params) {\n        if (typeof params[2] !== 'object') {\n            params[2] = {\n                feeLimit: params[2],\n                callValue: params[3]\n            }\n            params.splice(3, 1)\n        }\n        return this._triggerSmartContract(...params);\n    }\n\n    triggerConstantContract(...params) {\n        params[2]._isConstant = true\n        return this.triggerSmartContract(...params);\n    }\n\n    triggerConfirmedConstantContract(...params) {\n        params[2]._isConstant = true\n        params[2].confirmed = true\n        return this.triggerSmartContract(...params);\n    }\n\n    _triggerSmartContract(\n        contractAddress,\n        functionSelector,\n        options = {},\n        parameters = [],\n        issuerAddress = this.tronWeb.defaultAddress.hex,\n        callback = false\n    ) {\n\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (utils.isFunction(parameters)) {\n            callback = parameters;\n            parameters = [];\n        }\n\n        if (!callback) {\n            return this.injectPromise(\n                this._triggerSmartContract,\n                contractAddress,\n                functionSelector,\n                options,\n                parameters,\n                issuerAddress\n            );\n        }\n\n        let {\n            tokenValue,\n            tokenId,\n            callValue,\n            feeLimit,\n        } = Object.assign({\n            callValue: 0,\n            feeLimit: this.tronWeb.feeLimit\n        }, options)\n\n        if (this.validator.notValid([\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0\n            },\n            {\n                name: 'callValue',\n                type: 'integer',\n                value: callValue,\n                gte: 0\n            },\n            {\n                name: 'parameters',\n                type: 'array',\n                value: parameters\n            },\n            {\n                name: 'contract',\n                type: 'address',\n                value: contractAddress\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress,\n                optional: true\n            },\n            {\n                name: 'tokenValue',\n                type: 'integer',\n                value: tokenValue,\n                gte: 0,\n                optional: true\n            },\n            {\n                name: 'tokenId',\n                type: 'integer',\n                value: tokenId,\n                gte: 0,\n                optional: true\n            }\n        ], callback))\n            return;\n\n        const args = {\n            contract_address: toHex(contractAddress),\n            owner_address: toHex(issuerAddress)\n        };\n\n\n        if (functionSelector && utils.isString(functionSelector)) {\n            functionSelector = functionSelector.replace('/\\s*/g', '');\n            if (parameters.length) {\n                const abiCoder = new AbiCoder();\n                let types = [];\n                const values = [];\n\n                for (let i = 0; i < parameters.length; i++) {\n                    let {type, value} = parameters[i];\n\n                    if (!type || !utils.isString(type) || !type.length)\n                        return callback('Invalid parameter type provided: ' + type);\n\n                    if (type === 'address')\n                        value = toHex(value).replace(ADDRESS_PREFIX_REGEX, '0x');\n                    else if (type.match(/^([^\\x5b]*)(\\x5b|$)/)[0] === 'address[')\n                        value = value.map(v => toHex(v).replace(ADDRESS_PREFIX_REGEX, '0x'));\n\n                    types.push(type);\n                    values.push(value);\n                }\n\n                try {\n                    // workaround for unsupported trcToken type\n                    types = types.map(type => {\n                        if (/trcToken/.test(type)) {\n                            type = type.replace(/trcToken/, 'uint256')\n                        }\n                        return type\n                    })\n\n                    parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n\n                } catch (ex) {\n                    return callback(ex);\n                }\n            } else parameters = '';\n\n            // work for abiv2 if passed the function abi in options\n            if (options.funcABIV2) {\n                parameters = encodeParamsV2ByABI(options.funcABIV2, options.parametersV2).replace(/^(0x)/, '');\n            }\n\n            if (options.shieldedParameter && utils.isString(options.shieldedParameter)) {\n                parameters = options.shieldedParameter.replace(/^(0x)/, '');\n            }\n\n            if (options.rawParameter && utils.isString(options.rawParameter)) {\n                parameters = options.rawParameter.replace(/^(0x)/, '');\n            }\n\n            args.function_selector = functionSelector;\n            args.parameter = parameters;\n        }\n\n        args.call_value = parseInt(callValue)\n        if (utils.isNotNullOrUndefined(tokenValue))\n            args.call_token_value = parseInt(tokenValue)\n        if (utils.isNotNullOrUndefined(tokenId))\n            args.token_id = parseInt(tokenId)\n\n        if (!options._isConstant) {\n            args.fee_limit = parseInt(feeLimit)\n        }\n\n        if (options.permissionId) {\n            args.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(`wallet${options.confirmed ? 'solidity' : ''}/trigger${options._isConstant ? 'constant' : 'smart'}contract`, args, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    clearABI(contractAddress, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.clearABI, contractAddress, ownerAddress);\n\n        if (!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if (!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid owner address provided');\n\n        const data = {\n            contract_address: toHex(contractAddress),\n            owner_address: toHex(ownerAddress)\n        };\n\n        if (this.tronWeb.trx.cache.contracts[contractAddress]) {\n            delete this.tronWeb.trx.cache.contracts[contractAddress]\n        }\n        this.tronWeb.fullNode.request('wallet/clearabi', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n\n    }\n\n    updateBrokerage(brokerage, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.updateBrokerage, brokerage, ownerAddress);\n\n        if (!utils.isNotNullOrUndefined(brokerage))\n            return callback('Invalid brokerage provided');\n\n        if (!utils.isInteger(brokerage) || brokerage < 0 || brokerage > 100)\n            return callback('Brokerage must be an integer between 0 and 100');\n\n        if (!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid owner address provided');\n\n        const data = {\n            brokerage: parseInt(brokerage),\n            owner_address: toHex(ownerAddress)\n        };\n\n        this.tronWeb.fullNode.request('wallet/updateBrokerage', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n\n    }\n\n    createToken(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createToken, options, issuerAddress);\n\n        const {\n            name = false,\n            abbreviation = false,\n            description = false,\n            url = false,\n            totalSupply = 0,\n            trxRatio = 1, // How much TRX will `tokenRatio` cost?\n            tokenRatio = 1, // How many tokens will `trxRatio` afford?\n            saleStart = Date.now(),\n            saleEnd = false,\n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0, // Out of `totalFreeBandwidth`, the amount each token holder get\n            frozenAmount = 0,\n            frozenDuration = 0,\n            // for now there is no default for the following values\n            voteScore,\n            precision\n        } = options;\n\n        if (this.validator.notValid([\n            {\n                name: 'Supply amount',\n                type: 'positive-integer',\n                value: totalSupply\n            },\n            {\n                name: 'TRX ratio',\n                type: 'positive-integer',\n                value: trxRatio\n            },\n            {\n                name: 'Token ratio',\n                type: 'positive-integer',\n                value: tokenRatio\n            },\n            {\n                name: 'token abbreviation',\n                type: 'not-empty-string',\n                value: abbreviation\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: name\n            },\n            {\n                name: 'token description',\n                type: 'not-empty-string',\n                value: description\n            },\n            {\n                name: 'token url',\n                type: 'url',\n                value: url\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                name: 'sale start timestamp',\n                type: 'integer',\n                value: saleStart,\n                gte: Date.now()\n            },\n            {\n                name: 'sale end timestamp',\n                type: 'integer',\n                value: saleEnd,\n                gt: saleStart\n            },\n            {\n                name: 'Free bandwidth amount',\n                type: 'integer',\n                value: freeBandwidth,\n                gte: 0\n            },\n            {\n                name: 'Free bandwidth limit',\n                type: 'integer',\n                value: freeBandwidthLimit,\n                gte: 0\n            },\n            {\n                name: 'Frozen supply',\n                type: 'integer',\n                value: frozenAmount,\n                gte: 0\n            },\n            {\n                name: 'Frozen duration',\n                type: 'integer',\n                value: frozenDuration,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        if (utils.isNotNullOrUndefined(voteScore) && (!utils.isInteger(voteScore) || voteScore <= 0))\n            return callback('voteScore must be a positive integer greater than 0');\n\n        if (utils.isNotNullOrUndefined(precision) && (!utils.isInteger(precision) || precision < 0 || precision > 6))\n            return callback('precision must be a positive integer >= 0 and <= 6');\n\n        const data = {\n            owner_address: toHex(issuerAddress),\n            name: fromUtf8(name),\n            abbr: fromUtf8(abbreviation),\n            description: fromUtf8(description),\n            url: fromUtf8(url),\n            total_supply: parseInt(totalSupply),\n            trx_num: parseInt(trxRatio),\n            num: parseInt(tokenRatio),\n            start_time: parseInt(saleStart),\n            end_time: parseInt(saleEnd),\n            free_asset_net_limit: parseInt(freeBandwidth),\n            public_free_asset_net_limit: parseInt(freeBandwidthLimit),\n            frozen_supply: {\n                frozen_amount: parseInt(frozenAmount),\n                frozen_days: parseInt(frozenDuration)\n            }\n        }\n        if (!(parseInt(frozenAmount) > 0)) {\n            delete data.frozen_supply\n        }\n        if (precision && !isNaN(parseInt(precision))) {\n            data.precision = parseInt(precision);\n        }\n        if (voteScore && !isNaN(parseInt(voteScore))) {\n            data.vote_score = parseInt(voteScore)\n        }\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/createassetissue', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    updateAccount(accountName = false, address = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback) {\n            return this.injectPromise(this.updateAccount, accountName, address, options);\n        }\n\n        if (this.validator.notValid([\n            {\n                name: 'Name',\n                type: 'not-empty-string',\n                value: accountName\n            },\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n        const data = {\n            account_name: fromUtf8(accountName),\n            owner_address: toHex(address),\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/updateaccount', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    setAccountId(accountId, address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback) {\n            return this.injectPromise(this.setAccountId, accountId, address);\n        }\n\n        if (accountId && utils.isString(accountId) && accountId.startsWith('0x')) {\n            accountId = accountId.slice(2);\n        }\n\n        if (this.validator.notValid([\n            {\n                name: 'accountId',\n                type: 'hex',\n                value: accountId\n            },\n            {\n                name: 'accountId',\n                type: 'string',\n                lte: 32,\n                gte: 8,\n                value: accountId\n            },\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n\n        this.tronWeb.fullNode.request('wallet/setaccountid', {\n            account_id: accountId,\n            owner_address: toHex(address),\n        }, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    updateToken(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(issuerAddress)) {\n            options = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.updateToken, options, issuerAddress);\n\n        const {\n            description = false,\n            url = false,\n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0 // Out of `totalFreeBandwidth`, the amount each token holder get\n        } = options;\n\n\n        if (this.validator.notValid([\n            {\n                name: 'token description',\n                type: 'not-empty-string',\n                value: description\n            },\n            {\n                name: 'token url',\n                type: 'url',\n                value: url\n            },\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                name: 'Free bandwidth amount',\n                type: 'positive-integer',\n                value: freeBandwidth\n            },\n            {\n                name: 'Free bandwidth limit',\n                type: 'positive-integer',\n                value: freeBandwidthLimit\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(issuerAddress),\n            description: fromUtf8(description),\n            url: fromUtf8(url),\n            new_limit: parseInt(freeBandwidth),\n            new_public_limit: parseInt(freeBandwidthLimit)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/updateasset', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    purchaseAsset(...args) {\n        return this.purchaseToken(...args);\n    }\n\n    createAsset(...args) {\n        return this.createToken(...args);\n    }\n\n    updateAsset(...args) {\n        return this.updateToken(...args);\n    }\n\n    /**\n     * Creates a proposal to modify the network.\n     * Can only be created by a current Super Representative.\n     */\n    createProposal(parameters = false, issuerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(issuerAddress)) {\n            options = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createProposal, parameters, issuerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            }\n        ], callback))\n            return;\n\n        const invalid = 'Invalid proposal parameters provided';\n\n        if (!parameters)\n            return callback(invalid);\n\n        if (!utils.isArray(parameters))\n            parameters = [parameters];\n\n        for (let parameter of parameters) {\n            if (!utils.isObject(parameter))\n                return callback(invalid);\n        }\n\n        const data = {\n            owner_address: toHex(issuerAddress),\n            parameters: parameters\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/proposalcreate', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Deletes a network modification proposal that the owner issued.\n     * Only current Super Representative can vote on a proposal.\n     */\n    deleteProposal(proposalID = false, issuerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(issuerAddress)) {\n            options = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.deleteProposal, proposalID, issuerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'issuer',\n                type: 'address',\n                value: issuerAddress\n            },\n            {\n                name: 'proposalID',\n                type: 'integer',\n                value: proposalID,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(issuerAddress),\n            proposal_id: parseInt(proposalID)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/proposaldelete', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Adds a vote to an issued network modification proposal.\n     * Only current Super Representative can vote on a proposal.\n     */\n    voteProposal(proposalID = false, isApproval = false, voterAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(voterAddress)) {\n            callback = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(voterAddress)) {\n            options = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.voteProposal, proposalID, isApproval, voterAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'voter',\n                type: 'address',\n                value: voterAddress\n            },\n            {\n                name: 'proposalID',\n                type: 'integer',\n                value: proposalID,\n                gte: 0\n            },\n            {\n                name: 'has approval',\n                type: 'boolean',\n                value: isApproval\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(voterAddress),\n            proposal_id: parseInt(proposalID),\n            is_add_approval: isApproval\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/proposalapprove', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Create an exchange between a token and TRX.\n     * Token Name should be a CASE SENSITIVE string.\n     * PLEASE VERIFY THIS ON TRONSCAN.\n     */\n    createTRXExchange(tokenName, tokenBalance, trxBalance, ownerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createTRXExchange, tokenName, tokenBalance, trxBalance, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: tokenName\n            },\n            {\n                name: 'token balance',\n                type: 'positive-integer',\n                value: tokenBalance\n            },\n            {\n                name: 'trx balance',\n                type: 'positive-integer',\n                value: trxBalance\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            first_token_id: fromUtf8(tokenName),\n            first_token_balance: tokenBalance,\n            second_token_id: '5f', // Constant for TRX.\n            second_token_balance: trxBalance\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangecreate', data, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Create an exchange between a token and another token.\n     * DO NOT USE THIS FOR TRX.\n     * Token Names should be a CASE SENSITIVE string.\n     * PLEASE VERIFY THIS ON TRONSCAN.\n     */\n    createTokenExchange(firstTokenName, firstTokenBalance, secondTokenName, secondTokenBalance, ownerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.createTokenExchange, firstTokenName, firstTokenBalance, secondTokenName, secondTokenBalance, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'first token name',\n                type: 'not-empty-string',\n                value: firstTokenName\n            },\n            {\n                name: 'second token name',\n                type: 'not-empty-string',\n                value: secondTokenName\n            },\n            {\n                name: 'first token balance',\n                type: 'positive-integer',\n                value: firstTokenBalance\n            },\n            {\n                name: 'second token balance',\n                type: 'positive-integer',\n                value: secondTokenBalance\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            first_token_id: fromUtf8(firstTokenName),\n            first_token_balance: firstTokenBalance,\n            second_token_id: fromUtf8(secondTokenName),\n            second_token_balance: secondTokenBalance\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangecreate', data, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Adds tokens into a bancor style exchange.\n     * Will add both tokens at market rate.\n     * Use \"_\" for the constant value for TRX.\n     */\n    injectExchangeTokens(exchangeID = false, tokenName = false, tokenAmount = 0, ownerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.injectExchangeTokens, exchangeID, tokenName, tokenAmount, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: tokenName\n            },\n            {\n                name: 'token amount',\n                type: 'integer',\n                value: tokenAmount,\n                gte: 1\n            },\n            {\n                name: 'exchangeID',\n                type: 'integer',\n                value: exchangeID,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: fromUtf8(tokenName),\n            quant: parseInt(tokenAmount)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangeinject', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Withdraws tokens from a bancor style exchange.\n     * Will withdraw at market rate both tokens.\n     * Use \"_\" for the constant value for TRX.\n     */\n    withdrawExchangeTokens(exchangeID = false, tokenName = false, tokenAmount = 0, ownerAddress = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.withdrawExchangeTokens, exchangeID, tokenName, tokenAmount, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: tokenName\n            },\n            {\n                name: 'token amount',\n                type: 'integer',\n                value: tokenAmount,\n                gte: 1\n            },\n            {\n                name: 'exchangeID',\n                type: 'integer',\n                value: exchangeID,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: fromUtf8(tokenName),\n            quant: parseInt(tokenAmount)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangewithdraw', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Trade tokens on a bancor style exchange.\n     * Expected value is a validation and used to cap the total amt of token 2 spent.\n     * Use \"_\" for the constant value for TRX.\n     */\n    tradeExchangeTokens(exchangeID = false,\n                        tokenName = false,\n                        tokenAmountSold = 0,\n                        tokenAmountExpected = 0,\n                        ownerAddress = this.tronWeb.defaultAddress.hex,\n                        options,\n                        callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.tradeExchangeTokens, exchangeID, tokenName, tokenAmountSold, tokenAmountExpected, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'token name',\n                type: 'not-empty-string',\n                value: tokenName\n            },\n            {\n                name: 'tokenAmountSold',\n                type: 'integer',\n                value: tokenAmountSold,\n                gte: 1\n            },\n            {\n                name: 'tokenAmountExpected',\n                type: 'integer',\n                value: tokenAmountExpected,\n                gte: 1\n            },\n            {\n                name: 'exchangeID',\n                type: 'integer',\n                value: exchangeID,\n                gte: 0\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: this.tronWeb.fromAscii(tokenName),\n            quant: parseInt(tokenAmountSold),\n            expected: parseInt(tokenAmountExpected)\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/exchangetransaction', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Update userFeePercentage.\n     */\n    updateSetting(contractAddress = false,\n                  userFeePercentage = false,\n                  ownerAddress = this.tronWeb.defaultAddress.hex,\n                  options,\n                  callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.updateSetting, contractAddress, userFeePercentage, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'contract',\n                type: 'address',\n                value: contractAddress\n            },\n            {\n                name: 'userFeePercentage',\n                type: 'integer',\n                value: userFeePercentage,\n                gte: 0,\n                lte: 100\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            contract_address: toHex(contractAddress),\n            consume_user_resource_percent: userFeePercentage\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/updatesetting', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Update energy limit.\n     */\n    updateEnergyLimit(contractAddress = false,\n                      originEnergyLimit = false,\n                      ownerAddress = this.tronWeb.defaultAddress.hex,\n                      options,\n                      callback = false) {\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(ownerAddress)) {\n            options = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.updateEnergyLimit, contractAddress, originEnergyLimit, ownerAddress, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'owner',\n                type: 'address',\n                value: ownerAddress\n            },\n            {\n                name: 'contract',\n                type: 'address',\n                value: contractAddress\n            },\n            {\n                name: 'originEnergyLimit',\n                type: 'integer',\n                value: originEnergyLimit,\n                gte: 0,\n                lte: 10_000_000\n            }\n        ], callback))\n            return;\n\n        const data = {\n            owner_address: toHex(ownerAddress),\n            contract_address: toHex(contractAddress),\n            origin_energy_limit: originEnergyLimit\n        };\n\n        if (options && options.permissionId) {\n            data.Permission_id = options.permissionId;\n        }\n\n        this.tronWeb.fullNode.request('wallet/updateenergylimit', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    checkPermissions(permissions, type) {\n        if (permissions) {\n            if (permissions.type !== type\n                || !permissions.permission_name\n                || !utils.isString(permissions.permission_name)\n                || !utils.isInteger(permissions.threshold)\n                || permissions.threshold < 1\n                || !permissions.keys\n            ) {\n                return false\n            }\n            for (let key of permissions.keys) {\n                if (!this.tronWeb.isAddress(key.address)\n                    || !utils.isInteger(key.weight)\n                    || key.weight > permissions.threshold\n                    || key.weight < 1\n                    || (type === 2 && !permissions.operations)\n                ) {\n                    return false\n                }\n            }\n        }\n        return true\n    }\n\n    updateAccountPermissions(ownerAddress = this.tronWeb.defaultAddress.hex,\n                             ownerPermissions = false,\n                             witnessPermissions = false,\n                             activesPermissions = false,\n                             callback = false) {\n\n        if (utils.isFunction(activesPermissions)) {\n            callback = activesPermissions;\n            activesPermissions = false;\n        }\n\n        if (utils.isFunction(witnessPermissions)) {\n            callback = witnessPermissions;\n            witnessPermissions = activesPermissions = false;\n        }\n\n        if (utils.isFunction(ownerPermissions)) {\n            callback = ownerPermissions;\n            ownerPermissions = witnessPermissions = activesPermissions = false;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.updateAccountPermissions, ownerAddress, ownerPermissions, witnessPermissions, activesPermissions);\n\n        if (!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid ownerAddress provided');\n\n        if (!this.checkPermissions(ownerPermissions, 0)) {\n            return callback('Invalid ownerPermissions provided');\n        }\n\n        if (!this.checkPermissions(witnessPermissions, 1)) {\n            return callback('Invalid witnessPermissions provided');\n        }\n\n        if (!Array.isArray(activesPermissions)) {\n            activesPermissions = [activesPermissions]\n        }\n\n        for (let activesPermission of activesPermissions) {\n            if (!this.checkPermissions(activesPermission, 2)) {\n                return callback('Invalid activesPermissions provided');\n            }\n        }\n\n        const data = {\n            owner_address: ownerAddress\n        }\n        if (ownerPermissions) {\n            data.owner = ownerPermissions\n        }\n        if (witnessPermissions) {\n            data.witness = witnessPermissions\n        }\n        if (activesPermissions) {\n            data.actives = activesPermissions.length === 1 ? activesPermissions[0] : activesPermissions\n        }\n\n        this.tronWeb.fullNode.request('wallet/accountpermissionupdate', data, 'post').then(transaction => resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    async newTxID(transaction, callback) {\n\n        if (!callback)\n            return this.injectPromise(this.newTxID, transaction);\n\n        this.tronWeb.fullNode\n            .request(\n                'wallet/getsignweight',\n                transaction,\n                'post'\n            )\n            .then(newTransaction => {\n                newTransaction = newTransaction.transaction.transaction\n                if (typeof transaction.visible === 'boolean') {\n                    newTransaction.visible = transaction.visible\n                }\n                callback(null, newTransaction)\n            })\n            .catch(err => callback('Error generating a new transaction id.'));\n    }\n\n    async alterTransaction(transaction, options = {}, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.alterTransaction, transaction, options);\n\n        if (transaction.signature)\n            return callback('You can not extend the expiration of a signed transaction.')\n\n        if (options.data) {\n            if (options.dataFormat !== 'hex')\n                options.data = this.tronWeb.toHex(options.data);\n            options.data = options.data.replace(/^0x/, '')\n            if (options.data.length === 0)\n                return callback('Invalid data provided');\n            transaction.raw_data.data = options.data;\n        }\n\n        if (options.extension) {\n            options.extension = parseInt(options.extension * 1000);\n            if (isNaN(options.extension) || transaction.raw_data.expiration + options.extension <= Date.now() + 3000)\n                return callback('Invalid extension provided');\n            transaction.raw_data.expiration += options.extension;\n        }\n\n        this.newTxID(transaction, callback)\n    }\n\n    async extendExpiration(transaction, extension, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.extendExpiration, transaction, extension);\n\n        this.alterTransaction(transaction, {extension}, callback);\n    }\n\n    async addUpdateData(transaction, data, dataFormat = 'utf8', callback = false) {\n\n        if (utils.isFunction(dataFormat)) {\n            callback = dataFormat;\n            dataFormat = 'utf8';\n        }\n\n        if (!callback)\n            return this.injectPromise(this.addUpdateData, transaction, data, dataFormat);\n\n        this.alterTransaction(transaction, {data, dataFormat}, callback);\n    }\n\n}\n","import TronWeb from 'index';\nimport utils from 'utils';\n\nexport default class Validator {\n\n    constructor(tronWeb = false) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n        this.tronWeb = tronWeb;\n    }\n\n    invalid(param) {\n        return param.msg || `Invalid ${param.name}${param.type === 'address' ? ' address' : ''} provided`;\n    }\n\n    notPositive(param) {\n        return `${param.name} must be a positive integer`;\n    }\n\n    notEqual(param) {\n        return param.msg || `${param.names[0]} can not be equal to ${param.names[1]}`;\n    }\n\n    notValid(params = [], callback = new Function) {\n\n        let normalized = {};\n        let no = false;\n        for (const param of params) {\n            let {\n                name,\n                names,\n                value,\n                type,\n                gt,\n                lt,\n                gte,\n                lte,\n                se,\n                optional\n            } = param;\n            if (optional && (\n                !utils.isNotNullOrUndefined(value)\n                || (type !== 'boolean' && value === false)))\n                continue;\n            normalized[param.name] = param.value;\n            switch (type) {\n\n                case 'address':\n                    if (!this.tronWeb.isAddress(value)) {\n                        no = true;\n                    } else {\n                        normalized[name] = this.tronWeb.address.toHex(value);\n                    }\n                    break;\n\n                case 'integer':\n                    if (!utils.isInteger(value) ||\n                        (typeof gt === 'number' && value <= param.gt) ||\n                        (typeof lt === 'number' && value >= param.lt) ||\n                        (typeof gte === 'number' && value < param.gte) ||\n                        (typeof lte === 'number' && value > param.lte)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'positive-integer':\n                    if (!utils.isInteger(value) || value <= 0) {\n                        callback(this.notPositive(param));\n                        return;\n                    }\n                    break;\n\n                case 'tokenId':\n                    if (!utils.isString(value) || !value.length) {\n                        no = true;\n                    }\n                    break;\n\n                case 'notEmptyObject':\n                    if (!utils.isObject(value) || !Object.keys(value).length) {\n                        no = true;\n                    }\n                    break;\n\n                case 'notEqual':\n                    if (normalized[names[0]] === normalized[names[1]]) {\n                        callback(this.notEqual(param));\n                        return true;\n                    }\n                    break;\n\n                case 'resource':\n                    if (!['BANDWIDTH', 'ENERGY'].includes(value)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'url':\n                    if (!utils.isValidURL(value)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'hex':\n                    if (!utils.isHex(value)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'array':\n                    if (!Array.isArray(value)) {\n                        no = true;\n                    }\n                    break;\n\n                case 'not-empty-string':\n                    if (!utils.isString(value) || !value.length) {\n                        no = true;\n                    }\n                    break;\n\n                case 'boolean':\n                    if (!utils.isBoolean(value)) {\n                        no = true;\n                    }\n                    break;\n                case 'string':\n                    if (!utils.isString(value) ||\n                        (typeof gt === 'number' && value.length <= param.gt) ||\n                        (typeof lt === 'number' && value.length >= param.lt) ||\n                        (typeof gte === 'number' && value.length < param.gte) ||\n                        (typeof lte === 'number' && value.length > param.lte)) {\n                        no = true;\n                    }\n                    break;\n            }\n            if (no) {\n                callback(this.invalid(param));\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport {keccak256, toUtf8Bytes, recoverAddress, SigningKey} from 'utils/ethersUtils';\nimport {ADDRESS_PREFIX} from 'utils/address';\nimport Validator from \"../paramValidator\";\nimport injectpromise from 'injectpromise';\n\nconst TRX_MESSAGE_HEADER = '\\x19TRON Signed Message:\\n32';\n// it should be: '\\x15TRON Signed Message:\\n32';\nconst ETH_MESSAGE_HEADER = '\\x19Ethereum Signed Message:\\n32';\n\nfunction toHex(value) {\n    return TronWeb.address.toHex(value);\n}\n\nexport default class Trx {\n    constructor(tronWeb = false) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = injectpromise(this);\n        this.cache = {\n            contracts: {}\n        }\n        this.validator = new Validator(tronWeb);\n    }\n\n    _parseToken(token) {\n        return {\n            ...token,\n            name: this.tronWeb.toUtf8(token.name),\n            abbr: token.abbr && this.tronWeb.toUtf8(token.abbr),\n            description: token.description && this.tronWeb.toUtf8(token.description),\n            url: token.url && this.tronWeb.toUtf8(token.url)\n        };\n    }\n\n    getCurrentBlock(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getCurrentBlock);\n        this.tronWeb.fullNode.request('wallet/getnowblock').then(block => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getConfirmedCurrentBlock(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getConfirmedCurrentBlock);\n\n        this.tronWeb.solidityNode.request('walletsolidity/getnowblock').then(block => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlock(block = this.tronWeb.defaultBlock, callback = false) {\n        if (utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBlock, block);\n\n        if (block === false)\n            return callback('No block identifier provided');\n\n        if (block == 'earliest')\n            block = 0;\n\n        if (block == 'latest')\n            return this.getCurrentBlock(callback);\n\n        if (isNaN(block) && utils.isHex(block))\n            return this.getBlockByHash(block, callback);\n\n        this.getBlockByNumber(block, callback);\n    }\n\n    getBlockByHash(blockHash, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getBlockByHash, blockHash);\n\n        this.tronWeb.fullNode.request('wallet/getblockbyid', {\n            value: blockHash\n        }, 'post').then(block => {\n            if (!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockByNumber(blockID, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getBlockByNumber, blockID);\n\n        if (!utils.isInteger(blockID) || blockID < 0)\n            return callback('Invalid block number provided');\n\n        this.tronWeb.fullNode.request('wallet/getblockbynum', {\n            num: parseInt(blockID)\n        }, 'post').then(block => {\n            if (!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockTransactionCount(block = this.tronWeb.defaultBlock, callback = false) {\n        if (utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBlockTransactionCount, block);\n\n        this.getBlock(block).then(({transactions = []}) => {\n            callback(null, transactions.length);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionFromBlock(block = this.tronWeb.defaultBlock, index, callback = false) {\n        if (utils.isFunction(index)) {\n            callback = index;\n            index = 0;\n        }\n\n        if (utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTransactionFromBlock, block, index);\n\n        this.getBlock(block).then(({transactions = false}) => {\n            if (!transactions)\n                callback('Transaction not found in block');\n            else if (typeof index == 'number') {\n                if (index >= 0 && index < transactions.length)\n                    callback(null, transactions[index]);\n                else\n                    callback('Invalid transaction index provided');\n            } else\n                callback(null, transactions);\n        }).catch(err => callback(err));\n    }\n\n    getTransaction(transactionID, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getTransaction, transactionID);\n\n        this.tronWeb.fullNode.request('wallet/gettransactionbyid', {\n            value: transactionID\n        }, 'post').then(transaction => {\n            if (!Object.keys(transaction).length)\n                return callback('Transaction not found');\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getConfirmedTransaction(transactionID, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getConfirmedTransaction, transactionID);\n\n        this.tronWeb.solidityNode.request('walletsolidity/gettransactionbyid', {\n            value: transactionID\n        }, 'post').then(transaction => {\n            if (!Object.keys(transaction).length)\n                return callback('Transaction not found');\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getUnconfirmedTransactionInfo(transactionID, callback = false) {\n        return this._getTransactionInfoById(transactionID, {confirmed: false}, callback)\n    }\n\n    getTransactionInfo(transactionID, callback = false) {\n        return this._getTransactionInfoById(transactionID, {confirmed: true}, callback)\n    }\n\n    _getTransactionInfoById(transactionID, options, callback = false) {\n        if (!callback)\n            return this.injectPromise(this._getTransactionInfoById, transactionID, options);\n\n        this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(`wallet${options.confirmed ? 'solidity' : ''}/gettransactioninfobyid`, {\n            value: transactionID\n        }, 'post').then(transaction => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionsToAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTransactionsToAddress, address, limit, offset);\n\n        address = this.tronWeb.address.toHex(address);\n\n        return this.getTransactionsRelated(address, 'to', limit, offset, callback);\n    }\n\n    getTransactionsFromAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTransactionsFromAddress, address, limit, offset);\n\n        address = this.tronWeb.address.toHex(address);\n\n        return this.getTransactionsRelated(address, 'from', limit, offset, callback);\n    }\n\n    async getTransactionsRelated(address = this.tronWeb.defaultAddress.hex, direction = 'all', limit = 30, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n\n        if (utils.isFunction(direction)) {\n            callback = direction;\n            direction = 'all';\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTransactionsRelated, address, direction, limit, offset);\n\n        if (!['to', 'from', 'all'].includes(direction))\n            return callback('Invalid direction provided: Expected \"to\", \"from\" or \"all\"');\n\n        if (direction == 'all') {\n            try {\n                const [from, to] = await Promise.all([\n                    this.getTransactionsRelated(address, 'from', limit, offset),\n                    this.getTransactionsRelated(address, 'to', limit, offset)\n                ])\n\n                return callback(null, [\n                    ...from.map(tx => (tx.direction = 'from', tx)),\n                    ...to.map(tx => (tx.direction = 'to', tx))\n                ].sort((a, b) => {\n                    return b.raw_data.timestamp - a.raw_data.timestamp\n                }));\n            } catch (ex) {\n                return callback(ex);\n            }\n        }\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if (!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if (!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.solidityNode.request(`walletextension/gettransactions${direction}this`, {\n            account: {\n                address\n            },\n            offset,\n            limit\n        }, 'post').then(({transaction}) => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getAccount(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getAccount, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.solidityNode.request('walletsolidity/getaccount', {\n            address\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getAccountById(id = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getAccountById, id);\n\n        this.getAccountInfoById(id, {confirmed: true}, callback);\n    }\n\n    getAccountInfoById(id, options, callback) {\n        if (this.validator.notValid([\n            {\n                name: 'accountId',\n                type: 'hex',\n                value: id\n            },\n            {\n                name: 'accountId',\n                type: 'string',\n                lte: 32,\n                gte: 8,\n                value: id\n            }\n        ], callback))\n            return;\n\n        if (id.startsWith('0x')) {\n            id = id.slice(2);\n        }\n\n        this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(`wallet${options.confirmed ? 'solidity' : ''}/getaccountbyid`, {\n            account_id: id\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getBalance(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBalance, address);\n\n        this.getAccount(address).then(({balance = 0}) => {\n            callback(null, balance);\n        }).catch(err => callback(err));\n    }\n\n    getUnconfirmedAccount(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getUnconfirmedAccount, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getaccount', {\n            address\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getUnconfirmedAccountById(id, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getUnconfirmedAccountById, id);\n\n        this.getAccountInfoById(id, {confirmed: false}, callback);\n    }\n\n    getUnconfirmedBalance(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getUnconfirmedBalance, address);\n\n        this.getUnconfirmedAccount(address).then(({balance = 0}) => {\n            callback(null, balance);\n        }).catch(err => callback(err));\n    }\n\n    getBandwidth(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBandwidth, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getaccountnet', {\n            address\n        }, 'post').then(({freeNetUsed = 0, freeNetLimit = 0, NetUsed = 0, NetLimit = 0}) => {\n            callback(null, (freeNetLimit - freeNetUsed) + (NetLimit - NetUsed));\n        }).catch(err => callback(err));\n    }\n\n    getTokensIssuedByAddress(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getTokensIssuedByAddress, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyaccount', {\n            address\n        }, 'post').then(({assetIssue = false}) => {\n            if (!assetIssue)\n                return callback(null, {});\n\n            const tokens = assetIssue.map(token => {\n                return this._parseToken(token);\n            }).reduce((tokens, token) => {\n                return tokens[token.name] = token, tokens;\n            }, {});\n\n            callback(null, tokens);\n        }).catch(err => callback(err));\n    }\n\n    getTokenFromID(tokenID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getTokenFromID, tokenID);\n\n        if (utils.isInteger(tokenID))\n            tokenID = tokenID.toString()\n\n        if (!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyname', {\n            value: this.tronWeb.fromUtf8(tokenID)\n        }, 'post').then(token => {\n            if (!token.name)\n                return callback('Token does not exist');\n\n            callback(null, this._parseToken(token));\n        }).catch(err => callback(err));\n    }\n\n    listNodes(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.listNodes);\n\n        this.tronWeb.fullNode.request('wallet/listnodes').then(({nodes = []}) => {\n            callback(null, nodes.map(({address: {host, port}}) => (\n                `${this.tronWeb.toUtf8(host)}:${port}`\n            )));\n        }).catch(err => callback(err));\n    }\n\n    getBlockRange(start = 0, end = 30, callback = false) {\n        if (utils.isFunction(end)) {\n            callback = end;\n            end = 30;\n        }\n\n        if (utils.isFunction(start)) {\n            callback = start;\n            start = 0;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getBlockRange, start, end);\n\n        if (!utils.isInteger(start) || start < 0)\n            return callback('Invalid start of range provided');\n\n        if (!utils.isInteger(end) || end <= start)\n            return callback('Invalid end of range provided');\n\n        this.tronWeb.fullNode.request('wallet/getblockbylimitnext', {\n            startNum: parseInt(start),\n            endNum: parseInt(end) + 1\n        }, 'post').then(({block = []}) => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    listSuperRepresentatives(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.listSuperRepresentatives);\n\n        this.tronWeb.fullNode.request('wallet/listwitnesses').then(({witnesses = []}) => {\n            callback(null, witnesses);\n        }).catch(err => callback(err));\n    }\n\n    listTokens(limit = 0, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 0;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.listTokens, limit, offset);\n\n        if (!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if (!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        if (!limit) {\n            return this.tronWeb.fullNode.request('wallet/getassetissuelist').then(({assetIssue = []}) => {\n                callback(null, assetIssue.map(token => this._parseToken(token)));\n            }).catch(err => callback(err));\n        }\n\n        this.tronWeb.fullNode.request('wallet/getpaginatedassetissuelist', {\n            offset: parseInt(offset),\n            limit: parseInt(limit)\n        }, 'post').then(({assetIssue = []}) => {\n            callback(null, assetIssue.map(token => this._parseToken(token)));\n        }).catch(err => callback(err));\n    }\n\n    timeUntilNextVoteCycle(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.timeUntilNextVoteCycle);\n\n        this.tronWeb.fullNode.request('wallet/getnextmaintenancetime').then(({num = -1}) => {\n            if (num == -1)\n                return callback('Failed to get time until next vote cycle');\n\n            callback(null, Math.floor(num / 1000));\n        }).catch(err => callback(err));\n    }\n\n    getContract(contractAddress, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getContract, contractAddress);\n\n        if (!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if (this.cache.contracts[contractAddress]) {\n            callback(null, this.cache.contracts[contractAddress]);\n            return;\n        }\n\n        contractAddress = this.tronWeb.address.toHex(contractAddress);\n\n        this.tronWeb.fullNode.request('wallet/getcontract', {\n            value: contractAddress\n        }).then(contract => {\n            if (contract.Error)\n                return callback('Contract does not exist');\n            this.cache.contracts[contractAddress] = contract;\n            callback(null, contract);\n        }).catch(err => callback(err));\n    }\n\n    async verifyMessage(message = false, signature = false, address = this.tronWeb.defaultAddress.base58, useTronHeader = true, callback = false) {\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.base58;\n            useTronHeader = true;\n        }\n\n        if (utils.isFunction(useTronHeader)) {\n            callback = useTronHeader;\n            useTronHeader = true;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.verifyMessage, message, signature, address, useTronHeader);\n\n        if (!utils.isHex(message))\n            return callback('Expected hex message input');\n\n        if (Trx.verifySignature(message, address, signature, useTronHeader))\n            return callback(null, true);\n\n        callback('Signature does not match');\n    }\n\n    static verifySignature(message, address, signature, useTronHeader = true) {\n        message = message.replace(/^0x/, '');\n        signature = signature.replace(/^0x/, '');\n        const messageBytes = [\n            ...toUtf8Bytes(useTronHeader ? TRX_MESSAGE_HEADER : ETH_MESSAGE_HEADER),\n            ...utils.code.hexStr2byteArray(message)\n        ];\n\n        const messageDigest = keccak256(messageBytes);\n        const recovered = recoverAddress(messageDigest, {\n            recoveryParam: signature.substring(128, 130) == '1c' ? 1 : 0,\n            r: '0x' + signature.substring(0, 64),\n            s: '0x' + signature.substring(64, 128)\n        });\n\n        const tronAddress = ADDRESS_PREFIX + recovered.substr(2);\n        const base58Address = TronWeb.address.fromHex(tronAddress);\n\n        return base58Address == TronWeb.address.fromHex(address);\n    }\n\n    async sign(transaction = false, privateKey = this.tronWeb.defaultPrivateKey, useTronHeader = true, multisig = false, callback = false) {\n\n        if (utils.isFunction(multisig)) {\n            callback = multisig;\n            multisig = false;\n        }\n\n        if (utils.isFunction(useTronHeader)) {\n            callback = useTronHeader;\n            useTronHeader = true;\n            multisig = false;\n        }\n\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n            useTronHeader = true;\n            multisig = false;\n        }\n\n\n        if (!callback)\n            return this.injectPromise(this.sign, transaction, privateKey, useTronHeader, multisig);\n\n        // Message signing\n        if (utils.isString(transaction)) {\n\n            if (!utils.isHex(transaction))\n                return callback('Expected hex message input');\n\n            try {\n                const signatureHex = Trx.signString(transaction, privateKey, useTronHeader)\n                return callback(null, signatureHex);\n            } catch (ex) {\n                callback(ex);\n            }\n        }\n\n        if (!utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n        if (!multisig && transaction.signature)\n            return callback('Transaction is already signed');\n\n        try {\n            if (!multisig) {\n                const address = this.tronWeb.address.toHex(\n                    this.tronWeb.address.fromPrivateKey(privateKey)\n                ).toLowerCase();\n\n                if (address !== this.tronWeb.address.toHex(transaction.raw_data.contract[0].parameter.value.owner_address))\n                    return callback('Private key does not match address in transaction');\n            }\n            return callback(null,\n                utils.crypto.signTransaction(privateKey, transaction)\n            );\n        } catch (ex) {\n            callback(ex);\n        }\n    }\n\n    static signString(message, privateKey, useTronHeader = true) {\n        message = message.replace(/^0x/, '');\n        const value ={\n            toHexString: function() {\n                return '0x' + privateKey\n            },\n            value: privateKey\n        }\n        const signingKey = new SigningKey(value);\n        const messageBytes = [\n            ...toUtf8Bytes(useTronHeader ? TRX_MESSAGE_HEADER : ETH_MESSAGE_HEADER),\n            ...utils.code.hexStr2byteArray(message)\n        ];\n        const messageDigest = keccak256(messageBytes);\n        const signature = signingKey.signDigest(messageDigest);\n        const signatureHex = [\n            '0x',\n            signature.r.substring(2),\n            signature.s.substring(2),\n            Number(signature.v).toString(16)\n        ].join('');\n        return signatureHex\n    }\n\n    async multiSign(transaction = false, privateKey = this.tronWeb.defaultPrivateKey, permissionId = false, callback = false) {\n\n        if (utils.isFunction(permissionId)) {\n            callback = permissionId;\n            permissionId = 0;\n        }\n\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n            permissionId = 0;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.multiSign, transaction, privateKey, permissionId);\n\n        if (!utils.isObject(transaction) || !transaction.raw_data || !transaction.raw_data.contract)\n            return callback('Invalid transaction provided');\n\n        // If owner permission or permission id exists in transaction, do sign directly\n        // If no permission id inside transaction or user passes permission id, use old way to reset permission id\n        if (!transaction.raw_data.contract[0].Permission_id && permissionId > 0) {\n            // set permission id\n            transaction.raw_data.contract[0].Permission_id = permissionId;\n\n            // check if private key insides permission list\n            const address = this.tronWeb.address.toHex(this.tronWeb.address.fromPrivateKey(privateKey)).toLowerCase();\n            const signWeight = await this.getSignWeight(transaction, permissionId);\n\n            if (signWeight.result.code === 'PERMISSION_ERROR') {\n                return callback(signWeight.result.message);\n            }\n\n            let foundKey = false;\n            signWeight.permission.keys.map(key => {\n                if (key.address === address)\n                    foundKey = true;\n            });\n\n            if (!foundKey)\n                return callback(privateKey + ' has no permission to sign');\n\n            if (signWeight.approved_list && signWeight.approved_list.indexOf(address) != -1) {\n                return callback(privateKey + ' already sign transaction');\n            }\n\n            // reset transaction\n            if (signWeight.transaction && signWeight.transaction.transaction) {\n                transaction = signWeight.transaction.transaction;\n                if (permissionId > 0) {\n                    transaction.raw_data.contract[0].Permission_id = permissionId;\n                }\n            } else {\n                return callback('Invalid transaction provided');\n            }\n        }\n\n        // sign\n        try {\n            return callback(null, utils.crypto.signTransaction(privateKey, transaction));\n        } catch (ex) {\n            callback(ex);\n        }\n    }\n\n    async getApprovedList(transaction, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getApprovedList, transaction);\n\n        if (!utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n\n        this.tronWeb.fullNode.request(\n            'wallet/getapprovedlist',\n            transaction,\n            'post'\n        ).then(result => {\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    async getSignWeight(transaction, permissionId, callback = false) {\n        if (utils.isFunction(permissionId)) {\n            callback = permissionId;\n            permissionId = undefined;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getSignWeight, transaction, permissionId);\n\n        if (!utils.isObject(transaction) || !transaction.raw_data || !transaction.raw_data.contract)\n            return callback('Invalid transaction provided');\n\n        if (utils.isInteger(permissionId)) {\n            transaction.raw_data.contract[0].Permission_id = parseInt(permissionId);\n        } else if (typeof transaction.raw_data.contract[0].Permission_id !== 'number') {\n            transaction.raw_data.contract[0].Permission_id = 0;\n        }\n\n        if (!utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n\n        this.tronWeb.fullNode.request(\n            'wallet/getsignweight',\n            transaction,\n            'post'\n        ).then(result => {\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    sendRawTransaction(signedTransaction = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sendRawTransaction, signedTransaction, options);\n\n        if (!utils.isObject(signedTransaction))\n            return callback('Invalid transaction provided');\n\n        if (!utils.isObject(options))\n            return callback('Invalid options provided');\n\n        if (!signedTransaction.signature || !utils.isArray(signedTransaction.signature))\n            return callback('Transaction is not signed');\n\n        this.tronWeb.fullNode.request(\n            'wallet/broadcasttransaction',\n            signedTransaction,\n            'post'\n        ).then(result => {\n            if (result.result)\n                result.transaction = signedTransaction;\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    sendHexTransaction(signedHexTransaction = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sendHexTransaction, signedHexTransaction, options);\n\n        if (!utils.isHex(signedHexTransaction))\n            return callback('Invalid hex transaction provided');\n\n        if (!utils.isObject(options))\n            return callback('Invalid options provided');\n\n        const params = {\n            transaction: signedHexTransaction\n        }\n\n        this.tronWeb.fullNode.request(\n            'wallet/broadcasthex',\n             params,\n            'post'\n        ).then(result => {\n            if (result.result) {\n                result.transaction = JSON.parse(result.transaction)\n                result.hexTransaction = signedHexTransaction;\n            }\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    async sendTransaction(to = false, amount = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback)\n            return this.injectPromise(this.sendTransaction, to, amount, options);\n\n        if (!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if (!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const transaction = await this.tronWeb.transactionBuilder.sendTrx(to, amount, address);\n            const signedTransaction = await this.sign(transaction, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async sendToken(to = false, amount = false, tokenID = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback)\n            return this.injectPromise(this.sendToken, to, amount, tokenID, options);\n\n        if (!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if (!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if (utils.isInteger(tokenID))\n            tokenID = tokenID.toString()\n\n        if (!utils.isString(tokenID))\n            return callback('Invalid token ID provided');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const transaction = await this.tronWeb.transactionBuilder.sendToken(to, amount, tokenID, address);\n            const signedTransaction = await this.sign(transaction, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    /**\n     * Freezes an amount of TRX.\n     * Will give bandwidth OR Energy and TRON Power(voting rights)\n     * to the owner of the frozen tokens.\n     *\n     * @param amount - is the number of frozen trx\n     * @param duration - is the duration in days to be frozen\n     * @param resource - is the type, must be either \"ENERGY\" or \"BANDWIDTH\"\n     * @param options\n     * @param callback\n     */\n    async freezeBalance(amount = 0, duration = 3, resource = \"BANDWIDTH\", options = {}, receiverAddress = undefined, callback = false) {\n        if (utils.isFunction(receiverAddress)) {\n            callback = receiverAddress;\n            receiverAddress = undefined;\n        }\n        if (utils.isFunction(duration)) {\n            callback = duration;\n            duration = 3;\n        }\n\n        if (utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback)\n            return this.injectPromise(this.freezeBalance, amount, duration, resource, options, receiverAddress);\n\n        if (!['BANDWIDTH', 'ENERGY'].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        if (!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if (!utils.isInteger(duration) || duration < 3)\n            return callback('Invalid duration provided, minimum of 3 days');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const freezeBalance = await this.tronWeb.transactionBuilder.freezeBalance(amount, duration, resource, address, receiverAddress);\n            const signedTransaction = await this.sign(freezeBalance, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    /**\n     * Unfreeze TRX that has passed the minimum freeze duration.\n     * Unfreezing will remove bandwidth and TRON Power.\n     *\n     * @param resource - is the type, must be either \"ENERGY\" or \"BANDWIDTH\"\n     * @param options\n     * @param callback\n     */\n    async unfreezeBalance(resource = \"BANDWIDTH\", options = {}, receiverAddress = undefined, callback = false) {\n        if (utils.isFunction(receiverAddress)) {\n            callback = receiverAddress;\n            receiverAddress = undefined;\n        }\n\n        if (utils.isFunction(resource)) {\n            callback = resource;\n            resource = 'BANDWIDTH';\n        }\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback)\n            return this.injectPromise(this.unfreezeBalance, resource, options, receiverAddress);\n\n        if (!['BANDWIDTH', 'ENERGY'].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const unfreezeBalance = await this.tronWeb.transactionBuilder.unfreezeBalance(resource, address, receiverAddress);\n            const signedTransaction = await this.sign(unfreezeBalance, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    /**\n     * Modify account name\n     * Note: Username is allowed to edit only once.\n     *\n     * @param privateKey - Account private Key\n     * @param accountName - name of the account\n     * @param callback\n     *\n     * @return modified Transaction Object\n     */\n    async updateAccount(accountName = false, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (typeof options === 'string')\n            options = {privateKey: options};\n\n        if (!callback) {\n            return this.injectPromise(this.updateAccount, accountName, options);\n        }\n\n        if (!utils.isString(accountName) || !accountName.length) {\n            return callback('Name must be a string');\n        }\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if (!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const updateAccount = await this.tronWeb.transactionBuilder.updateAccount(accountName, address);\n            const signedTransaction = await this.sign(updateAccount, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    signMessage(...args) {\n        return this.sign(...args);\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    send(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    sendTrx(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    broadcast(...args) {\n        return this.sendRawTransaction(...args);\n    }\n\n    broadcastHex(...args) {\n        return this.sendHexTransaction(...args);\n    }\n\n    signTransaction(...args) {\n        return this.sign(...args);\n    }\n\n    /**\n     * Gets a network modification proposal by ID.\n     */\n    getProposal(proposalID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getProposal, proposalID);\n\n        if (!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        this.tronWeb.fullNode.request('wallet/getproposalbyid', {\n            id: parseInt(proposalID),\n        }, 'post').then(proposal => {\n            callback(null, proposal);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    listProposals(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.listProposals);\n\n        this.tronWeb.fullNode.request('wallet/listproposals', {}, 'post').then(({proposals = []}) => {\n            callback(null, proposals);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all parameters available for network modification proposals.\n     */\n    getChainParameters(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getChainParameters);\n\n        this.tronWeb.fullNode.request('wallet/getchainparameters', {}, 'post').then(({chainParameter = []}) => {\n            callback(null, chainParameter);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get the account resources\n     */\n    getAccountResources(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getAccountResources, address);\n\n        if (!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        this.tronWeb.fullNode.request('wallet/getaccountresource', {\n            address: this.tronWeb.address.toHex(address),\n        }, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get the exchange ID.\n     */\n    getExchangeByID(exchangeID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getExchangeByID, exchangeID);\n\n        if (!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        this.tronWeb.fullNode.request('wallet/getexchangebyid', {\n            id: exchangeID,\n        }, 'post').then(exchange => {\n            callback(null, exchange);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists the exchanges\n     */\n    listExchanges(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.listExchanges);\n\n        this.tronWeb.fullNode.request('wallet/listexchanges', {}, 'post').then(({exchanges = []}) => {\n            callback(null, exchanges);\n        }, 'post').catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    listExchangesPaginated(limit = 10, offset = 0, callback = false) {\n        if (utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n        if (utils.isFunction(limit)) {\n            callback = limit;\n            limit = 10;\n        }\n        if (!callback)\n            return this.injectPromise(this.listExchangesPaginated, limit, offset);\n\n        this.tronWeb.fullNode.request('wallet/getpaginatedexchangelist', {\n            limit,\n            offset\n        }, 'post').then(({exchanges = []}) => {\n            callback(null, exchanges);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get info about thre node\n     */\n    getNodeInfo(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getNodeInfo);\n\n        this.tronWeb.fullNode.request('wallet/getnodeinfo', {}, 'post').then(info => {\n            callback(null, info);\n        }, 'post').catch(err => callback(err));\n    }\n\n\n    getTokenListByName(tokenID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getTokenListByName, tokenID);\n\n        if (utils.isInteger(tokenID))\n            tokenID = tokenID.toString()\n\n        if (!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        this.tronWeb.fullNode.request('wallet/getassetissuelistbyname', {\n            value: this.tronWeb.fromUtf8(tokenID)\n        }, 'post').then(token => {\n            if (Array.isArray(token.assetIssue)) {\n                callback(null, token.assetIssue.map(t => this._parseToken(t)));\n            } else if (!token.name)\n                return callback('Token does not exist');\n\n            callback(null, this._parseToken(token));\n        }).catch(err => callback(err));\n    }\n\n    getTokenByID(tokenID = false, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.getTokenByID, tokenID);\n\n        if (utils.isInteger(tokenID))\n            tokenID = tokenID.toString()\n\n        if (!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyid', {\n            value: tokenID\n        }, 'post').then(token => {\n            if (!token.name)\n                return callback('Token does not exist');\n\n            callback(null, this._parseToken(token));\n        }).catch(err => callback(err));\n    }\n\n    async getReward(address, options = {}, callback = false) {\n        options.confirmed = true;\n        return this._getReward(address, options, callback);\n    }\n\n    async getUnconfirmedReward(address, options = {}, callback = false) {\n        options.confirmed = false;\n        return this._getReward(address, options, callback);\n    }\n\n    async getBrokerage(address, options = {}, callback = false) {\n        options.confirmed = true;\n        return this._getBrokerage(address, options, callback);\n    }\n\n    async getUnconfirmedBrokerage(address, options = {}, callback = false) {\n        options.confirmed = false;\n        return this._getBrokerage(address, options, callback);\n    }\n\n    async _getReward(address = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this._getReward, address, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n        const data = {\n            address: toHex(address)\n        };\n\n        this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(`wallet${options.confirmed ? 'solidity' : ''}/getReward`, data, 'post')\n            .then((result = {}) => {\n\n                if (typeof result.reward === 'undefined')\n                    return callback('Not found.');\n\n                callback(null, result.reward);\n            }).catch(err => callback(err));\n    }\n\n\n    async _getBrokerage(address = this.tronWeb.defaultAddress.hex, options, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        } else if (utils.isObject(address)) {\n            options = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if (!callback)\n            return this.injectPromise(this._getBrokerage, address, options);\n\n        if (this.validator.notValid([\n            {\n                name: 'origin',\n                type: 'address',\n                value: address\n            }\n        ], callback))\n            return;\n\n        const data = {\n            address: toHex(address)\n        };\n\n        this.tronWeb[options.confirmed ? 'solidityNode' : 'fullNode'].request(`wallet${options.confirmed ? 'solidity' : ''}/getBrokerage`, data, 'post')\n            .then((result = {}) => {\n\n                if (typeof result.brokerage === 'undefined')\n                    return callback('Not found.');\n\n                callback(null, result.brokerage);\n            }).catch(err => callback(err));\n    }\n\n};\n","import utils from 'utils';\nimport {ADDRESS_PREFIX_REGEX} from 'utils/address';\nimport {encodeParamsV2ByABI, decodeParamsV2ByABI} from 'utils/abi';\nimport injectpromise from 'injectpromise';\n\nconst getFunctionSelector = abi => {\n    abi.stateMutability = abi.stateMutability ? abi.stateMutability.toLowerCase() : 'nonpayable';\n    abi.type = abi.type ? abi.type.toLowerCase() : '';\n    if(abi.type === 'fallback' || abi.type === 'receive') return '0x';\n    let iface = new utils.ethersUtils.Interface([abi]);\n    if(abi.type === 'event') {\n      return iface.getEvent(abi.name).format(utils.ethersUtils.FormatTypes.sighash);\n    }\n    return iface.getFunction(abi.name).format(utils.ethersUtils.FormatTypes.sighash)\n}\n\nconst decodeOutput = (abi, output) => {\n    return decodeParamsV2ByABI(abi, output)\n};\n\nexport default class Method {\n    constructor(contract, abi) {\n        this.tronWeb = contract.tronWeb;\n        this.contract = contract;\n\n        this.abi = abi;\n        this.name = abi.name || (abi.name = abi.type);\n\n        this.inputs = abi.inputs || [];\n        this.outputs = abi.outputs || [];\n\n        this.functionSelector = getFunctionSelector(abi);\n        this.signature = this.tronWeb.sha3(this.functionSelector, false).slice(0, 8);\n        this.injectPromise = injectpromise(this);\n\n        this.defaultOptions = {\n            feeLimit: this.tronWeb.feeLimit,\n            callValue: 0,\n            userFeePercentage: 100,\n            shouldPollResponse: false // Only used for sign()\n        };\n    }\n\n    decodeInput(data) {\n        return decodeOutput(this.inputs, '0x' + data);\n    }\n\n    onMethod(...args) {\n      let rawParameter = '';\n      if(this.abi && !/event/i.test(this.abi.type)) {\n          rawParameter = encodeParamsV2ByABI(this.abi, args);\n      }\n      return {\n          call: (options = {}, callback = false) => {\n              if (utils.isFunction(options)) {\n                  callback = options;\n                  options = {};\n              }\n              options = {\n                ...options,\n                rawParameter\n              };\n\n              return this._call([], [], options, callback);\n          },\n          send: (options = {}, privateKey = this.tronWeb.defaultPrivateKey, callback = false) => {\n              if (utils.isFunction(privateKey)) {\n                  callback = privateKey;\n                  privateKey = this.tronWeb.defaultPrivateKey;\n              }\n              if (utils.isFunction(options)) {\n                callback = options;\n                options = {};\n              }\n              options = {\n                ...options,\n                rawParameter\n              };\n\n              return this._send([], [], options, privateKey, callback);\n          },\n          watch: (...methodArgs) => this._watch(...methodArgs)\n      }\n    }\n\n    async _call(types, args, options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this._call, types, args, options);\n\n        if (types.length !== args.length)\n            return callback('Invalid argument count provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        const {stateMutability} = this.abi;\n\n        if (!['pure', 'view'].includes(stateMutability.toLowerCase()))\n            return callback(`Methods with state mutability \"${stateMutability}\" must use send()`);\n\n        options = {\n            ...this.defaultOptions,\n            from: this.tronWeb.defaultAddress.hex,\n            ...options,\n            _isConstant: true\n        };\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        this.tronWeb.transactionBuilder.triggerSmartContract(\n            this.contract.address,\n            this.functionSelector,\n            options,\n            parameters,\n            options.from ? this.tronWeb.address.toHex(options.from) : false,\n            (err, transaction) => {\n                if (err)\n                    return callback(err);\n\n                if (!utils.hasProperty(transaction, 'constant_result'))\n                    return callback('Failed to execute');\n\n                try {\n\n                    const len = transaction.constant_result[0].length\n                    if (len === 0 || len % 64 === 8) {\n                        let msg = 'The call has been reverted or has thrown an error.'\n                        if (len !== 0) {\n                            msg += ' Error message: '\n                            let msg2 = ''\n                            let chunk = transaction.constant_result[0].substring(8)\n                            for (let i = 0; i < len - 8; i += 64) {\n                                msg2 += this.tronWeb.toUtf8(chunk.substring(i, i + 64))\n                            }\n                            msg += msg2.replace(/(\\u0000|\\u000b|\\f)+/g, ' ').replace(/ +/g, ' ').replace(/\\s+$/g, '');\n                        }\n                        return callback(msg)\n                    }\n\n                    let output = decodeOutput(this.abi, '0x' + transaction.constant_result[0]);\n\n                    if (output.length === 1 && Object.keys(output).length === 1) {\n                        output = output[0];\n                    }\n\n                    return callback(null, output);\n                } catch (ex) {\n                    return callback(ex);\n                }\n            });\n    }\n\n    async _send(types, args, options = {}, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this._send, types, args, options, privateKey);\n\n        if (types.length !== args.length)\n            throw new Error('Invalid argument count provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        const {stateMutability} = this.abi;\n\n        if (['pure', 'view'].includes(stateMutability.toLowerCase()))\n            return callback(`Methods with state mutability \"${stateMutability}\" must use call()`);\n\n        // If a function isn't payable, dont provide a callValue.\n        if (!['payable'].includes(stateMutability.toLowerCase()))\n            options.callValue = 0;\n\n        options = {\n            ...this.defaultOptions,\n            from: this.tronWeb.defaultAddress.hex,\n            ...options,\n        };\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        try {\n            const address = privateKey ? this.tronWeb.address.fromPrivateKey(privateKey) : this.tronWeb.defaultAddress.base58;\n            const transaction = await this.tronWeb.transactionBuilder.triggerSmartContract(\n                this.contract.address,\n                this.functionSelector,\n                options,\n                parameters,\n                this.tronWeb.address.toHex(address)\n            );\n\n            if (!transaction.result || !transaction.result.result)\n                return callback('Unknown error: ' + JSON.stringify(transaction, null, 2));\n\n            // If privateKey is false, this won't be signed here. We assume sign functionality will be replaced.\n            const signedTransaction = await this.tronWeb.trx.sign(transaction.transaction, privateKey);\n\n            if (!signedTransaction.signature) {\n                if (!privateKey)\n                    return callback('Transaction was not signed properly');\n\n                return callback('Invalid private key provided');\n            }\n\n            const broadcast = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n            if (broadcast.code) {\n                const err = {\n                    error: broadcast.code,\n                    message: broadcast.code\n                };\n                if (broadcast.message)\n                    err.message = this.tronWeb.toUtf8(broadcast.message);\n                return callback(err)\n            }\n\n            if (!options.shouldPollResponse)\n                return callback(null, signedTransaction.txID);\n\n            const checkResult = async (index = 0) => {\n                if (index === 20) {\n                    return callback({\n                        error: 'Cannot find result in solidity node',\n                        transaction: signedTransaction\n                    });\n                }\n\n                const output = await this.tronWeb.trx.getTransactionInfo(signedTransaction.txID);\n\n                if (!Object.keys(output).length) {\n                    return setTimeout(() => {\n                        checkResult(index + 1);\n                    }, 3000);\n                }\n\n                if (output.result && output.result === 'FAILED') {\n                    return callback({\n                        error: this.tronWeb.toUtf8(output.resMessage),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (!utils.hasProperty(output, 'contractResult')) {\n                    return callback({\n                        error: 'Failed to execute: ' + JSON.stringify(output, null, 2),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (options.rawResponse)\n                    return callback(null, output);\n\n                let decoded = decodeOutput(this.abi, '0x' + output.contractResult[0]);\n\n                if (decoded.length === 1 && Object.keys(decoded).length === 1) {\n                    decoded = decoded[0];\n                }\n\n                if (options.keepTxID) {\n                    return callback(null, [signedTransaction.txID, decoded]);\n                }\n\n                return callback(null, decoded);\n            }\n\n            checkResult();\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async _watch(options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!utils.isFunction(callback))\n            throw new Error('Expected callback to be provided');\n\n        if (!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if (!this.abi.type || !/event/i.test(this.abi.type))\n            return callback('Invalid method type for event watching');\n\n        if (!this.tronWeb.eventServer)\n            return callback('No event server configured');\n\n        let listener = false;\n        let lastBlock = false;\n        let since = Date.now() - 1000;\n\n        const getEvents = async () => {\n            try {\n\n                const params = {\n                    since,\n                    eventName: this.name,\n                    sort: 'block_timestamp',\n                    blockNumber: 'latest',\n                    filters: options.filters\n                }\n                if (options.resourceNode) {\n                    if (/full/i.test(options.resourceNode))\n                        params.onlyUnconfirmed = true\n                    else\n                        params.onlyConfirmed = true\n                }\n\n                const events = await this.tronWeb.event.getEventsByContractAddress(this.contract.address, params);\n                const [latestEvent] = events.sort((a, b) => b.block - a.block);\n                const newEvents = events.filter((event, index) => {\n\n                    if (options.resourceNode && event.resourceNode &&\n                        options.resourceNode.toLowerCase() !== event.resourceNode.toLowerCase()) {\n                        return false\n                    }\n\n                    const duplicate = events.slice(0, index).some(priorEvent => (\n                        JSON.stringify(priorEvent) == JSON.stringify(event)\n                    ));\n\n                    if (duplicate)\n                        return false;\n\n                    if (!lastBlock)\n                        return true;\n\n                    return event.block > lastBlock;\n                });\n\n                if (latestEvent)\n                    lastBlock = latestEvent.block;\n\n                return newEvents;\n            } catch (ex) {\n                return Promise.reject(ex);\n            }\n\n        };\n\n        const bindListener = () => {\n            if (listener)\n                clearInterval(listener);\n\n            listener = setInterval(() => {\n                getEvents().then(events => events.forEach(event => {\n                    callback(null, utils.parseEvent(event, this.abi))\n                })).catch(err => callback(err));\n            }, 3000);\n        };\n\n        await getEvents();\n        bindListener();\n\n        return {\n            start: bindListener,\n            stop: () => {\n                if (!listener)\n                    return;\n\n                clearInterval(listener);\n                listener = false;\n            }\n        }\n    }\n}\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport Method from './method';\nimport injectpromise from 'injectpromise';\n\nexport default class Contract {\n    constructor(tronWeb = false, abi = [], address = false) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = injectpromise(this);\n\n        this.address = address;\n        this.abi = abi;\n\n        this.eventListener = false;\n        this.bytecode = false;\n        this.deployed = false;\n        this.lastBlock = false;\n\n        this.methods = {};\n        this.methodInstances = {};\n        this.props = [];\n\n        if (this.tronWeb.isAddress(address))\n            this.deployed = true;\n        else this.address = false;\n\n        this.loadAbi(abi);\n    }\n\n    async _getEvents(options = {}) {\n        const events = await this.tronWeb.event.getEventsByContractAddress(this.address, options);\n        const [latestEvent] = events.sort((a, b) => b.block - a.block);\n        const newEvents = events.filter((event, index) => {\n\n            if (options.resourceNode && event.resourceNode &&\n                options.resourceNode.toLowerCase() !== event.resourceNode.toLowerCase()) {\n                return false\n            }\n\n            const duplicate = events.slice(0, index).some(priorEvent => (\n                JSON.stringify(priorEvent) == JSON.stringify(event)\n            ));\n\n            if (duplicate)\n                return false;\n\n            if (!this.lastBlock)\n                return true;\n\n            return event.block > this.lastBlock;\n        });\n\n        if (latestEvent)\n            this.lastBlock = latestEvent.block;\n\n        return newEvents;\n    }\n\n    async _startEventListener(options = {}, callback) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (this.eventListener)\n            clearInterval(this.eventListener);\n\n        if (!this.tronWeb.eventServer)\n            throw new Error('Event server is not configured');\n\n        if (!this.address)\n            throw new Error('Contract is not configured with an address');\n\n        this.eventCallback = callback;\n        await this._getEvents(options);\n\n        this.eventListener = setInterval(() => {\n            this._getEvents(options).then(newEvents => newEvents.forEach(event => {\n                this.eventCallback && this.eventCallback(event)\n            })).catch(err => {\n                console.error('Failed to get event list', err);\n            });\n        }, 3000);\n    }\n\n    _stopEventListener() {\n        if (!this.eventListener)\n            return;\n\n        clearInterval(this.eventListener);\n        this.eventListener = false;\n        this.eventCallback = false;\n    }\n\n    hasProperty(property) {\n        return this.hasOwnProperty(property) || this.__proto__.hasOwnProperty(property);\n    }\n\n    loadAbi(abi) {\n        this.abi = abi;\n        this.methods = {};\n\n        this.props.forEach(prop => delete this[prop]);\n\n        abi.forEach(func => {\n            // Don't build a method for constructor function. That's handled through contract create.\n            if (!func.type || /constructor/i.test(func.type))\n                return;\n\n            const method = new Method(this, func);\n            const methodCall = method.onMethod.bind(method);\n\n            const {\n                name,\n                functionSelector,\n                signature\n            } = method;\n\n            this.methods[name] = methodCall;\n            this.methods[functionSelector] = methodCall;\n            this.methods[signature] = methodCall;\n\n            this.methodInstances[name] = method;\n            this.methodInstances[functionSelector] = method;\n            this.methodInstances[signature] = method;\n\n            if (!this.hasProperty(name)) {\n                this[name] = methodCall;\n                this.props.push(name);\n            }\n\n            if (!this.hasProperty(functionSelector)) {\n                this[functionSelector] = methodCall;\n                this.props.push(functionSelector);\n            }\n\n            if (!this.hasProperty(signature)) {\n                this[signature] = methodCall;\n                this.props.push(signature);\n            }\n        });\n    }\n\n    decodeInput(data) {\n\n        const methodName = data.substring(0, 8);\n        const inputData = data.substring(8);\n\n        if (!this.methodInstances[methodName])\n            throw new Error('Contract method ' + methodName + \" not found\");\n\n        const methodInstance = this.methodInstances[methodName];\n\n        return {\n            name: methodInstance.name,\n            params: this.methodInstances[methodName].decodeInput(inputData),\n        }\n    }\n\n    async new(options, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if (utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.new, options, privateKey);\n\n        try {\n            const address = this.tronWeb.address.fromPrivateKey(privateKey);\n            const transaction = await this.tronWeb.transactionBuilder.createSmartContract(options, address);\n            const signedTransaction = await this.tronWeb.trx.sign(transaction, privateKey);\n            const contract = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n            if (contract.code)\n                return callback({\n                    error: contract.code,\n                    message: this.tronWeb.toUtf8(contract.message)\n                })\n\n            await utils.sleep(3000);\n            return this.at(signedTransaction.contract_address, callback);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async at(contractAddress, callback = false) {\n        if (!callback)\n            return this.injectPromise(this.at, contractAddress);\n\n        try {\n            const contract = await this.tronWeb.trx.getContract(contractAddress);\n\n            if (!contract.contract_address)\n                return callback('Unknown error: ' + JSON.stringify(contract, null, 2));\n\n            this.address = contract.contract_address;\n            this.bytecode = contract.bytecode;\n            this.deployed = true;\n\n            this.loadAbi(contract.abi ? contract.abi.entrys ? contract.abi.entrys : [] : []);\n\n            return callback(null, this);\n        } catch (ex) {\n            if (ex.toString().includes('does not exist'))\n                return callback('Contract has not been deployed on the network');\n\n            return callback(ex);\n        }\n    }\n\n    events(options = {}, callback = false) {\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!utils.isFunction(callback))\n            throw new Error('Callback function expected');\n\n        const self = this;\n\n        return {\n            start(startCallback = false) {\n                if (!startCallback) {\n                    self._startEventListener(options, callback);\n                    return this;\n                }\n\n                self._startEventListener(options, callback).then(() => {\n                    startCallback();\n                }).catch(err => {\n                    startCallback(err)\n                });\n\n                return this;\n            },\n            stop() {\n                self._stopEventListener();\n            }\n        };\n    }\n}\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport semver from 'semver';\n\nexport default class Plugin {\n\n    constructor(tronWeb = false, options = {}) {\n        if (!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n        this.tronWeb = tronWeb;\n        this.pluginNoOverride = ['register'];\n        this.disablePlugins = options.disablePlugins;\n    }\n\n    register(Plugin, options) {\n        let pluginInterface = {\n            requires: '0.0.0',\n            components: {}\n        }\n        let result = {\n            libs: [],\n            plugged: [],\n            skipped: []\n        }\n        if (this.disablePlugins) {\n            result.error = 'This instance of TronWeb has plugins disabled.'\n            return result;\n        }\n        const plugin = new Plugin(this.tronWeb)\n        if (utils.isFunction(plugin.pluginInterface)) {\n            pluginInterface = plugin.pluginInterface(options)\n        }\n        if (semver.satisfies(TronWeb.version, pluginInterface.requires)) {\n            if (pluginInterface.fullClass) {\n                // plug the entire class at the same level of tronWeb.trx\n                let className = plugin.constructor.name\n                let classInstanceName = className.substring(0, 1).toLowerCase() + className.substring(1)\n                if (className !== classInstanceName) {\n                    TronWeb[className] = Plugin\n                    this.tronWeb[classInstanceName] = plugin\n                    result.libs.push(className)\n                }\n            } else {\n                // plug methods into a class, like trx\n                for (let component in pluginInterface.components) {\n                    if (!this.tronWeb.hasOwnProperty(component)) {\n                        continue\n                    }\n                    let methods = pluginInterface.components[component]\n                    let pluginNoOverride = this.tronWeb[component].pluginNoOverride || []\n                    for (let method in methods) {\n                        if (method === 'constructor' || (this.tronWeb[component][method] &&\n                            (pluginNoOverride.includes(method) // blacklisted methods\n                                || /^_/.test(method)) // private methods\n                        )) {\n                            result.skipped.push(method)\n                            continue\n                        }\n                        this.tronWeb[component][method] = methods[method].bind(this.tronWeb[component])\n                        result.plugged.push(method)\n                    }\n                }\n            }\n        } else {\n            throw new Error('The plugin is not compatible with this version of TronWeb')\n        }\n        return result\n    }\n}\n\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport providers from \"./providers\";\nimport querystring from \"querystring\";\nimport injectpromise from 'injectpromise';\n\nexport default class Event {\n\n    constructor(tronWeb = false) {\n        if (!tronWeb || !(tronWeb instanceof TronWeb))\n            throw new Error('Expected instance of TronWeb');\n        this.tronWeb = tronWeb;\n        this.injectPromise = injectpromise(this);\n    }\n\n    setServer(eventServer = false, healthcheck = 'healthcheck') {\n        if (!eventServer)\n            return this.tronWeb.eventServer = false;\n\n        if (utils.isString(eventServer))\n            eventServer = new providers.HttpProvider(eventServer);\n\n        if (!this.tronWeb.isValidProvider(eventServer))\n            throw new Error('Invalid event server provided');\n\n        this.tronWeb.eventServer = eventServer;\n        this.tronWeb.eventServer.isConnected = () => this.tronWeb.eventServer.request(healthcheck).then(() => true).catch(() => false);\n    }\n\n    getEventsByContractAddress(contractAddress = false, options = {}, callback = false) {\n\n        let {\n            sinceTimestamp,\n            since,\n            fromTimestamp,\n            eventName,\n            blockNumber,\n            size,\n            page,\n            onlyConfirmed,\n            onlyUnconfirmed,\n            previousLastEventFingerprint,\n            previousFingerprint,\n            fingerprint,\n            rawResponse,\n            sort,\n            filters\n        } = Object.assign({\n            sinceTimestamp: 0,\n            eventName: false,\n            blockNumber: false,\n            size: 20,\n            page: 1\n        }, options)\n\n        if (!callback)\n            return this.injectPromise(this.getEventsByContractAddress, contractAddress, options);\n\n        fromTimestamp = fromTimestamp || sinceTimestamp || since;\n\n        if (!this.tronWeb.eventServer)\n            return callback('No event server configured');\n\n        const routeParams = [];\n\n        if (!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if (eventName && !contractAddress)\n            return callback('Usage of event name filtering requires a contract address');\n\n        if (typeof fromTimestamp !== 'undefined' && !utils.isInteger(fromTimestamp))\n            return callback('Invalid fromTimestamp provided');\n\n        if (!utils.isInteger(size))\n            return callback('Invalid size provided');\n\n        if (size > 200) {\n            console.warn('Defaulting to maximum accepted size: 200');\n            size = 200;\n        }\n\n        if (!utils.isInteger(page))\n            return callback('Invalid page provided');\n\n        if (blockNumber && !eventName)\n            return callback('Usage of block number filtering requires an event name');\n\n        if (contractAddress)\n            routeParams.push(this.tronWeb.address.fromHex(contractAddress));\n\n        if (eventName)\n            routeParams.push(eventName);\n\n        if (blockNumber)\n            routeParams.push(blockNumber);\n\n        const qs = {\n            size,\n            page\n        }\n\n        if (typeof filters === 'object' && Object.keys(filters).length > 0) {\n            qs.filters = JSON.stringify(filters);\n        }\n\n        if (fromTimestamp) {\n            qs.fromTimestamp = qs.since = fromTimestamp;\n        }\n\n        if (onlyConfirmed)\n            qs.only_confirmed = onlyConfirmed\n\n        if (onlyUnconfirmed && !onlyConfirmed)\n            qs.only_unconfirmed = onlyUnconfirmed\n\n        if (sort)\n            qs.sort = sort\n\n        fingerprint = fingerprint || previousFingerprint || previousLastEventFingerprint\n        if (fingerprint)\n            qs.fingerprint = fingerprint\n\n        return this.tronWeb.eventServer.request(`event/contract/${routeParams.join('/')}?${querystring.stringify(qs)}`).then((data = false) => {\n            if (!data)\n                return callback('Unknown error occurred');\n\n            if (!utils.isArray(data))\n                return callback(data);\n\n            return callback(null,\n                rawResponse === true ? data : data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback((err.response && err.response.data) || err));\n    }\n\n\n    getEventsByTransactionID(transactionID = false, options = {}, callback = false) {\n\n        if (utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if (!callback)\n            return this.injectPromise(this.getEventsByTransactionID, transactionID, options);\n\n        if (!this.tronWeb.eventServer)\n            return callback('No event server configured');\n\n        return this.tronWeb.eventServer.request(`event/transaction/${transactionID}`).then((data = false) => {\n            if (!data)\n                return callback('Unknown error occurred');\n\n            if (!utils.isArray(data))\n                return callback(data);\n\n            return callback(null,\n                options.rawResponse === true ? data : data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback((err.response && err.response.data) || err));\n    }\n\n}\n\n","import injectpromise from 'injectpromise';\nimport Validator from 'paramValidator';\n\nexport default class SideChain {\n    constructor(sideOptions, TronWeb = false, mainchain = false, privateKey = false) {\n        this.mainchain = mainchain;\n        const { fullHost, fullNode, solidityNode, eventServer, mainGatewayAddress, sideGatewayAddress, sideChainId } = sideOptions;\n        this.sidechain = new TronWeb(fullHost || fullNode, fullHost || solidityNode, fullHost || eventServer, privateKey);\n        this.isAddress = this.mainchain.isAddress;\n        this.utils = this.mainchain.utils;\n        this.setMainGatewayAddress(mainGatewayAddress);\n        this.setSideGatewayAddress(sideGatewayAddress);\n        this.setChainId(sideChainId);\n        this.injectPromise = injectpromise(this);\n        this.validator = new Validator(this.sidechain);\n\n        const self = this;\n        this.sidechain.trx.sign = (...args) => {\n            return self.sign(...args);\n        };\n        this.sidechain.trx.multiSign = (...args) => {\n            return self.multiSign(...args);\n        };\n    }\n    setMainGatewayAddress(mainGatewayAddress) {\n        if (!this.isAddress(mainGatewayAddress))\n            throw new Error('Invalid main gateway address provided');\n        this.mainGatewayAddress = mainGatewayAddress;\n    }\n\n    setSideGatewayAddress(sideGatewayAddress) {\n        if (!this.isAddress(sideGatewayAddress))\n            throw new Error('Invalid side gateway address provided');\n        this.sideGatewayAddress = sideGatewayAddress;\n    }\n\n    setChainId(sideChainId) {\n        if (!this.utils.isString(sideChainId) || !sideChainId)\n            throw new Error('Invalid side chainId provided');\n        this.chainId = sideChainId;\n    }\n\n    signTransaction(priKeyBytes, transaction) {\n        if (typeof priKeyBytes === 'string') {\n            priKeyBytes = this.utils.code.hexStr2byteArray(priKeyBytes);\n        }\n        let chainIdByteArr = this.utils.code.hexStr2byteArray(this.chainId);\n\n        let byteArr = this.utils.code.hexStr2byteArray(transaction.txID).concat(chainIdByteArr);\n        let byteArrHash = this.sidechain.utils.ethersUtils.sha256(byteArr);\n\n        const signature = this.utils.crypto.ECKeySign(this.utils.code.hexStr2byteArray(byteArrHash.replace(/^0x/, '')), priKeyBytes);\n\n        if (Array.isArray(transaction.signature)) {\n            if (!transaction.signature.includes(signature))\n                transaction.signature.push(signature);\n        } else\n            transaction.signature = [signature];\n        return transaction;\n    }\n\n    async multiSign(transaction = false, privateKey = this.sidechain.defaultPrivateKey, permissionId = false, callback = false) {\n        if (this.utils.isFunction(permissionId)) {\n            callback = permissionId;\n            permissionId = 0;\n        }\n\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n            permissionId = 0;\n        }\n\n        if (!callback) return this.injectPromise(this.multiSign, transaction, privateKey, permissionId);\n\n        if (!this.utils.isObject(transaction) || !transaction.raw_data || !transaction.raw_data.contract) return callback('Invalid transaction provided');\n\n        if (!transaction.raw_data.contract[0].Permission_id && permissionId > 0) {\n            // set permission id\n            transaction.raw_data.contract[0].Permission_id = permissionId;\n\n            // check if private key insides permission list\n            const address = this.sidechain.address.toHex(this.sidechain.address.fromPrivateKey(privateKey)).toLowerCase();\n            const signWeight = await this.sidechain.trx.getSignWeight(transaction, permissionId);\n\n            if (signWeight.result.code === 'PERMISSION_ERROR') {\n                return callback(signWeight.result.message);\n            }\n\n            let foundKey = false;\n            signWeight.permission.keys.map(key => {\n                if (key.address === address) foundKey = true;\n            });\n\n            if (!foundKey) return callback(privateKey + ' has no permission to sign');\n\n            if (signWeight.approved_list && signWeight.approved_list.indexOf(address) != -1) {\n                return callback(privateKey + ' already sign transaction');\n            }\n\n            // reset transaction\n            if (signWeight.transaction && signWeight.transaction.transaction) {\n                transaction = signWeight.transaction.transaction;\n                transaction.raw_data.contract[0].Permission_id = permissionId;\n            } else {\n                return callback('Invalid transaction provided');\n            }\n        }\n        // sign\n        try {\n            return callback(null, this.signTransaction(privateKey, transaction));\n        } catch (ex) {\n            callback(ex);\n        }\n    }\n\n    async sign(transaction = false, privateKey = this.sidechain.defaultPrivateKey, useTronHeader = true, multisig = false, callback = false) {\n        if (this.utils.isFunction(multisig)) {\n            callback = multisig;\n            multisig = false;\n        }\n\n        if (this.utils.isFunction(useTronHeader)) {\n            callback = useTronHeader;\n            useTronHeader = true;\n            multisig = false;\n        }\n\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.sidechain.defaultPrivateKey;\n            useTronHeader = true;\n            multisig = false;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sign, transaction, privateKey, useTronHeader, multisig);\n\n        // Message signing\n        if (this.utils.isString(transaction)) {\n\n            if (!this.utils.isHex(transaction))\n                return callback('Expected hex message input');\n\n            try {\n                const signatureHex = this.sidechain.trx.signString(transaction, privateKey, useTronHeader);\n                return callback(null, signatureHex);\n            } catch (ex) {\n                callback(ex);\n            }\n        }\n\n        if (!this.utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n        if (!multisig && transaction.signature)\n            return callback('Transaction is already signed');\n\n        try {\n            if (!multisig) {\n                const address = this.sidechain.address.toHex(\n                    this.sidechain.address.fromPrivateKey(privateKey)\n                ).toLowerCase();\n                if (address !== this.sidechain.address.toHex(transaction.raw_data.contract[0].parameter.value.owner_address))\n                    return callback('Private key does not match address in transaction');\n            }\n            return callback(null,\n                this.signTransaction(privateKey, transaction)\n            );\n        } catch (ex) {\n            callback(ex);\n        }\n    }\n\n    /**\n    * deposit asset to sidechain\n    */\n    async depositTrx(\n        callValue,\n        depositFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.depositTrx, callValue, depositFee, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'callValue',\n                type: 'integer',\n                value: callValue,\n                gte: 0\n            },\n            {\n                name: 'depositFee',\n                type: 'integer',\n                value: depositFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gte: 0\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            callValue: Number(callValue) + Number(depositFee),\n            feeLimit,\n            ...options\n        };\n        try {\n            const contractInstance = await this.mainchain.contract().at(this.mainGatewayAddress);\n            const result = await contractInstance.depositTRX().send(options, privateKey);\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async depositTrc10(\n        tokenId,\n        tokenValue,\n        depositFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.depositTrc10, tokenId, tokenValue, depositFee, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'tokenValue',\n                type: 'integer',\n                value: tokenValue,\n                gte: 0\n            },\n            {\n                name: 'depositFee',\n                type: 'integer',\n                value: depositFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gte: 0\n            },\n            {\n                name: 'tokenId',\n                type: 'integer',\n                value: tokenId,\n                gte: 0\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            tokenId,\n            tokenValue,\n            feeLimit,\n            ...options,\n            callValue: depositFee\n        };\n        try {\n            const contractInstance = await this.mainchain.contract().at(this.mainGatewayAddress);\n            const result = await contractInstance.depositTRC10(tokenId, tokenValue).send(options, privateKey);\n            callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async depositTrc(\n        functionSelector,\n        num,\n        fee,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.depositTrc, functionSelector, num, fee, feeLimit, contractAddress, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'functionSelector',\n                type: 'not-empty-string',\n                value: functionSelector\n            },\n            {\n                name: 'num',\n                type: 'integer',\n                value: num,\n                gte: 0\n            },\n            {\n                name: 'fee',\n                type: 'integer',\n                value: fee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gte: 0\n            },\n            {\n                name: 'contractAddress',\n                type: 'address',\n                value: contractAddress\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            feeLimit,\n            ...options,\n            callValue: fee,\n            tokenId: '',\n            tokenValue: 0\n        };\n        try {\n            let result = null;\n            if (functionSelector === 'approve') {\n                const approveInstance = await this.mainchain.contract().at(contractAddress);\n                result = await approveInstance.approve(this.mainGatewayAddress, num).send(options, privateKey);\n            } else {\n                const contractInstance = await this.mainchain.contract().at(this.mainGatewayAddress);\n                switch (functionSelector) {\n                    case 'depositTRC20':\n                        result = await contractInstance.depositTRC20(contractAddress, num).send(options, privateKey);\n                        break;\n                    case 'depositTRC721':\n                        result = await contractInstance.depositTRC721(contractAddress, num).send(options, privateKey);\n                        break;\n                    case 'retryDeposit':\n                        result = await contractInstance.retryDeposit(num).send(options, privateKey);\n                        break;\n                    case 'retryMapping':\n                        result = await contractInstance.retryMapping(num).send(options, privateKey);\n                        break;\n                    default:\n                        break;\n                }\n            }\n            callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async approveTrc20(\n        num,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'approve';\n        return this.depositTrc(\n            functionSelector,\n            num,\n            0,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async approveTrc721(\n        id,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'approve';\n        return this.depositTrc(\n            functionSelector,\n            id,\n            0,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async depositTrc20(\n        num,\n        depositFee,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'depositTRC20';\n        return this.depositTrc(\n            functionSelector,\n            num,\n            depositFee,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async depositTrc721(\n        id,\n        depositFee,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'depositTRC721';\n        return this.depositTrc(\n            functionSelector,\n            id,\n            depositFee,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    /**\n     * mapping asset TRC20 or TRC721 to DAppChain\n     */\n    async mappingTrc(\n        trxHash,\n        mappingFee,\n        feeLimit,\n        functionSelector,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.mappingTrc, trxHash, mappingFee, feeLimit, functionSelector, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'trxHash',\n                type: 'not-empty-string',\n                value: trxHash\n            },\n            {\n                name: 'mappingFee',\n                type: 'integer',\n                value: mappingFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gte: 0\n            }\n        ], callback)) {\n            return;\n        }\n        trxHash = trxHash.startsWith('0x') ? trxHash : ('0x' + trxHash);\n        options = {\n            feeLimit,\n            ...options,\n            callValue: mappingFee\n        };\n        try {\n            const contractInstance = await this.mainchain.contract().at(this.mainGatewayAddress);\n            let result = null;\n            if (functionSelector === 'mappingTRC20') {\n                result = await contractInstance.mappingTRC20(trxHash).send(options, privateKey);\n            } else if (functionSelector === 'mappingTRC721') {\n                result = await contractInstance.mappingTRC721(trxHash).send(options, privateKey);\n            } else {\n                callback(new Error('type must be trc20 or trc721'));\n            }\n            callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async mappingTrc20(\n        trxHash,\n        mappingFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'mappingTRC20';\n        return this.mappingTrc(\n            trxHash,\n            mappingFee,\n            feeLimit,\n            functionSelector,\n            options,\n            privateKey,\n            callback);\n    }\n\n    async mappingTrc721(\n        trxHash,\n        mappingFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'mappingTRC721';\n        return this.mappingTrc(\n            trxHash,\n            mappingFee,\n            feeLimit,\n            functionSelector,\n            options,\n            privateKey,\n            callback);\n    }\n\n    /**\n     * withdraw trx from sidechain to mainchain\n     */\n    async withdrawTrx(\n        callValue,\n        withdrawFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.withdrawTrx, callValue, withdrawFee, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'callValue',\n                type: 'integer',\n                value: callValue,\n                gte: 0\n            },\n            {\n                name: 'withdrawFee',\n                type: 'integer',\n                value: withdrawFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gte: 0\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            callValue: Number(callValue) + Number(withdrawFee),\n            feeLimit,\n            ...options\n        };\n        try {\n            const contractInstance = await this.sidechain.contract().at(this.sideGatewayAddress);\n            const result = await contractInstance.withdrawTRX().send(options, privateKey);\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async withdrawTrc10(\n        tokenId,\n        tokenValue,\n        withdrawFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.withdrawTrc10, tokenId, tokenValue, withdrawFee, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'tokenId',\n                type: 'integer',\n                value: tokenId,\n                gte: 0\n            },\n            {\n                name: 'tokenValue',\n                type: 'integer',\n                value: tokenValue,\n                gte: 0\n            },\n            {\n                name: 'withdrawFee',\n                type: 'integer',\n                value: withdrawFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gte: 0\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            tokenValue,\n            tokenId,\n            callValue: withdrawFee,\n            feeLimit,\n            ...options\n        };\n        try {\n            const contractInstance = await this.sidechain.contract().at(this.sideGatewayAddress);\n            const result = await contractInstance.withdrawTRC10(tokenId, tokenValue).send(options, privateKey);\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async withdrawTrc(\n        functionSelector,\n        numOrId,\n        withdrawFee,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.withdrawTrc, functionSelector, numOrId, withdrawFee, feeLimit, contractAddress, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'functionSelector',\n                type: 'not-empty-string',\n                value: functionSelector\n            },\n            {\n                name: 'numOrId',\n                type: 'integer',\n                value: numOrId,\n                gte: 0\n            },\n            {\n                name: 'withdrawFee',\n                type: 'integer',\n                value: withdrawFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gte: 0\n            },\n            {\n                name: 'contractAddress',\n                type: 'address',\n                value: contractAddress\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            feeLimit,\n            ...options,\n            callValue: withdrawFee\n        };\n        const parameters = [\n            {\n                type: 'uint256',\n                value: numOrId\n            }\n        ];\n\n        try {\n            const address = privateKey ? this.sidechain.address.fromPrivateKey(privateKey) : this.sidechain.defaultAddress.base58;\n            const transaction = await this.sidechain.transactionBuilder.triggerSmartContract(\n                contractAddress,\n                functionSelector,\n                options,\n                parameters,\n                this.sidechain.address.toHex(address)\n            );\n            if (!transaction.result || !transaction.result.result) {\n                return callback('Unknown error: ' + JSON.stringify(transaction.transaction, null, 2));\n            }\n\n            const signedTransaction = await this.sidechain.trx.sign(transaction.transaction, privateKey);\n\n            if (!signedTransaction.signature) {\n                if (!privateKey)\n                    return callback('Transaction was not signed properly');\n\n                return callback('Invalid private key provided');\n            }\n\n            const broadcast = await this.sidechain.trx.sendRawTransaction(signedTransaction);\n            if (broadcast.code) {\n                const err = {\n                    error: broadcast.code,\n                    message: broadcast.code\n                };\n                if (broadcast.message)\n                    err.message = this.sidechain.toUtf8(broadcast.message);\n                return callback(err)\n            }\n\n            if (!options.shouldPollResponse)\n                return callback(null, signedTransaction.txID);\n\n            const checkResult = async (index = 0) => {\n                if (index == 20) {\n                    return callback({\n                        error: 'Cannot find result in solidity node',\n                        transaction: signedTransaction\n                    });\n                }\n\n                const output = await this.sidechain.trx.getTransactionInfo(signedTransaction.txID);\n\n                if (!Object.keys(output).length) {\n                    return setTimeout(() => {\n                        checkResult(index + 1);\n                    }, 3000);\n                }\n\n                if (output.result && output.result == 'FAILED') {\n                    return callback({\n                        error: this.sidechain.toUtf8(output.resMessage),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (!this.utils.hasProperty(output, 'contractResult')) {\n                    return callback({\n                        error: 'Failed to execute: ' + JSON.stringify(output, null, 2),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (options.rawResponse)\n                    return callback(null, output);\n\n                let decoded = decodeOutput(this.outputs, '0x' + output.contractResult[0]);\n\n                if (decoded.length === 1)\n                    decoded = decoded[0];\n\n                return callback(null, decoded);\n            }\n\n            checkResult();\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async withdrawTrc20(\n        num,\n        withdrawFee,\n        feeLimit,\n        contractAddress,\n        options,\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'withdrawal(uint256)';\n        return this.withdrawTrc(\n            functionSelector,\n            num,\n            withdrawFee,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback);\n    }\n\n    async withdrawTrc721(\n        id,\n        withdrawFee,\n        feeLimit,\n        contractAddress,\n        options,\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'withdrawal(uint256)';\n        return this.withdrawTrc(\n            functionSelector,\n            id,\n            withdrawFee,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback);\n    }\n\n\n    async injectFund(\n        num,\n        feeLimit,\n        options,\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.injectFund, num, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'num',\n                type: 'integer',\n                value: num,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gte: 0\n            }\n        ], callback)) {\n            return;\n        }\n\n        try {\n            const address = this.sidechain.address.fromPrivateKey(privateKey);\n            const hexAddress = this.sidechain.address.toHex(address);\n            const transaction = await this.sidechain.fullNode.request('/wallet/fundinject', {\n                owner_address: hexAddress,\n                amount: num\n            }, 'post');\n\n            const signedTransaction = await this.sidechain.trx.sign(transaction, privateKey);\n\n            if (!signedTransaction.signature) {\n                if (!privateKey)\n                    return callback('Transaction was not signed properly');\n\n                return callback('Invalid private key provided');\n            }\n\n            const broadcast = await this.sidechain.trx.sendRawTransaction(signedTransaction);\n            if (broadcast.code) {\n                const err = {\n                    error: broadcast.code,\n                    message: broadcast.code\n                };\n                if (broadcast.message)\n                    err.message = this.mainchain.toUtf8(broadcast.message);\n                return callback(err)\n            }\n            return callback(null, signedTransaction.txID);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async retryWithdraw(\n        nonce,\n        retryWithdrawFee,\n        feeLimit,\n        options = {},\n        privateKey = this.sidechain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'retryWithdraw(uint256)';\n        return this.withdrawTrc(\n            functionSelector,\n            nonce,\n            retryWithdrawFee,\n            feeLimit,\n            this.sideGatewayAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async retryDeposit(\n        nonce,\n        retryDepositFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'retryDeposit';\n        return this.depositTrc(\n            functionSelector,\n            nonce,\n            retryDepositFee,\n            feeLimit,\n            this.mainGatewayAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async retryMapping(\n        nonce,\n        retryMappingFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'retryMapping';\n        return this.depositTrc(\n            functionSelector,\n            nonce,\n            retryMappingFee,\n            feeLimit,\n            this.mainGatewayAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n}\n\n","import providers from 'lib/providers';\nimport utils from 'utils';\nimport BigNumber from 'bignumber.js';\nimport EventEmitter from 'eventemitter3';\nimport { version } from '../package.json';\nimport semver from 'semver';\nimport injectpromise from 'injectpromise';\n\nimport TransactionBuilder from 'lib/transactionBuilder';\nimport Trx from 'lib/trx';\nimport Contract from 'lib/contract';\nimport Plugin from 'lib/plugin';\nimport Event from 'lib/event';\nimport SideChain from 'lib/sidechain';\nimport { keccak256 } from 'utils/ethersUtils';\nimport { ADDRESS_PREFIX } from 'utils/address';\n\nconst DEFAULT_VERSION = '3.5.0';\n\nconst FEE_LIMIT = 150000000;\n\nexport default class TronWeb extends EventEmitter {\n    static providers = providers;\n    static BigNumber = BigNumber;\n    static TransactionBuilder = TransactionBuilder;\n    static Trx = Trx;\n    static Contract = Contract;\n    static Plugin = Plugin;\n    static Event = Event;\n    static version = version;\n    static utils = utils;\n\n    constructor(options = false,\n        // for retro-compatibility:\n        solidityNode = false, eventServer = false, sideOptions = false, privateKey = false) {\n        super();\n\n        let fullNode;\n        let headers = false;\n        let eventHeaders = false;\n\n        if (typeof options === 'object' && (options.fullNode || options.fullHost)) {\n            fullNode = options.fullNode || options.fullHost;\n            sideOptions = solidityNode;\n            solidityNode = options.solidityNode || options.fullHost;\n            eventServer = options.eventServer || options.fullHost;\n            headers = options.headers || false;\n            eventHeaders = options.eventHeaders || headers;\n            privateKey = options.privateKey;\n        } else {\n            fullNode = options;\n        }\n        if (utils.isString(fullNode))\n            fullNode = new providers.HttpProvider(fullNode);\n\n        if (utils.isString(solidityNode))\n            solidityNode = new providers.HttpProvider(solidityNode);\n\n        if (utils.isString(eventServer))\n            eventServer = new providers.HttpProvider(eventServer);\n\n        this.event = new Event(this);\n        this.transactionBuilder = new TransactionBuilder(this);\n        this.trx = new Trx(this);\n        this.plugin = new Plugin(this, options);\n        this.utils = utils;\n\n        this.setFullNode(fullNode);\n        this.setSolidityNode(solidityNode);\n        this.setEventServer(eventServer);\n\n        this.providers = providers;\n        this.BigNumber = BigNumber;\n\n        this.defaultBlock = false;\n        this.defaultPrivateKey = false;\n        this.defaultAddress = {\n            hex: false,\n            base58: false\n        };\n\n        [\n            'sha3', 'toHex', 'toUtf8', 'fromUtf8',\n            'toAscii', 'fromAscii', 'toDecimal', 'fromDecimal',\n            'toSun', 'fromSun', 'toBigNumber', 'isAddress',\n            'createAccount', 'address', 'version'\n        ].forEach(key => {\n            this[key] = TronWeb[key];\n        });\n        // for sidechain\n        if (typeof sideOptions === 'object' && (sideOptions.fullNode || sideOptions.fullHost)) {\n            this.sidechain = new SideChain(sideOptions, TronWeb, this, privateKey);\n        } else {\n            privateKey = privateKey || sideOptions;\n        }\n\n        if (privateKey)\n            this.setPrivateKey(privateKey);\n        this.fullnodeVersion = DEFAULT_VERSION;\n        this.feeLimit = FEE_LIMIT;\n        this.injectPromise = injectpromise(this);\n\n        if (headers) {\n            this.setFullNodeHeader(headers);\n        }\n\n        if (eventHeaders) {\n            this.setEventHeader(eventHeaders);\n        }\n    }\n\n    async getFullnodeVersion() {\n        try {\n            const nodeInfo = await this.trx.getNodeInfo()\n            this.fullnodeVersion = nodeInfo.configNodeInfo.codeVersion\n            if (this.fullnodeVersion.split('.').length === 2) {\n                this.fullnodeVersion += '.0';\n            }\n        } catch (err) {\n            this.fullnodeVersion = DEFAULT_VERSION;\n        }\n    }\n\n    setDefaultBlock(blockID = false) {\n        if ([false, 'latest', 'earliest', 0].includes(blockID)) {\n            return this.defaultBlock = blockID;\n        }\n\n        if (!utils.isInteger(blockID) || !blockID)\n            throw new Error('Invalid block ID provided');\n\n        this.defaultBlock = Math.abs(blockID);\n    }\n\n    setPrivateKey(privateKey) {\n        try {\n            this.setAddress(\n                this.address.fromPrivateKey(privateKey)\n            );\n        } catch {\n            throw new Error('Invalid private key provided');\n        }\n\n        this.defaultPrivateKey = privateKey;\n        this.emit('privateKeyChanged', privateKey);\n    }\n\n    setAddress(address) {\n        if (!this.isAddress(address))\n            throw new Error('Invalid address provided');\n\n        const hex = this.address.toHex(address);\n        const base58 = this.address.fromHex(address);\n\n        if (this.defaultPrivateKey && this.address.fromPrivateKey(this.defaultPrivateKey) !== base58)\n            this.defaultPrivateKey = false;\n\n        this.defaultAddress = {\n            hex,\n            base58\n        };\n\n        this.emit('addressChanged', { hex, base58 });\n    }\n\n    fullnodeSatisfies(version) {\n        return semver.satisfies(this.fullnodeVersion, version);\n    }\n\n    isValidProvider(provider) {\n        return Object.values(providers).some(knownProvider => provider instanceof knownProvider);\n    }\n\n    setFullNode(fullNode) {\n        if (utils.isString(fullNode))\n            fullNode = new providers.HttpProvider(fullNode);\n\n        if (!this.isValidProvider(fullNode))\n            throw new Error('Invalid full node provided');\n\n        this.fullNode = fullNode;\n        this.fullNode.setStatusPage('wallet/getnowblock');\n\n        this.getFullnodeVersion();\n    }\n\n    setSolidityNode(solidityNode) {\n        if (utils.isString(solidityNode))\n            solidityNode = new providers.HttpProvider(solidityNode);\n\n        if (!this.isValidProvider(solidityNode))\n            throw new Error('Invalid solidity node provided');\n\n        this.solidityNode = solidityNode;\n        this.solidityNode.setStatusPage('walletsolidity/getnowblock');\n    }\n\n    setEventServer(...params) {\n        this.event.setServer(...params)\n    }\n\n    setHeader (headers = {}) {\n        const fullNode = new providers.HttpProvider(this.fullNode.host, 30000, false, false, headers);\n        const solidityNode = new providers.HttpProvider(this.solidityNode.host, 30000, false, false, headers);\n        const eventServer = new providers.HttpProvider(this.eventServer.host, 30000, false, false, headers);\n\n        this.setFullNode(fullNode);\n        this.setSolidityNode(solidityNode);\n        this.setEventServer(eventServer);\n    }\n\n    setFullNodeHeader (headers = {}) {\n        const fullNode = new providers.HttpProvider(this.fullNode.host, 30000, false, false, headers);\n        const solidityNode = new providers.HttpProvider(this.solidityNode.host, 30000, false, false, headers);\n\n        this.setFullNode(fullNode);\n        this.setSolidityNode(solidityNode);\n    }\n\n    setEventHeader (headers = {}) {\n        const eventServer = new providers.HttpProvider(this.eventServer.host, 30000, false, false, headers);\n        this.setEventServer(eventServer);\n    }\n\n    currentProviders() {\n        return {\n            fullNode: this.fullNode,\n            solidityNode: this.solidityNode,\n            eventServer: this.eventServer\n        };\n    }\n\n    currentProvider() {\n        return this.currentProviders();\n    }\n\n\n    getEventResult(...params) {\n\n        if (typeof params[1] !== 'object') {\n            params[1] = {\n                sinceTimestamp: params[1] || 0,\n                eventName: params[2] || false,\n                blockNumber: params[3] || false,\n                size: params[4] || 20,\n                page: params[5] || 1\n            }\n            params.splice(2, 4)\n\n            // callback:\n            if (!utils.isFunction(params[2])) {\n\n                if (utils.isFunction(params[1].page)) {\n                    params[2] = params[1].page;\n                    params[1].page = 1;\n                } else if (utils.isFunction(params[1].size)) {\n                    params[2] = params[1].size;\n                    params[1].size = 20;\n                    params[1].page = 1;\n                }\n            }\n        }\n\n        return this.event.getEventsByContractAddress(...params);\n    }\n\n    getEventByTransactionID(...params) {\n        return this.event.getEventsByTransactionID(...params)\n    }\n\n    contract(abi = [], address = false) {\n        return new Contract(this, abi, address);\n    }\n\n    static get address() {\n        return {\n            fromHex(address) {\n                if (!utils.isHex(address))\n                    return address;\n\n                return utils.crypto.getBase58CheckAddress(\n                    utils.code.hexStr2byteArray(address.replace(/^0x/, ADDRESS_PREFIX))\n                );\n            },\n            toHex(address) {\n                if (utils.isHex(address))\n                    return address.toLowerCase().replace(/^0x/, ADDRESS_PREFIX);\n\n                return utils.code.byteArray2hexStr(\n                    utils.crypto.decodeBase58Address(address)\n                ).toLowerCase();\n            },\n            fromPrivateKey(privateKey, strict = false) {\n                try {\n                    return utils.crypto.pkToAddress(privateKey, strict);\n                } catch {\n                    return false;\n                }\n            }\n        }\n    }\n\n    static sha3(string, prefix = true) {\n        return (prefix ? '0x' : '') + keccak256(Buffer.from(string, 'utf-8')).toString().substring(2);\n    }\n\n    static toHex(val) {\n        if (utils.isBoolean(val))\n            return TronWeb.fromDecimal(+val);\n\n        if (utils.isBigNumber(val))\n            return TronWeb.fromDecimal(val);\n\n        if (typeof val === 'object')\n            return TronWeb.fromUtf8(JSON.stringify(val));\n\n        if (utils.isString(val)) {\n            if (/^(-|)0x/.test(val))\n                return val;\n\n            if ((!isFinite(val)) || /^\\s*$/.test(val))\n                return TronWeb.fromUtf8(val);\n        }\n\n        let result = TronWeb.fromDecimal(val);\n        if (result === '0xNaN') {\n            throw new Error('The passed value is not convertible to a hex string');\n        } else {\n            return result;\n        }\n    }\n\n    static toUtf8(hex) {\n        if (utils.isHex(hex)) {\n            hex = hex.replace(/^0x/, '');\n            return Buffer.from(hex, 'hex').toString('utf8');\n        } else {\n            throw new Error('The passed value is not a valid hex string');\n        }\n    }\n\n    static fromUtf8(string) {\n        if (!utils.isString(string)) {\n            throw new Error('The passed value is not a valid utf-8 string')\n        }\n        return '0x' + Buffer.from(string, 'utf8').toString('hex');\n    }\n\n    static toAscii(hex) {\n        if (utils.isHex(hex)) {\n            let str = \"\";\n            let i = 0, l = hex.length;\n            if (hex.substring(0, 2) === '0x') {\n                i = 2;\n            }\n            for (; i < l; i += 2) {\n                let code = parseInt(hex.substr(i, 2), 16);\n                str += String.fromCharCode(code);\n            }\n            return str;\n        } else {\n            throw new Error('The passed value is not a valid hex string');\n        }\n    }\n\n    static fromAscii(string, padding) {\n        if (!utils.isString(string)) {\n            throw new Error('The passed value is not a valid utf-8 string')\n        }\n        return '0x' + Buffer.from(string, 'ascii').toString('hex').padEnd(padding, '0');\n    }\n\n\n    static toDecimal(value) {\n        return TronWeb.toBigNumber(value).toNumber();\n    }\n\n    static fromDecimal(value) {\n        const number = TronWeb.toBigNumber(value);\n        const result = number.toString(16);\n\n        return number.isLessThan(0) ? '-0x' + result.substr(1) : '0x' + result;\n    }\n\n    static fromSun(sun) {\n        const trx = TronWeb.toBigNumber(sun).div(1_000_000);\n        return utils.isBigNumber(sun) ? trx : trx.toString(10);\n    }\n\n    static toSun(trx) {\n        const sun = TronWeb.toBigNumber(trx).times(1_000_000);\n        return utils.isBigNumber(trx) ? sun : sun.toString(10);\n    }\n\n    static toBigNumber(amount = 0) {\n        if (utils.isBigNumber(amount))\n            return amount;\n\n        if (utils.isString(amount) && /^(-|)0x/.test(amount))\n            return new BigNumber(amount.replace('0x', ''), 16);\n\n        return new BigNumber(amount.toString(10), 10);\n    }\n\n    static isAddress(address = false) {\n        if (!utils.isString(address))\n            return false;\n\n        // Convert HEX to Base58\n        if (address.length === 42) {\n            try {\n                return TronWeb.isAddress(\n                    utils.crypto.getBase58CheckAddress(\n                        utils.code.hexStr2byteArray(address) // it throws an error if the address starts with 0x\n                    )\n                );\n            } catch (err) {\n                return false;\n            }\n        }\n        try {\n            return utils.crypto.isAddressValid(address);\n        } catch (err) {\n            return false;\n        }\n    }\n\n    static async createAccount() {\n        const account = utils.accounts.generateAccount();\n\n        return account;\n    }\n\n    async isConnected(callback = false) {\n        if (!callback)\n            return this.injectPromise(this.isConnected);\n\n        return callback(null, {\n            fullNode: await this.fullNode.isConnected(),\n            solidityNode: await this.solidityNode.isConnected(),\n            eventServer: this.eventServer && await this.eventServer.isConnected()\n        });\n    }\n};\n"],"sourceRoot":""}