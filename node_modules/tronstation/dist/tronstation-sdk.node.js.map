{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"@babel/runtime/helpers/asyncToGenerator\"","webpack:///external \"@babel/runtime/helpers/classCallCheck\"","webpack:///external \"@babel/runtime/helpers/createClass\"","webpack:///external \"@babel/runtime/helpers/possibleConstructorReturn\"","webpack:///external \"@babel/runtime/helpers/getPrototypeOf\"","webpack:///external \"@babel/runtime/helpers/inherits\"","webpack:///external \"lodash\"","webpack:///./src/utils/Validator.js","webpack:///./src/utils/Apis.js","webpack:///./src/lib/Base.js","webpack:///./src/lib/Energy.js","webpack:///./src/lib/Bandwidth.js","webpack:///./src/lib/Witness.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","Validator","tronStation","classCallCheck_default","this","tronWeb","utils","param","opt","val","v","Error","concat","address","isAddress","_","Apis","amount","parseFloat","undefined","str","pos","len","length","hexA","substr","parseInt","push","arr","_arr","one","toString","match","bytesLength","store","slice","st","String","fromCharCode","resource","defaultAddress","hex","getResourcesByName","resources","keys","trx","getAccountResources","accountResources","getChainParametersByName","getChainParameters","params","proposal","filter","Base","TronStation","apis","validator","Energy","_this","possibleConstructorReturn_default","getPrototypeOf_default","defaultTotalEnergyLimit","options","validateNumber","unit","toTrx","getResourceByName","totalEnergyWeight","getChainParameterByName","totalEnergyLimit","energy","fromTrx","energyFee","feeLimit","validateAddress","getAccount","account","balance","filterData","getTotalEnergyLimit","getEnergyFee","energyLimit","EnergyLimit","energyUsed","EnergyUsed","TotalEnergyWeight","ratio","accountTrxEnergy","accountTotalEnergy","maxEnergyLimit","feeLimitEnergy","Math","min","accountEnergy","accountEnergyUsed","Bandwidth","totalBandwidthLimit","TotalNetLimit","totalBandwidthWeight","TotalNetWeight","bandwidth","freebp","freeNetLimit","freebpUsed","freeNetUsed","accountbp","NetLimit","accountbpUsed","NetUsed","totalbp","Witness","listSuperRepresentatives","srs","data","rewardList","totalVotes","sumBy","sr","voteCount","isMainNet","fullNode","host","srAmount","Promise","all","map","_ref","asyncToGenerator_default","regenerator_default","a","mark","_callee","wrap","_context","prev","next","sent","rank","account_name","bytes","bytesToString","hexStringToBytes","url","votes","percentage","role","voteReward","ceil","blockReward","totalReward","stop","_x","apply","arguments","sortBy","index","addedVotes","srAddress","toHex","getSrVoteRewardList","res","existedSrArray","item","existedSr","totalSrVotes","ascSrs","reverse","sortedIndexBy","srName","srsLength","bp","witness"],"mappings":"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","file":"tronstation-sdk.node.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"@babel/runtime/helpers/asyncToGenerator\");","module.exports = require(\"@babel/runtime/helpers/classCallCheck\");","module.exports = require(\"@babel/runtime/helpers/createClass\");","module.exports = require(\"@babel/runtime/helpers/possibleConstructorReturn\");","module.exports = require(\"@babel/runtime/helpers/getPrototypeOf\");","module.exports = require(\"@babel/runtime/helpers/inherits\");","module.exports = require(\"lodash\");","export default class Validator {\n\n    constructor(tronStation) {\n        this.tronWeb = tronStation.tronWeb;\n        this.utils = this.tronWeb.utils;\n    }\n\n    validateNumber(param, opt, val) {\n        if (!param.v || typeof param.v !== 'number') {\n            throw new Error(`Invalid ${param.n} provided.`);\n        }\n        switch (opt) {\n            case '>=': {\n                if (param.v < val)\n                    throw new Error(`Provided ${param.n} should be ${opt} ${val}.`);\n            }\n        }\n    }\n\n    validateAddress(address) {\n        if (!this.tronWeb.isAddress(address))\n            throw new Error('Invalid address provided.');\n    }\n\n};\n","const _ = require(\"lodash\");\n\n\nexport default class Apis {\n\n    constructor(tronStation) {\n        this.tronWeb = tronStation.tronWeb;\n        this.utils = this.tronWeb.utils;\n    }\n\n    toTrx(amount) {\n        return parseFloat(amount) / 10e5;\n    }\n\n    fromTrx(amount) {\n        return amount * 10e5;\n    }\n\n    filterData(value) {\n        return value === undefined ? 0 : value;\n    }\n\n    hexStringToBytes(str) {\n        let pos = 0;\n        let len = str.length;\n        if (len % 2 !== 0) {\n            return null;\n        }\n        len /= 2;\n        let hexA = [];\n        for (let i = 0; i < len; i++) {\n            let s = str.substr(pos, 2);\n            let v = parseInt(s, 16);\n            hexA.push(v);\n            pos += 2;\n        }\n        return hexA;\n    }\n\n    byteToString (arr) {\n        if (typeof arr === \"string\") {\n            return arr;\n        }\n        var str = \"\",\n            _arr = arr;\n        for (var i = 0; i < _arr.length; i++) {\n            var one = _arr[i].toString(2),\n                v = one.match(/^1+?(?=0)/);\n            if (v && one.length === 8) {\n                var bytesLength = v[0].length;\n                var store = _arr[i].toString(2).slice(7 - bytesLength);\n                for (var st = 1; st < bytesLength; st++) {\n                    store += _arr[st + i].toString(2).slice(2);\n                }\n                str += String.fromCharCode(parseInt(store, 2));\n                i += bytesLength - 1;\n            } else {\n                str += String.fromCharCode(_arr[i]);\n            }\n        }\n        return str;\n    }\n\n    async getResourceByName(resource, address = this.tronWeb.defaultAddress.hex) {\n        switch (resource) {\n            case 'EnergyWeight': {\n                resource = 'TotalEnergyWeight';\n                break;\n            }\n            case 'BandwidthWeight': {\n                resource = 'TotalNetWeight';\n                break;\n            }\n            case 'BandwidthLimit': {\n                resource = 'TotalNetLimit';\n                break;\n            }\n            default:\n                throw new Error('Invalid resource type provided.');\n        };\n\n        const resources = await this.getResourcesByName([resource], address);\n        if (!resources || Object.keys(resources).length === 0)\n            throw new Error('Get resource failed.')\n        return resources[resource];\n    }\n\n    async getResourcesByName(resources, address = this.tronWeb.defaultAddress.hex) {\n        if (!this.tronWeb.isAddress(address))\n            throw new Error('Invalid address provides.')\n\n        const accountResources = await this.tronWeb.trx.getAccountResources(address);\n        if (!accountResources)\n            throw new Error('Get resource failed.');\n\n        let object = {};\n        for (let i = 0; i < resources.length; i++) {\n            object[resources[i]] = accountResources[resources[i]];\n        }\n\n        return object;\n    }\n\n    async getChainParameterByName(key) {\n        const param = await this.getChainParametersByName([key]);\n        if(!param)\n            throw new Error('Get chain parameter failed.');\n        return param[key];\n    }\n\n    async getChainParametersByName(keys) {\n        const params = await this.tronWeb.trx.getChainParameters();\n\n        let object = {};\n        for (let i = 0; i < keys.length; i++) {\n            const proposal = _.filter(params, ['key', keys[i]])[0];\n            if (proposal) object[keys[i]] = proposal['value'];\n        }\n\n        return object;\n    }\n\n};","import TronStation from '../index';\nimport Validator from '../utils/Validator';\nimport Apis from '../utils/Apis';\n\nclass Base {\n\n    constructor(tronStation) {\n        if (!tronStation || !(tronStation instanceof TronStation))\n            throw new Error('Expected instance of TronStation');\n\n        this.tronStation = tronStation;\n        this.tronWeb = tronStation.tronWeb;\n        this.apis = new Apis(this.tronStation);\n        this.validator = new Validator(this.tronStation);\n        this.utils = this.tronWeb.utils;\n    }\n\n}\n\nexport default Base\n","import Base from './Base';\n\nexport default class Energy extends Base {\n\n    constructor(tronStation) {\n        super(tronStation);\n        this.defaultTotalEnergyLimit = 10e10\n    }\n\n    async trx2FrozenEnergy(amount, options = {}) {\n\n        this.validator.validateNumber({ n: 'amount', v: amount}, '>=', 0);\n\n        if (options.unit === 'sun')\n            amount = this.apis.toTrx(amount);\n\n        let totalEnergyWeight = await this.apis.getResourceByName('EnergyWeight');\n        let totalEnergyLimit = await this.apis.getChainParameterByName('getTotalEnergyLimit');\n        return (amount * (totalEnergyLimit ? totalEnergyLimit : this.defaultTotalEnergyLimit)) / totalEnergyWeight;\n    }\n\n    async frozenEnergy2Trx(energy, options = {}) {\n\n        this.validator.validateNumber({ n: 'energy', v: energy}, '>=', 0);\n\n        let totalEnergyWeight = await this.apis.getResourceByName('EnergyWeight');\n        let totalEnergyLimit = await this.apis.getChainParameterByName('getTotalEnergyLimit');\n        let amount = (energy * totalEnergyWeight) / (totalEnergyLimit ? totalEnergyLimit : this.defaultTotalEnergyLimit);\n\n        if (options.unit === 'sun') {\n            amount = this.apis.fromTrx(amount);\n        }\n        return amount;\n    }\n\n    async trx2BurnedEnergy(amount, options = {}) {\n\n        this.validator.validateNumber({ n: 'amount', v: amount}, '>=', 0);\n\n        if (options.unit === 'sun')\n            amount = this.apis.toTrx(amount);\n\n        let energyFee = await this.apis.getChainParameterByName(\"getEnergyFee\");\n        return this.apis.fromTrx(amount) / energyFee;\n    }\n\n    async burnedEnergy2Trx(energy, options = {}) {\n\n        this.validator.validateNumber({ n: 'energy', v: energy}, '>=', 0);\n\n        let energyFee = await this.apis.getChainParameterByName(\"getEnergyFee\");\n        let amount = energy * this.apis.toTrx(energyFee);\n\n        if (options.unit === 'sun') {\n            amount = this.apis.fromTrx(amount);\n        }\n        return amount;\n    }\n\n    async getMaxEnergyLimit(address, feeLimit, options = {}) {\n\n        this.validator.validateAddress(address);\n        this.validator.validateNumber({ n: 'feeLimit', v: feeLimit}, '>=', 0);\n\n        if (options.unit === 'sun') {\n            this.apis.toTrx(feeLimit);\n        }\n        if (feeLimit > 1000) {\n            throw new Error('Max fee limit has a max limit of 1000 trx.');\n        }\n\n        let account = await this.tronWeb.trx.getAccount(address);\n        if (!account || Object.keys(account).length === 0) {\n            throw new Error('Account not exists or not activated.');\n        }\n        if (account.balance === undefined) account.balance = 0;\n\n        let params = await this.apis.getChainParametersByName(['getTotalEnergyLimit', 'getEnergyFee']);\n        let totalEnergyLimit = this.apis.filterData(params.getTotalEnergyLimit);\n        let energyFee = this.apis.filterData(params.getEnergyFee);\n\n        let resources = await this.apis.getResourcesByName(['EnergyLimit', 'EnergyUsed', 'TotalEnergyWeight'], address);\n        let energyLimit = this.apis.filterData(resources.EnergyLimit);\n        let energyUsed = this.apis.filterData(resources.EnergyUsed);\n        let totalEnergyWeight = this.apis.filterData(resources.TotalEnergyWeight);\n\n        let ratio = totalEnergyLimit / totalEnergyWeight;\n        let accountTrxEnergy = (account.balance / energyFee);\n        let accountTotalEnergy = energyLimit + accountTrxEnergy - energyUsed;\n        let feeLimitEnergy = (feeLimit * ratio);\n\n        let maxEnergyLimit;\n        if (energyLimit > feeLimitEnergy) {\n            maxEnergyLimit = Math.min(accountTotalEnergy, feeLimitEnergy);\n        } else {\n            maxEnergyLimit = accountTotalEnergy;\n        }\n\n        return {\n            accountEnergy: energyLimit,\n            accountEnergyUsed: energyUsed,\n            accountTrxEnergy: accountTrxEnergy,\n            accountTotalEnergy: accountTotalEnergy,\n            feeLimit: feeLimit,\n            feeLimitEnergy: feeLimitEnergy,\n            maxEnergyLimit: maxEnergyLimit\n        }\n\n    }\n}\n","import Base from './Base';\n\nexport default class Bandwidth extends Base {\n\n    constructor(tronStation) {\n        super(tronStation);\n    }\n\n    async trx2FrozenBandwidth(amount, options = {}) {\n\n        this.validator.validateNumber({ n: 'amount', v: amount}, '>=', 0);\n\n        if (options.unit === 'sun')\n            amount = this.apis.toTrx(amount);\n\n        let accountResources = await this.apis.getResourcesByName(['TotalNetLimit', 'TotalNetWeight']);\n        let totalBandwidthLimit = this.apis.filterData(accountResources.TotalNetLimit);\n        let totalBandwidthWeight = accountResources.TotalNetWeight;\n        return (amount * totalBandwidthLimit) / totalBandwidthWeight;\n    }\n\n    async frozenBandwidth2Trx(bandwidth, options = {}) {\n\n        this.validator.validateNumber({ n: 'bandwidth', v: bandwidth}, '>=', 0);\n\n        let accountResources = await this.apis.getResourcesByName(['TotalNetLimit', 'TotalNetWeight']);\n        let totalBandwidthLimit = this.apis.filterData(accountResources.TotalNetLimit);\n        let totalBandwidthWeight = accountResources.TotalNetWeight;\n        let amount = (bandwidth * totalBandwidthWeight) / totalBandwidthLimit;\n\n        if (options.unit === 'sun') {\n            amount = this.apis.fromTrx(amount);\n        }\n        return amount;\n    }\n\n    async getAccountBandwidth(address, options = {}) {\n\n        this.validator.validateAddress(address)\n\n        let account = await this.tronWeb.trx.getAccount(address);\n        if (account.balance === undefined) account.balance = 0;\n\n        let resources = [\"freeNetLimit\", \"freeNetUsed\", \"NetLimit\", \"NetUsed\"];\n        let accountResources = await this.apis.getResourcesByName(resources, address);\n\n        let balance = this.apis.filterData(account.balance);\n        let freebp = this.apis.filterData(accountResources.freeNetLimit);\n        let freebpUsed = this.apis.filterData(accountResources.freeNetUsed);\n        let accountbp = this.apis.filterData(accountResources.NetLimit);\n        let accountbpUsed = this.apis.filterData(accountResources.NetUsed);\n        let totalbp = freebp + accountbp - freebpUsed - accountbpUsed;\n\n        return {\n            balance: balance,\n            freebp: freebp,\n            freebpUsed: freebpUsed,\n            accountbp: accountbp,\n            accountbpUsed: accountbpUsed,\n            totalbp: totalbp\n        }\n    }\n\n}\n","import Base from './Base';\nconst _ = require(\"lodash\");\n\nexport default class Witness extends Base {\n\n    constructor(tronStation) {\n        super(tronStation);\n    }\n\n    async getSrVoteRewardList() {\n\n        const srs = await this.tronWeb.trx.listSuperRepresentatives();\n        let data = [];\n        let rewardList = [];\n        let totalVotes = _.sumBy(srs, sr => {\n            return sr.voteCount;\n        });\n\n        let totalVoteReward = 16 * 20 * 60 * 24;\n        let totalBlockReward = 2 * totalVoteReward;\n        let isMainNet = this.tronWeb.fullNode.host === 'https://api.trongrid.io';\n        let srAmount = isMainNet ? 27 : srs.length;\n\n        await Promise.all(\n            srs.map(async sr => {\n                let object = {};\n                const account = await this.tronWeb.trx.getAccount(sr.address);\n                object.rank = 0;\n                if (account.account_name !== undefined) {\n                    object.name = this.tronWeb.utils.bytes.bytesToString(this.apis.hexStringToBytes(account.account_name));\n                } else {\n                    object.name = sr.url;\n                }\n\n                object.url = sr.url;\n                object.address = sr.address;\n                object.votes = this.apis.filterData(sr.voteCount);\n                object.percentage = (100 * (object.votes / totalVotes));\n                object.role = \"\";\n                object.voteReward = Math.ceil(totalVoteReward * (object.votes / totalVotes));\n                object.blockReward = Math.ceil(totalBlockReward / srAmount);\n                object.totalReward = object.voteReward + object.blockReward;\n                data.push(object);\n            })\n        );\n\n        data = _.sortBy(data, d => {\n            return d.votes * -1;\n        });\n\n        data.map((sr, index) => {\n            if (index < 27) {\n                sr.rank = index + 1;\n                sr.role = 'sr';\n                rewardList.push(sr);\n            } else {\n                sr.blockReward = 0;\n                sr.totalReward = sr.voteReward;\n                sr.rank = index + 1;\n                sr.role = 'candidate';\n                rewardList.push(sr);\n            }\n        });\n\n        return {\n            totalVotes: totalVotes,\n            rewardList: rewardList\n        };\n    }\n\n    async calculateSrReward(addedVotes, srAddress) {\n\n        this.validator.validateNumber({ n: 'addedVotes', v: addedVotes}, '>=', 0);\n        if (srAddress)\n            this.validator.validateAddress(srAddress);\n\n        let isMainNet = this.tronWeb.fullNode.host === 'https://api.trongrid.io';\n        srAddress = this.tronWeb.address.toHex(srAddress);\n\n        let res = await this.getSrVoteRewardList();\n        let srs = res.rewardList;\n        if (!srs || srs.length === 0) throw new Error(\"Error getting reward list\");\n\n        let existedSrArray = _.filter(srs, item => item.address === srAddress);\n        let existedSr;\n        if (existedSrArray && existedSrArray.length === 1)\n            existedSr = existedSrArray[0];\n\n        let totalSrVotes = (existedSr ? existedSr.votes : 0) + addedVotes;\n        let ascSrs = _.reverse(srs);\n        let pos = _.sortedIndexBy(ascSrs, { votes: totalSrVotes }, (d) => { return d.votes; });\n        let rank = addedVotes === 0\n            ? srs.length - pos\n            : srs.length - pos + 1;\n        let srName = existedSr\n            ? existedSr.name\n            : rank <= 27\n                ? 'New SR'\n                : 'New Candidate';\n        let totalVotes = res.totalVotes + addedVotes;\n        let percentage = (100 * totalSrVotes) / totalVotes;\n        let voteReward = Math.ceil(16 * 20 * 60 * 24 * (totalSrVotes / totalVotes));\n        let srsLength = isMainNet ? 27 : srs.length;\n        let blockReward =\n            rank <= srsLength\n                ? Math.ceil((32 * 20 * 60 * 24) / srsLength)\n                : 0;\n        let totalReward = blockReward + voteReward;\n\n        return {\n            rank: rank,\n            sr: srName,\n            votes: totalSrVotes,\n            totalVotes: totalVotes,\n            percentage: percentage,\n            voteReward: voteReward,\n            blockReward: blockReward,\n            totalReward: totalReward\n        };\n\n    }\n\n}\n","import Energy from 'lib/Energy';\nimport Bandwidth from 'lib/Bandwidth';\nimport Witness from 'lib/Witness';\nimport Apis from 'utils/Apis';\n\nexport default class TronStation {\n\n    constructor(tronWeb = false) {\n        if (!tronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        if (!tronWeb.defaultAddress)\n            throw new Error('Expected default account set up in TronWeb');\n        this.tronWeb = tronWeb;\n        this.energy = new Energy(this);\n        this.defaultAddress = tronWeb.defaultAddress;\n        this.bp = new Bandwidth(this);\n        this.witness = new Witness(this);\n        this.apis = new Apis(this);\n    }\n\n    setTronWeb(tronWeb = false) {\n        if (!tronWeb)\n            throw new Error('Expected instance of TronWeb');\n        if (!tronWeb.defaultAddress)\n            throw new Error('Expected default account set up in TronWeb');\n        this.tronWeb = tronWeb;\n        this.defaultAddress = tronWeb.defaultAddress;\n        this.energy = new Energy(this);\n        this.defaultAddress = tronWeb.defaultAddress;\n        this.bp = new Bandwidth(this);\n        this.witness = new Witness(this);\n        this.apis = new Apis(this);\n    }\n\n}\n"],"sourceRoot":""}