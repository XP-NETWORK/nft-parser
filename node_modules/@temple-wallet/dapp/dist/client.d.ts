import { TempleDAppNetwork, TempleDAppMetadata, TempleDAppPermission } from "./types";
export declare function isAvailable(): Promise<boolean>;
export declare function onAvailabilityChange(callback: (available: boolean) => void): () => void;
export declare function onPermissionChange(callback: (permission: TempleDAppPermission) => void): () => void;
export declare function getCurrentPermission(): Promise<TempleDAppPermission>;
export declare function requestPermission(network: TempleDAppNetwork, appMeta: TempleDAppMetadata, force: boolean): Promise<{
    rpc: string;
    pkh: string;
    publicKey: string;
}>;
export declare function requestOperation(sourcePkh: string, opParams: any): Promise<string>;
export declare function requestSign(sourcePkh: string, payload: string): Promise<string>;
export declare function requestBroadcast(signedOpBytes: string): Promise<string>;
export declare class TempleWalletError implements Error {
    name: string;
    message: string;
}
export declare class NotGrantedTempleWalletError extends TempleWalletError {
    name: string;
    message: string;
}
export declare class NotFoundTempleWalletError extends TempleWalletError {
    name: string;
    message: string;
}
export declare class InvalidParamsTempleWalletError extends TempleWalletError {
    name: string;
    message: string;
}
//# sourceMappingURL=client.d.ts.map