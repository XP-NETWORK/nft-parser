"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotConnectedTempleWalletError = exports.TempleWallet = void 0;
const taquito_1 = require("@taquito/taquito");
const client_1 = require("./client");
class TempleWallet {
    appName;
    static isAvailable = client_1.isAvailable;
    static onAvailabilityChange = client_1.onAvailabilityChange;
    static getCurrentPermission = client_1.getCurrentPermission;
    static onPermissionChange = client_1.onPermissionChange;
    permission = null;
    constructor(appName, existingPermission) {
        this.appName = appName;
        if (existingPermission) {
            this.permission = existingPermission;
        }
    }
    get connected() {
        return Boolean(this.permission);
    }
    toTezos() {
        assertConnected(this.permission);
        const tezos = new taquito_1.TezosToolkit(this.permission.rpc);
        tezos.setProvider({ wallet: this });
        return tezos;
    }
    async connect(network, opts = { forcePermission: false }) {
        const perm = await client_1.requestPermission(network, { name: this.appName }, opts.forcePermission);
        this.permission = perm;
    }
    reconnect(network) {
        return this.connect(network, { forcePermission: true });
    }
    async getPKH() {
        assertConnected(this.permission);
        return this.permission.pkh;
    }
    async mapTransferParamsToWalletParams(params) {
        const walletParams = await params();
        return this.removeDefaultParams(walletParams, await taquito_1.createTransferOperation(this.formatParameters(walletParams)));
    }
    async mapOriginateParamsToWalletParams(params) {
        const walletParams = await params();
        return this.removeDefaultParams(walletParams, await taquito_1.createOriginationOperation(this.formatParameters(walletParams)));
    }
    async mapDelegateParamsToWalletParams(params) {
        const walletParams = await params();
        return this.removeDefaultParams(walletParams, await taquito_1.createSetDelegateOperation(this.formatParameters(walletParams)));
    }
    async sendOperations(opParams) {
        assertConnected(this.permission);
        return client_1.requestOperation(this.permission.pkh, opParams.map(formatOpParams));
    }
    async sign(payload) {
        assertConnected(this.permission);
        return client_1.requestSign(this.permission.pkh, payload);
    }
    async broadcast(signedOpBytes) {
        assertConnected(this.permission);
        return client_1.requestBroadcast(signedOpBytes);
    }
    formatParameters(params) {
        if (params.fee) {
            params.fee = params.fee.toString();
        }
        if (params.storageLimit) {
            params.storageLimit = params.storageLimit.toString();
        }
        if (params.gasLimit) {
            params.gasLimit = params.gasLimit.toString();
        }
        return params;
    }
    removeDefaultParams(params, operatedParams) {
        if (!params.fee) {
            delete operatedParams.fee;
        }
        if (!params.storageLimit) {
            delete operatedParams.storage_limit;
        }
        if (!params.gasLimit) {
            delete operatedParams.gas_limit;
        }
        return operatedParams;
    }
}
exports.TempleWallet = TempleWallet;
class NotConnectedTempleWalletError extends client_1.TempleWalletError {
    name = "TempleWalletNotConnected";
    message = "You need to connect TempleWallet by calling templeWallet.connect() first";
}
exports.NotConnectedTempleWalletError = NotConnectedTempleWalletError;
function assertConnected(perm) {
    if (!perm) {
        throw new NotConnectedTempleWalletError();
    }
}
function formatOpParams(op) {
    const { fee, gas_limit, storage_limit, ...rest } = op;
    switch (op.kind) {
        case "origination":
            return {
                ...rest,
                mutez: true,
                fee,
                gasLimit: gas_limit,
                storageLimit: storage_limit,
            };
        case "transaction":
            const { destination, amount, parameters, ...txRest } = rest;
            return {
                ...txRest,
                to: destination,
                amount: +amount,
                mutez: true,
                parameter: parameters,
                fee,
                gasLimit: gas_limit,
                storageLimit: storage_limit,
            };
        default:
            return {
                ...rest,
                fee,
                gasLimit: gas_limit,
                storageLimit: storage_limit,
            };
    }
}
//# sourceMappingURL=taquito-wallet.js.map