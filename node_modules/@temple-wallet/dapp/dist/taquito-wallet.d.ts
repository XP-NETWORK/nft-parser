import { TezosToolkit, WalletProvider, WalletDelegateParams, WalletTransferParams, WalletOriginateParams } from "@taquito/taquito";
import { isAvailable, onAvailabilityChange, getCurrentPermission, onPermissionChange, TempleWalletError } from "./client";
import { TempleDAppNetwork, TempleDAppPermission } from "./types";
export declare class TempleWallet implements WalletProvider {
    private appName;
    static isAvailable: typeof isAvailable;
    static onAvailabilityChange: typeof onAvailabilityChange;
    static getCurrentPermission: typeof getCurrentPermission;
    static onPermissionChange: typeof onPermissionChange;
    permission: TempleDAppPermission;
    constructor(appName: string, existingPermission?: TempleDAppPermission);
    get connected(): boolean;
    toTezos(): TezosToolkit;
    connect(network: TempleDAppNetwork, opts?: {
        forcePermission: boolean;
    }): Promise<void>;
    reconnect(network: TempleDAppNetwork): Promise<void>;
    getPKH(): Promise<string>;
    mapTransferParamsToWalletParams(params: () => Promise<WalletTransferParams>): Promise<any>;
    mapOriginateParamsToWalletParams(params: () => Promise<WalletOriginateParams>): Promise<any>;
    mapDelegateParamsToWalletParams(params: () => Promise<WalletDelegateParams>): Promise<any>;
    sendOperations(opParams: any[]): Promise<string>;
    sign(payload: string): Promise<string>;
    broadcast(signedOpBytes: string): Promise<string>;
    private formatParameters;
    private removeDefaultParams;
}
export declare class NotConnectedTempleWalletError extends TempleWalletError {
    name: string;
    message: string;
}
//# sourceMappingURL=taquito-wallet.d.ts.map