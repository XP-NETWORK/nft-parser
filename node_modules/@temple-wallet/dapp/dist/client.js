"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvalidParamsTempleWalletError = exports.NotFoundTempleWalletError = exports.NotGrantedTempleWalletError = exports.TempleWalletError = exports.requestBroadcast = exports.requestSign = exports.requestOperation = exports.requestPermission = exports.getCurrentPermission = exports.onPermissionChange = exports.onAvailabilityChange = exports.isAvailable = void 0;
const nanoid_1 = require("nanoid");
const taquito_1 = require("@taquito/taquito");
const types_1 = require("./types");
function isAvailable() {
    return new Promise((resolve) => {
        const handleMessage = (evt) => {
            if (evt.source === window &&
                evt.data?.type === types_1.TemplePageMessageType.Response &&
                evt.data?.payload === "PONG") {
                done(true);
            }
        };
        const done = (result) => {
            resolve(result);
            window.removeEventListener("message", handleMessage);
            clearTimeout(t);
        };
        send({
            type: types_1.TemplePageMessageType.Request,
            payload: "PING",
        });
        window.addEventListener("message", handleMessage);
        const t = setTimeout(() => done(false), 500);
    });
}
exports.isAvailable = isAvailable;
function onAvailabilityChange(callback) {
    let t;
    let currentStatus = false;
    const check = async (attempt = 0) => {
        const initial = attempt < 5;
        const available = await isAvailable();
        if (currentStatus !== available) {
            callback(available);
            currentStatus = available;
        }
        t = setTimeout(check, available ? 10_000 : !initial ? 5_000 : 0, initial ? attempt + 1 : attempt);
    };
    check();
    return () => clearTimeout(t);
}
exports.onAvailabilityChange = onAvailabilityChange;
function onPermissionChange(callback) {
    let t;
    let currentPerm = null;
    const check = async () => {
        try {
            const perm = await getCurrentPermission();
            if (!permissionsAreEqual(perm, currentPerm)) {
                callback(perm);
                currentPerm = perm;
            }
        }
        catch { }
        t = setTimeout(check, 10_000);
    };
    check();
    return () => clearTimeout(t);
}
exports.onPermissionChange = onPermissionChange;
async function getCurrentPermission() {
    const res = await request({
        type: types_1.TempleDAppMessageType.GetCurrentPermissionRequest,
    });
    assertResponse(res.type === types_1.TempleDAppMessageType.GetCurrentPermissionResponse);
    return res.permission;
}
exports.getCurrentPermission = getCurrentPermission;
async function requestPermission(network, appMeta, force) {
    const res = await request({
        type: types_1.TempleDAppMessageType.PermissionRequest,
        network,
        appMeta,
        force,
    });
    assertResponse(res.type === types_1.TempleDAppMessageType.PermissionResponse);
    return {
        rpc: res.rpc,
        pkh: res.pkh,
        publicKey: res.publicKey,
    };
}
exports.requestPermission = requestPermission;
async function requestOperation(sourcePkh, opParams) {
    const res = await request({
        type: types_1.TempleDAppMessageType.OperationRequest,
        sourcePkh,
        opParams,
    });
    assertResponse(res.type === types_1.TempleDAppMessageType.OperationResponse);
    return res.opHash;
}
exports.requestOperation = requestOperation;
async function requestSign(sourcePkh, payload) {
    const res = await request({
        type: types_1.TempleDAppMessageType.SignRequest,
        sourcePkh,
        payload,
    });
    assertResponse(res.type === types_1.TempleDAppMessageType.SignResponse);
    return res.signature;
}
exports.requestSign = requestSign;
async function requestBroadcast(signedOpBytes) {
    const res = await request({
        type: types_1.TempleDAppMessageType.BroadcastRequest,
        signedOpBytes,
    });
    assertResponse(res.type === types_1.TempleDAppMessageType.BroadcastResponse);
    return res.opHash;
}
exports.requestBroadcast = requestBroadcast;
function request(payload) {
    return new Promise((resolve, reject) => {
        const reqId = nanoid_1.nanoid();
        const handleMessage = (evt) => {
            const res = evt.data;
            switch (true) {
                case evt.source !== window || res?.reqId !== reqId:
                    return;
                case res?.type === types_1.TemplePageMessageType.Response:
                    resolve(res.payload);
                    window.removeEventListener("message", handleMessage);
                    break;
                case res?.type === types_1.TemplePageMessageType.ErrorResponse:
                    reject(createError(res.payload));
                    window.removeEventListener("message", handleMessage);
                    break;
            }
        };
        send({
            type: types_1.TemplePageMessageType.Request,
            payload,
            reqId,
        });
        window.addEventListener("message", handleMessage);
    });
}
function permissionsAreEqual(aPerm, bPerm) {
    if (aPerm === null)
        return bPerm === null;
    return aPerm.pkh === bPerm?.pkh && aPerm.rpc === bPerm?.rpc;
}
function createError(payload) {
    switch (true) {
        case payload === types_1.TempleDAppErrorType.NotGranted:
            return new NotGrantedTempleWalletError();
        case payload === types_1.TempleDAppErrorType.NotFound:
            return new NotFoundTempleWalletError();
        case payload === types_1.TempleDAppErrorType.InvalidParams:
            return new InvalidParamsTempleWalletError();
        case Array.isArray(payload) &&
            payload[0] === types_1.TempleDAppErrorType.TezosOperation &&
            Array.isArray(payload[1]) &&
            payload[1].length > 0:
            return new taquito_1.TezosOperationError(payload[1]);
        case typeof payload === "string" && payload.startsWith("__tezos__"):
            return new Error(payload.replace("__tezos__", ""));
        default:
            return new TempleWalletError();
    }
}
function assertResponse(condition) {
    if (!condition) {
        throw new Error("Invalid response recieved");
    }
}
function send(msg) {
    window.postMessage(msg, "*");
}
class TempleWalletError {
    name = "TempleWalletError";
    message = "An unknown error occured. Please try again or report it";
}
exports.TempleWalletError = TempleWalletError;
class NotGrantedTempleWalletError extends TempleWalletError {
    name = "NotGrantedTempleWalletError";
    message = "Permission Not Granted";
}
exports.NotGrantedTempleWalletError = NotGrantedTempleWalletError;
class NotFoundTempleWalletError extends TempleWalletError {
    name = "NotFoundTempleWalletError";
    message = "Account Not Found. Try connect again";
}
exports.NotFoundTempleWalletError = NotFoundTempleWalletError;
class InvalidParamsTempleWalletError extends TempleWalletError {
    name = "InvalidParamsTempleWalletError";
    message = "Some of the parameters you provided are invalid";
}
exports.InvalidParamsTempleWalletError = InvalidParamsTempleWalletError;
//# sourceMappingURL=client.js.map